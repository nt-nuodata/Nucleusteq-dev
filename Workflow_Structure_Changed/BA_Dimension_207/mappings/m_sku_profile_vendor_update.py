# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ./MappingUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_sku_profile_vendor_update")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_sku_profile_vendor_update", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_To_PRIMARY_VENDOR_PRE_0


query_0 = f"""SELECT
  SKU_NBR AS SKU_NBR,
  VENDOR_ID AS VENDOR_ID,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  REGULAR_VENDOR_CD AS REGULAR_VENDOR_CD,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  LOAD_DT AS LOAD_DT
FROM
  PRIMARY_VENDOR_PRE"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_To_PRIMARY_VENDOR_PRE_0")

# COMMAND ----------
# DBTITLE 1, Shortcut_To_SKU_VENDOR_DAY_1


query_1 = f"""SELECT
  SKU_NBR AS SKU_NBR,
  VENDOR_ID AS VENDOR_ID,
  VENDOR_SUBRANGE_CD AS VENDOR_SUBRANGE_CD,
  DELETE_IND AS DELETE_IND,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  DELIV_EFF_DT AS DELIV_EFF_DT,
  DELIV_END_DT AS DELIV_END_DT,
  REGULAR_VENDOR_CD AS REGULAR_VENDOR_CD,
  ROUNDING_PROFILE_CD AS ROUNDING_PROFILE_CD,
  COUNTRY_CD AS COUNTRY_CD,
  VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  LOAD_DT AS LOAD_DT
FROM
  SKU_VENDOR_DAY"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("Shortcut_To_SKU_VENDOR_DAY_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_VENDOR_PROFILE_2


query_2 = f"""SELECT
  VENDOR_ID AS VENDOR_ID,
  VENDOR_NAME AS VENDOR_NAME,
  VENDOR_TYPE_ID AS VENDOR_TYPE_ID,
  VENDOR_NBR AS VENDOR_NBR,
  LOCATION_ID AS LOCATION_ID,
  SUPERIOR_VENDOR_ID AS SUPERIOR_VENDOR_ID,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  PARENT_VENDOR_NAME AS PARENT_VENDOR_NAME,
  PURCH_GROUP_ID AS PURCH_GROUP_ID,
  EDI_ELIG_FLAG AS EDI_ELIG_FLAG,
  PURCHASE_BLOCK AS PURCHASE_BLOCK,
  POSTING_BLOCK AS POSTING_BLOCK,
  DELETION_FLAG AS DELETION_FLAG,
  VIP_CD AS VIP_CD,
  INACTIVE_FLAG AS INACTIVE_FLAG,
  PAYMENT_TERM_CD AS PAYMENT_TERM_CD,
  INCO_TERM_CD AS INCO_TERM_CD,
  ADDRESS AS ADDRESS,
  CITY AS CITY,
  STATE AS STATE,
  COUNTRY_CD AS COUNTRY_CD,
  ZIP AS ZIP,
  CONTACT AS CONTACT,
  CONTACT_PHONE AS CONTACT_PHONE,
  PHONE AS PHONE,
  PHONE_EXT AS PHONE_EXT,
  FAX AS FAX,
  RTV_ELIG_FLAG AS RTV_ELIG_FLAG,
  RTV_TYPE_CD AS RTV_TYPE_CD,
  RTV_FREIGHT_TYPE_CD AS RTV_FREIGHT_TYPE_CD,
  INDUSTRY_CD AS INDUSTRY_CD,
  LATITUDE AS LATITUDE,
  LONGITUDE AS LONGITUDE,
  TIME_ZONE_ID AS TIME_ZONE_ID,
  ADD_DT AS ADD_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT
FROM
  VENDOR_PROFILE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_VENDOR_PROFILE_2")

# COMMAND ----------
# DBTITLE 1, ASQ_SHORTCUT_TO_PRIMARY_VENDOR_PRE_3


query_3 = f"""SELECT
  R.PRODUCT_ID AS PRODUCT_ID,
  NVL(PSV.VENDOR_ID, 1802) AS PRIMARY_VENDOR_ID,
  NVL(
    PSV.VENDOR_NAME,
    (
      SELECT
        VENDOR_NAME
      FROM
        Shortcut_to_VENDOR_PROFILE_2
      WHERE
        VENDOR_ID = 1802
    )
  ) AS PRIMARY_VENDOR_NAME,
  NVL(PSV.PARENT_VENDOR_ID, 1802) AS PARENT_VENDOR_ID,
  NVL(
    PSV.PARENT_VENDOR_NAME,
    (
      SELECT
        VENDOR_NAME
      FROM
        Shortcut_to_VENDOR_PROFILE_2
      WHERE
        VENDOR_ID = 1802
    )
  ) AS PARENT_VENDOR_NAME,
  PSV.UNIT_NUMERATOR AS UNIT_NUMERATOR,
  PSV.UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  PSV.COUNTRY_CD AS COUNTRY_CD,
  PSV.VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  NVL(PSV.VENDOR_SUBRANGE_CD, ' ') AS VENDOR_SUBRANGE_CD,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  (
    SELECT
      PVP.SKU_NBR,
      PVP.VENDOR_ID,
      VP.VENDOR_NAME,
      PVP.PARENT_VENDOR_ID,
      VP.PARENT_VENDOR_NAME,
      PVP.UNIT_NUMERATOR,
      PVP.UNIT_DENOMINATOR,
      SVD.COUNTRY_CD,
      SVD.VENDOR_ARTICLE_NBR,
      SVD.VENDOR_SUBRANGE_CD
    FROM
      Shortcut_To_PRIMARY_VENDOR_PRE_0 PVP
      LEFT JOIN Shortcut_to_VENDOR_PROFILE_2 VP ON PVP.VENDOR_ID = VP.VENDOR_ID
      LEFT OUTER JOIN Shortcut_To_SKU_VENDOR_DAY_1 SVD ON PVP.SKU_NBR = SVD.SKU_NBR
      AND PVP.VENDOR_ID = SVD.VENDOR_ID
  ) PSV,
  SKU_PROFILE_RPT R
WHERE
  R.SKU_NBR = PSV.SKU_NBR
  AND (
    NVL(R.PRIMARY_VENDOR_ID, 0) <> NVL(PSV.VENDOR_ID, 1802)
    OR NVL(R.PARENT_VENDOR_ID, 0) <> NVL(PSV.PARENT_VENDOR_ID, 1802)
    OR NVL(R.UNIT_NUMERATOR, 0) <> NVL(PSV.UNIT_NUMERATOR, 1)
    OR NVL(R.UNIT_DENOMINATOR, 0) <> NVL(PSV.UNIT_DENOMINATOR, 1)
    OR NVL(R.COUNTRY_CD, 'A') <> NVL(PSV.COUNTRY_CD, 'B')
    OR NVL(R.VENDOR_ARTICLE_NBR, 'A') <> NVL(PSV.VENDOR_ARTICLE_NBR, 'N')
    OR NVL(R.VENDOR_SUBRANGE_CD, 'A') <> NVL(PSV.VENDOR_SUBRANGE_CD, 'B')
  )"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("ASQ_SHORTCUT_TO_PRIMARY_VENDOR_PRE_3")

# COMMAND ----------
# DBTITLE 1, UPD_SKU_PROFILE_4


query_4 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
  PRIMARY_VENDOR_NAME AS PRIMARY_VENDOR_NAME,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  PARENT_VENDOR_NAME AS PARENT_VENDOR_NAME,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  COUNTRY_CD AS COUNTRY_CD,
  VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  VENDOR_SUBRANGE_CD AS VENDOR_SUBRANGE_CD,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  dd_update AS UPDATE_STRATEGY_FLAG
FROM
  ASQ_SHORTCUT_TO_PRIMARY_VENDOR_PRE_3"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("UPD_SKU_PROFILE_4")

# COMMAND ----------
# DBTITLE 1, SKU_PROFILE


spark.sql("""MERGE INTO SKU_PROFILE AS TARGET
USING
  UPD_SKU_PROFILE_4 AS SOURCE ON TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID,
  TARGET.PRIMARY_VENDOR_ID = SOURCE.PRIMARY_VENDOR_ID,
  TARGET.PARENT_VENDOR_ID = SOURCE.PARENT_VENDOR_ID,
  TARGET.COUNTRY_CD = SOURCE.COUNTRY_CD,
  TARGET.UNIT_NUMERATOR = SOURCE.UNIT_NUMERATOR,
  TARGET.UNIT_DENOMINATOR = SOURCE.UNIT_DENOMINATOR,
  TARGET.VENDOR_ARTICLE_NBR = SOURCE.VENDOR_ARTICLE_NBR
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.PRIMARY_VENDOR_ID = SOURCE.PRIMARY_VENDOR_ID
  AND TARGET.PARENT_VENDOR_ID = SOURCE.PARENT_VENDOR_ID
  AND TARGET.COUNTRY_CD = SOURCE.COUNTRY_CD
  AND TARGET.UNIT_NUMERATOR = SOURCE.UNIT_NUMERATOR
  AND TARGET.UNIT_DENOMINATOR = SOURCE.UNIT_DENOMINATOR
  AND TARGET.VENDOR_ARTICLE_NBR = SOURCE.VENDOR_ARTICLE_NBR THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.PRODUCT_ID,
    TARGET.PRIMARY_VENDOR_ID,
    TARGET.PARENT_VENDOR_ID,
    TARGET.COUNTRY_CD,
    TARGET.UNIT_NUMERATOR,
    TARGET.UNIT_DENOMINATOR,
    TARGET.VENDOR_ARTICLE_NBR
  )
VALUES
  (
    SOURCE.PRODUCT_ID,
    SOURCE.PRIMARY_VENDOR_ID,
    SOURCE.PARENT_VENDOR_ID,
    SOURCE.COUNTRY_CD,
    SOURCE.UNIT_NUMERATOR,
    SOURCE.UNIT_DENOMINATOR,
    SOURCE.VENDOR_ARTICLE_NBR
  )""")

# COMMAND ----------
# DBTITLE 1, SKU_PROFILE_RPT


spark.sql("""MERGE INTO SKU_PROFILE_RPT AS TARGET
USING
  UPD_SKU_PROFILE_4 AS SOURCE ON TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID,
  TARGET.PRIMARY_VENDOR_ID = SOURCE.PRIMARY_VENDOR_ID,
  TARGET.PRIMARY_VENDOR_NAME = SOURCE.PRIMARY_VENDOR_NAME,
  TARGET.VENDOR_SUBRANGE_CD = SOURCE.VENDOR_SUBRANGE_CD,
  TARGET.PARENT_VENDOR_ID = SOURCE.PARENT_VENDOR_ID,
  TARGET.PARENT_VENDOR_NAME = SOURCE.PARENT_VENDOR_NAME,
  TARGET.COUNTRY_CD = SOURCE.COUNTRY_CD,
  TARGET.UNIT_NUMERATOR = SOURCE.UNIT_NUMERATOR,
  TARGET.UNIT_DENOMINATOR = SOURCE.UNIT_DENOMINATOR,
  TARGET.VENDOR_ARTICLE_NBR = SOURCE.VENDOR_ARTICLE_NBR
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.PRIMARY_VENDOR_ID = SOURCE.PRIMARY_VENDOR_ID
  AND TARGET.PRIMARY_VENDOR_NAME = SOURCE.PRIMARY_VENDOR_NAME
  AND TARGET.VENDOR_SUBRANGE_CD = SOURCE.VENDOR_SUBRANGE_CD
  AND TARGET.PARENT_VENDOR_ID = SOURCE.PARENT_VENDOR_ID
  AND TARGET.PARENT_VENDOR_NAME = SOURCE.PARENT_VENDOR_NAME
  AND TARGET.COUNTRY_CD = SOURCE.COUNTRY_CD
  AND TARGET.UNIT_NUMERATOR = SOURCE.UNIT_NUMERATOR
  AND TARGET.UNIT_DENOMINATOR = SOURCE.UNIT_DENOMINATOR
  AND TARGET.VENDOR_ARTICLE_NBR = SOURCE.VENDOR_ARTICLE_NBR THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.PRODUCT_ID,
    TARGET.PRIMARY_VENDOR_ID,
    TARGET.PRIMARY_VENDOR_NAME,
    TARGET.VENDOR_SUBRANGE_CD,
    TARGET.PARENT_VENDOR_ID,
    TARGET.PARENT_VENDOR_NAME,
    TARGET.COUNTRY_CD,
    TARGET.UNIT_NUMERATOR,
    TARGET.UNIT_DENOMINATOR,
    TARGET.VENDOR_ARTICLE_NBR
  )
VALUES
  (
    SOURCE.PRODUCT_ID,
    SOURCE.PRIMARY_VENDOR_ID,
    SOURCE.PRIMARY_VENDOR_NAME,
    SOURCE.VENDOR_SUBRANGE_CD,
    SOURCE.PARENT_VENDOR_ID,
    SOURCE.PARENT_VENDOR_NAME,
    SOURCE.COUNTRY_CD,
    SOURCE.UNIT_NUMERATOR,
    SOURCE.UNIT_DENOMINATOR,
    SOURCE.VENDOR_ARTICLE_NBR
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_sku_profile_vendor_update")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_sku_profile_vendor_update", mainWorkflowId, parentName)
