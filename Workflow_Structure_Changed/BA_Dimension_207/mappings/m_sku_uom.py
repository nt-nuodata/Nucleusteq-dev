# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ./MappingUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_sku_uom")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_sku_uom", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_To_SKU_UOM_PRE_0


query_0 = f"""SELECT
  SKU_NBR AS SKU_NBR,
  UOM_CD AS UOM_CD,
  DELETE_IND AS DELETE_IND,
  UOM_NUMERATOR AS UOM_NUMERATOR,
  UOM_DENOMINATOR AS UOM_DENOMINATOR,
  LENGTH_AMT AS LENGTH_AMT,
  WIDTH_AMT AS WIDTH_AMT,
  HEIGHT_AMT AS HEIGHT_AMT,
  DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
  VOLUME_AMT AS VOLUME_AMT,
  VOLUME_UNIT_DESC AS VOLUME_UNIT_DESC,
  WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
  WEIGHT_UNIT_DESC AS WEIGHT_UNIT_DESC
FROM
  SKU_UOM_PRE"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_To_SKU_UOM_PRE_0")

# COMMAND ----------
# DBTITLE 1, Shortcut_To_SKU_UOM_1


query_1 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  UOM_CD AS UOM_CD,
  UOM_NUMERATOR AS UOM_NUMERATOR,
  UOM_DENOMINATOR AS UOM_DENOMINATOR,
  LENGTH_AMT AS LENGTH_AMT,
  WIDTH_AMT AS WIDTH_AMT,
  HEIGHT_AMT AS HEIGHT_AMT,
  DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
  VOLUME_AMT AS VOLUME_AMT,
  VOLUME_UOM_CD AS VOLUME_UOM_CD,
  WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
  WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
  WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
  SCM_VOLUME_UOM_CD AS SCM_VOLUME_UOM_CD,
  SCM_VOLUME_AMT AS SCM_VOLUME_AMT,
  SCM_WEIGHT_UOM_CD AS SCM_WEIGHT_UOM_CD,
  SCM_WEIGHT_NET_AMT AS SCM_WEIGHT_NET_AMT,
  DELETE_DT AS DELETE_DT,
  LOAD_DT AS LOAD_DT
FROM
  SKU_UOM"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("Shortcut_To_SKU_UOM_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_To_SKU_PROFILE_2


query_2 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  SKU_TYPE AS SKU_TYPE,
  PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
  STATUS_ID AS STATUS_ID,
  SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
  SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
  SKU_DESC AS SKU_DESC,
  ALT_DESC AS ALT_DESC,
  SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
  SAP_CLASS_ID AS SAP_CLASS_ID,
  SAP_DEPT_ID AS SAP_DEPT_ID,
  SAP_DIVISION_ID AS SAP_DIVISION_ID,
  PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  COUNTRY_CD AS COUNTRY_CD,
  IMPORT_FLAG AS IMPORT_FLAG,
  HTS_CODE_ID AS HTS_CODE_ID,
  CONTENTS AS CONTENTS,
  CONTENTS_UNITS AS CONTENTS_UNITS,
  WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
  WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
  SIZE_DESC AS SIZE_DESC,
  BUM_QTY AS BUM_QTY,
  UOM_CD AS UOM_CD,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  BUYER_ID AS BUYER_ID,
  PURCH_GROUP_ID AS PURCH_GROUP_ID,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
  TAX_CLASS_ID AS TAX_CLASS_ID,
  VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
  BRAND_CD AS BRAND_CD,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  STATELINE_FLAG AS STATELINE_FLAG,
  SIGN_TYPE_CD AS SIGN_TYPE_CD,
  OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
  VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  INIT_MKDN_DT AS INIT_MKDN_DT,
  DISC_START_DT AS DISC_START_DT,
  ADD_DT AS ADD_DT,
  DELETE_DT AS DELETE_DT,
  UPDATE_DT AS UPDATE_DT,
  FIRST_SALE_DT AS FIRST_SALE_DT,
  LAST_SALE_DT AS LAST_SALE_DT,
  FIRST_INV_DT AS FIRST_INV_DT,
  LAST_INV_DT AS LAST_INV_DT,
  LOAD_DT AS LOAD_DT,
  BASE_NBR AS BASE_NBR,
  BP_COLOR_ID AS BP_COLOR_ID,
  BP_SIZE_ID AS BP_SIZE_ID,
  BP_BREED_ID AS BP_BREED_ID,
  BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
  BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
  BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
  CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
  NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
  NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
  RTV_DEPT_CD AS RTV_DEPT_CD,
  GL_ACCT_NBR AS GL_ACCT_NBR,
  ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
  COMPONENT_FLAG AS COMPONENT_FLAG,
  ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
  ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
  ZDISCO_PID_DT AS ZDISCO_PID_DT,
  ZDISCO_START_DT AS ZDISCO_START_DT,
  ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
  ZDISCO_DC_DT AS ZDISCO_DC_DT,
  ZDISCO_STR_DT AS ZDISCO_STR_DT,
  ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
  ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT
FROM
  SKU_PROFILE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_To_SKU_PROFILE_2")

# COMMAND ----------
# DBTITLE 1, ASQ_SHORTCUT_TO_SKU_UOM_PRE_3


query_3 = f"""SELECT
  SKU_UOM_LOAD.PRODUCT_ID AS PRODUCT_ID,
  Shortcut_To_SKU_UOM_1.PRODUCT_ID AS PRODUCT_ID1,
  SKU_UOM_LOAD.UOM_CD AS UOM_CD,
  SKU_UOM_LOAD.UOM_NUMERATOR AS UOM_NUMERATOR,
  SKU_UOM_LOAD.UOM_DENOMINATOR AS UNIT_DENOMINATOR,
  SKU_UOM_LOAD.LENGTH_AMT AS LENGTH_AMT,
  SKU_UOM_LOAD.WIDTH_AMT AS WIDTH_AMT,
  SKU_UOM_LOAD.HEIGHT_AMT AS HEIGHT_AMT,
  SKU_UOM_LOAD.DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
  SKU_UOM_LOAD.VOLUME_AMT AS VOLUME_AMT,
  SKU_UOM_LOAD.VOLUME_UNIT_DESC AS VOLUME_UNIT_DESC,
  SKU_UOM_LOAD.WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
  SKU_UOM_LOAD.WEIGHT_UNIT_DESC AS WEIGHT_UOM_CD,
  SKU_UOM_LOAD.WEIGHT_UOM_CD AS PROF_WEIGHT_UOM_CD,
  SKU_UOM_LOAD.WEIGHT_NET_AMT AS PROF_WEIGHT_NET_AMT,
  NVL(
    Shortcut_To_SKU_UOM_1.DELETE_DT,
    SKU_UOM_LOAD.DELETE_DT
  ) AS DELETE_DT,
  NVL(Shortcut_To_SKU_UOM_1.LOAD_DT, CURRENT_DATE) AS LOAD_DT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  (
    SELECT
      Shortcut_To_SKU_PROFILE_2.PRODUCT_ID,
      Shortcut_To_SKU_UOM_PRE_0.UOM_CD UOM_CD,
      Shortcut_To_SKU_PROFILE_2.WEIGHT_UOM_CD WEIGHT_UOM_CD,
      Shortcut_To_SKU_UOM_PRE_0.UOM_NUMERATOR UOM_NUMERATOR,
      Shortcut_To_SKU_UOM_PRE_0.UOM_DENOMINATOR UOM_DENOMINATOR,
      Shortcut_To_SKU_UOM_PRE_0.LENGTH_AMT LENGTH_AMT,
      Shortcut_To_SKU_UOM_PRE_0.WIDTH_AMT WIDTH_AMT,
      Shortcut_To_SKU_UOM_PRE_0.HEIGHT_AMT HEIGHT_AMT,
      Shortcut_To_SKU_UOM_PRE_0.DIMENSION_UNIT_DESC DIMENSION_UNIT_DESC,
      Shortcut_To_SKU_UOM_PRE_0.VOLUME_AMT VOLUME_AMT,
      Shortcut_To_SKU_UOM_PRE_0.VOLUME_UNIT_DESC VOLUME_UNIT_DESC,
      Shortcut_To_SKU_UOM_PRE_0.WEIGHT_GROSS_AMT WEIGHT_GROSS_AMT,
      Shortcut_To_SKU_UOM_PRE_0.WEIGHT_UNIT_DESC WEIGHT_UNIT_DESC,
      Shortcut_To_SKU_PROFILE_2.WEIGHT_NET_AMT WEIGHT_NET_AMT,
      DECODE(
        Shortcut_To_SKU_UOM_PRE_0.DELETE_IND,
        'X',
        CURRENT_DATE,
        NULL
      ) DELETE_DT
    FROM
      Shortcut_To_SKU_UOM_PRE_0,
      Shortcut_To_SKU_PROFILE_2
    WHERE
      Shortcut_To_SKU_UOM_PRE_0.SKU_NBR = Shortcut_To_SKU_PROFILE_2.SKU_NBR
  ) SKU_UOM_LOAD
  LEFT OUTER JOIN Shortcut_To_SKU_UOM_1 ON SKU_UOM_LOAD.PRODUCT_ID = Shortcut_To_SKU_UOM_1.PRODUCT_ID
  AND SKU_UOM_LOAD.UOM_CD = Shortcut_To_SKU_UOM_1.UOM_CD"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("ASQ_SHORTCUT_TO_SKU_UOM_PRE_3")

# COMMAND ----------
# DBTITLE 1, LKP_SKU_UOM_WEIGHT_UOM_4


query_4 = f"""SELECT
  ASTSUP3.PROF_WEIGHT_UOM_CD AS in_UOM_CD,
  US.UOM_STD_CD AS UOM_STD_CD,
  US.NUMERATOR AS NUMERATOR,
  US.DENOMINATOR AS DENOMINATOR,
  ASTSUP3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  ASQ_SHORTCUT_TO_SKU_UOM_PRE_3 ASTSUP3
  LEFT JOIN (
    SELECT
      UOM_STANDARD.NUMERATOR as NUMERATOR,
      UOM_STANDARD.DENOMINATOR as DENOMINATOR,
      TRIM(UOM_STANDARD.UOM_STD_CD) as UOM_STD_CD
    FROM
      UOM_STANDARD
  ) AS US ON US.UOM_STD_CD = ASTSUP3.PROF_WEIGHT_UOM_CD"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("LKP_SKU_UOM_WEIGHT_UOM_4")

# COMMAND ----------
# DBTITLE 1, LKP_SKU_PROFILE_WEIGHT_UOM_5


query_5 = f"""SELECT
  ASTSUP3.WEIGHT_UOM_CD AS in_UOM_CD,
  US.UOM_STD_CD AS UOM_STD_CD,
  US.NUMERATOR AS NUMERATOR,
  US.DENOMINATOR AS DENOMINATOR,
  ASTSUP3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  ASQ_SHORTCUT_TO_SKU_UOM_PRE_3 ASTSUP3
  LEFT JOIN (
    SELECT
      UOM_STANDARD.NUMERATOR as NUMERATOR,
      UOM_STANDARD.DENOMINATOR as DENOMINATOR,
      TRIM(UOM_STANDARD.UOM_STD_CD) as UOM_STD_CD
    FROM
      UOM_STANDARD
  ) AS US ON US.UOM_STD_CD = ASTSUP3.WEIGHT_UOM_CD"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("LKP_SKU_PROFILE_WEIGHT_UOM_5")

# COMMAND ----------
# DBTITLE 1, EXP_CONVERT_NET_WEIGHT_6


query_6 = f"""SELECT
  ASTSUP3.PROF_WEIGHT_NET_AMT * (ASTSUP3.UOM_NUMERATOR / ASTSUP3.UNIT_DENOMINATOR) * (LSPWU5.NUMERATOR / LSPWU5.DENOMINATOR) * (LSUWU4.DENOMINATOR / LSUWU4.NUMERATOR) AS UOM_WEIGHT_NET_AMT,
  LSPWU5.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  LKP_SKU_PROFILE_WEIGHT_UOM_5 LSPWU5
  INNER JOIN ASQ_SHORTCUT_TO_SKU_UOM_PRE_3 ASTSUP3 ON LSPWU5.Monotonically_Increasing_Id = ASTSUP3.Monotonically_Increasing_Id
  INNER JOIN LKP_SKU_UOM_WEIGHT_UOM_4 LSUWU4 ON ASTSUP3.Monotonically_Increasing_Id = LSUWU4.Monotonically_Increasing_Id"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("EXP_CONVERT_NET_WEIGHT_6")

# COMMAND ----------
# DBTITLE 1, UPSERT_SKU_UOM_7


query_7 = f"""SELECT
  ASTSUP3.PRODUCT_ID AS PRODUCT_ID,
  ASTSUP3.PRODUCT_ID1 AS PRODUCT_ID1,
  ASTSUP3.UOM_CD AS UOM_CD,
  ASTSUP3.UOM_NUMERATOR AS UOM_NUMERATOR,
  ASTSUP3.UNIT_DENOMINATOR AS UOM_DENOMINATOR,
  ASTSUP3.LENGTH_AMT AS LENGTH_AMT,
  ASTSUP3.WIDTH_AMT AS WIDTH_AMT,
  ASTSUP3.HEIGHT_AMT AS HEIGHT_AMT,
  ASTSUP3.DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
  ASTSUP3.VOLUME_AMT AS VOLUME_AMT,
  ASTSUP3.VOLUME_UNIT_DESC AS VOLUME_UNIT_DESC,
  ASTSUP3.WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
  ASTSUP3.PROF_WEIGHT_UOM_CD AS WEIGHT_UNIT_DESC,
  ECNW6.UOM_WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
  ASTSUP3.DELETE_DT AS DELETE_DT,
  ASTSUP3.LOAD_DT AS LOAD_DT,
  ASTSUP3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(
    ISNULL(ASTSUP3.DELETE_DT),
    IFF(
      ISNULL(ASTSUP3.PRODUCT_ID1),
      'DD_INSERT',
      'DD_UPDATE'
    ),
    'DD_DELETE'
  ) AS UPDATE_STRATEGY_FLAG
FROM
  ASQ_SHORTCUT_TO_SKU_UOM_PRE_3 ASTSUP3
  INNER JOIN EXP_CONVERT_NET_WEIGHT_6 ECNW6 ON ASTSUP3.Monotonically_Increasing_Id = ECNW6.Monotonically_Increasing_Id"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("UPSERT_SKU_UOM_7")

# COMMAND ----------
# DBTITLE 1, SKU_UOM


spark.sql("""MERGE INTO SKU_UOM AS TARGET
USING
  UPSERT_SKU_UOM_7 AS SOURCE ON TARGET.UOM_CD = SOURCE.UOM_CD
  AND TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID,
  TARGET.UOM_CD = SOURCE.UOM_CD,
  TARGET.UOM_NUMERATOR = SOURCE.UOM_NUMERATOR,
  TARGET.UOM_DENOMINATOR = SOURCE.UOM_DENOMINATOR,
  TARGET.LENGTH_AMT = SOURCE.LENGTH_AMT,
  TARGET.WIDTH_AMT = SOURCE.WIDTH_AMT,
  TARGET.HEIGHT_AMT = SOURCE.HEIGHT_AMT,
  TARGET.DIMENSION_UNIT_DESC = SOURCE.DIMENSION_UNIT_DESC,
  TARGET.VOLUME_AMT = SOURCE.VOLUME_AMT,
  TARGET.VOLUME_UOM_CD = SOURCE.VOLUME_UNIT_DESC,
  TARGET.WEIGHT_GROSS_AMT = SOURCE.WEIGHT_GROSS_AMT,
  TARGET.WEIGHT_UOM_CD = SOURCE.WEIGHT_UNIT_DESC,
  TARGET.WEIGHT_NET_AMT = SOURCE.WEIGHT_NET_AMT,
  TARGET.DELETE_DT = SOURCE.DELETE_DT,
  TARGET.LOAD_DT = SOURCE.LOAD_DT
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.UOM_NUMERATOR = SOURCE.UOM_NUMERATOR
  AND TARGET.UOM_DENOMINATOR = SOURCE.UOM_DENOMINATOR
  AND TARGET.LENGTH_AMT = SOURCE.LENGTH_AMT
  AND TARGET.WIDTH_AMT = SOURCE.WIDTH_AMT
  AND TARGET.HEIGHT_AMT = SOURCE.HEIGHT_AMT
  AND TARGET.DIMENSION_UNIT_DESC = SOURCE.DIMENSION_UNIT_DESC
  AND TARGET.VOLUME_AMT = SOURCE.VOLUME_AMT
  AND TARGET.VOLUME_UOM_CD = SOURCE.VOLUME_UNIT_DESC
  AND TARGET.WEIGHT_GROSS_AMT = SOURCE.WEIGHT_GROSS_AMT
  AND TARGET.WEIGHT_UOM_CD = SOURCE.WEIGHT_UNIT_DESC
  AND TARGET.WEIGHT_NET_AMT = SOURCE.WEIGHT_NET_AMT
  AND TARGET.DELETE_DT = SOURCE.DELETE_DT
  AND TARGET.LOAD_DT = SOURCE.LOAD_DT THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.PRODUCT_ID,
    TARGET.UOM_CD,
    TARGET.UOM_NUMERATOR,
    TARGET.UOM_DENOMINATOR,
    TARGET.LENGTH_AMT,
    TARGET.WIDTH_AMT,
    TARGET.HEIGHT_AMT,
    TARGET.DIMENSION_UNIT_DESC,
    TARGET.VOLUME_AMT,
    TARGET.VOLUME_UOM_CD,
    TARGET.WEIGHT_GROSS_AMT,
    TARGET.WEIGHT_UOM_CD,
    TARGET.WEIGHT_NET_AMT,
    TARGET.DELETE_DT,
    TARGET.LOAD_DT
  )
VALUES
  (
    SOURCE.PRODUCT_ID,
    SOURCE.UOM_CD,
    SOURCE.UOM_NUMERATOR,
    SOURCE.UOM_DENOMINATOR,
    SOURCE.LENGTH_AMT,
    SOURCE.WIDTH_AMT,
    SOURCE.HEIGHT_AMT,
    SOURCE.DIMENSION_UNIT_DESC,
    SOURCE.VOLUME_AMT,
    SOURCE.VOLUME_UNIT_DESC,
    SOURCE.WEIGHT_GROSS_AMT,
    SOURCE.WEIGHT_UNIT_DESC,
    SOURCE.WEIGHT_NET_AMT,
    SOURCE.DELETE_DT,
    SOURCE.LOAD_DT
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_sku_uom")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_sku_uom", mainWorkflowId, parentName)
