# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ./MappingUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_Site_Hierarchy_Hist")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_Site_Hierarchy_Hist", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DISTRICT_0


query_0 = f"""SELECT
  DISTRICT_ID AS DISTRICT_ID,
  DISTRICT_DESC AS DISTRICT_DESC,
  DISTRICT_SITE_LOGIN_ID AS DISTRICT_SITE_LOGIN_ID,
  DISTRICT_SALON_LOGIN_ID AS DISTRICT_SALON_LOGIN_ID,
  DISTRICT_HOTEL_LOGIN_ID AS DISTRICT_HOTEL_LOGIN_ID
FROM
  DISTRICT"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_DISTRICT_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DISTRICT_1


query_1 = f"""SELECT
  DISTRICT_ID AS DISTRICT_ID,
  DISTRICT_DESC AS DISTRICT_DESC,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DISTRICT_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_DISTRICT_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_REGION_2


query_2 = f"""SELECT
  REGION_ID AS REGION_ID,
  REGION_DESC AS REGION_DESC
FROM
  REGION"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_REGION_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_REGION_3


query_3 = f"""SELECT
  REGION_ID AS REGION_ID,
  REGION_DESC AS REGION_DESC,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_REGION_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_REGION_3")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_PROFILE_4


query_4 = f"""SELECT
  LOCATION_ID AS LOCATION_ID,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  STORE_NAME AS STORE_NAME,
  STORE_TYPE_ID AS STORE_TYPE_ID,
  STORE_OPEN_CLOSE_FLAG AS STORE_OPEN_CLOSE_FLAG,
  COMPANY_ID AS COMPANY_ID,
  REGION_ID AS REGION_ID,
  DISTRICT_ID AS DISTRICT_ID,
  PRICE_ZONE_ID AS PRICE_ZONE_ID,
  PRICE_AD_ZONE_ID AS PRICE_AD_ZONE_ID,
  REPL_DC_NBR AS REPL_DC_NBR,
  REPL_FISH_DC_NBR AS REPL_FISH_DC_NBR,
  REPL_FWD_DC_NBR AS REPL_FWD_DC_NBR,
  SQ_FEET_RETAIL AS SQ_FEET_RETAIL,
  SQ_FEET_TOTAL AS SQ_FEET_TOTAL,
  SITE_ADDRESS AS SITE_ADDRESS,
  SITE_CITY AS SITE_CITY,
  STATE_CD AS STATE_CD,
  COUNTRY_CD AS COUNTRY_CD,
  POSTAL_CD AS POSTAL_CD,
  SITE_MAIN_TELE_NO AS SITE_MAIN_TELE_NO,
  SITE_GROOM_TELE_NO AS SITE_GROOM_TELE_NO,
  SITE_EMAIL_ADDRESS AS SITE_EMAIL_ADDRESS,
  SITE_SALES_FLAG AS SITE_SALES_FLAG,
  EQUINE_MERCH_ID AS EQUINE_MERCH_ID,
  EQUINE_SITE_ID AS EQUINE_SITE_ID,
  EQUINE_SITE_OPEN_DT AS EQUINE_SITE_OPEN_DT,
  GEO_LATITUDE_NBR AS GEO_LATITUDE_NBR,
  GEO_LONGITUDE_NBR AS GEO_LONGITUDE_NBR,
  PETSMART_DMA_CD AS PETSMART_DMA_CD,
  LOYALTY_PGM_TYPE_ID AS LOYALTY_PGM_TYPE_ID,
  LOYALTY_PGM_STATUS_ID AS LOYALTY_PGM_STATUS_ID,
  LOYALTY_PGM_START_DT AS LOYALTY_PGM_START_DT,
  LOYALTY_PGM_CHANGE_DT AS LOYALTY_PGM_CHANGE_DT,
  BP_COMPANY_NBR AS BP_COMPANY_NBR,
  BP_GL_ACCT AS BP_GL_ACCT,
  TP_LOC_FLAG AS TP_LOC_FLAG,
  TP_ACTIVE_CNT AS TP_ACTIVE_CNT,
  PROMO_LABEL_CD AS PROMO_LABEL_CD,
  PARENT_LOCATION_ID AS PARENT_LOCATION_ID,
  LOCATION_NBR AS LOCATION_NBR,
  TIME_ZONE_ID AS TIME_ZONE_ID,
  DELV_SERVICE_CLASS_ID AS DELV_SERVICE_CLASS_ID,
  PICK_SERVICE_CLASS_ID AS PICK_SERVICE_CLASS_ID,
  SITE_LOGIN_ID AS SITE_LOGIN_ID,
  SITE_MANAGER_ID AS SITE_MANAGER_ID,
  SITE_OPEN_YRS_AMT AS SITE_OPEN_YRS_AMT,
  HOTEL_FLAG AS HOTEL_FLAG,
  DAYCAMP_FLAG AS DAYCAMP_FLAG,
  VET_FLAG AS VET_FLAG,
  DIST_MGR_NAME AS DIST_MGR_NAME,
  DIST_SVC_MGR_NAME AS DIST_SVC_MGR_NAME,
  REGION_VP_NAME AS REGION_VP_NAME,
  REGION_TRAINER_NAME AS REGION_TRAINER_NAME,
  ASSET_PROTECT_NAME AS ASSET_PROTECT_NAME,
  SITE_COUNTY AS SITE_COUNTY,
  SITE_FAX_NO AS SITE_FAX_NO,
  SFT_OPEN_DT AS SFT_OPEN_DT,
  DM_EMAIL_ADDRESS AS DM_EMAIL_ADDRESS,
  DSM_EMAIL_ADDRESS AS DSM_EMAIL_ADDRESS,
  RVP_EMAIL_ADDRESS AS RVP_EMAIL_ADDRESS,
  TRADE_AREA AS TRADE_AREA,
  FDLPS_NAME AS FDLPS_NAME,
  FDLPS_EMAIL AS FDLPS_EMAIL,
  OVERSITE_MGR_NAME AS OVERSITE_MGR_NAME,
  OVERSITE_MGR_EMAIL AS OVERSITE_MGR_EMAIL,
  SAFETY_DIRECTOR_NAME AS SAFETY_DIRECTOR_NAME,
  SAFETY_DIRECTOR_EMAIL AS SAFETY_DIRECTOR_EMAIL,
  RETAIL_MANAGER_SAFETY_NAME AS RETAIL_MANAGER_SAFETY_NAME,
  RETAIL_MANAGER_SAFETY_EMAIL AS RETAIL_MANAGER_SAFETY_EMAIL,
  AREA_DIRECTOR_NAME AS AREA_DIRECTOR_NAME,
  AREA_DIRECTOR_EMAIL AS AREA_DIRECTOR_EMAIL,
  DC_GENERAL_MANAGER_NAME AS DC_GENERAL_MANAGER_NAME,
  DC_GENERAL_MANAGER_EMAIL AS DC_GENERAL_MANAGER_EMAIL,
  ASST_DC_GENERAL_MANAGER_NAME1 AS ASST_DC_GENERAL_MANAGER_NAME1,
  ASST_DC_GENERAL_MANAGER_EMAIL1 AS ASST_DC_GENERAL_MANAGER_EMAIL1,
  ASST_DC_GENERAL_MANAGER_NAME2 AS ASST_DC_GENERAL_MANAGER_NAME2,
  ASST_DC_GENERAL_MANAGER_EMAIL2 AS ASST_DC_GENERAL_MANAGER_EMAIL2,
  REGIONAL_DC_SAFETY_MGR_NAME AS REGIONAL_DC_SAFETY_MGR_NAME,
  REGIONAL_DC_SAFETY_MGR_EMAIL AS REGIONAL_DC_SAFETY_MGR_EMAIL,
  DC_PEOPLE_SUPERVISOR_NAME AS DC_PEOPLE_SUPERVISOR_NAME,
  DC_PEOPLE_SUPERVISOR_EMAIL AS DC_PEOPLE_SUPERVISOR_EMAIL,
  PEOPLE_MANAGER_NAME AS PEOPLE_MANAGER_NAME,
  PEOPLE_MANAGER_EMAIL AS PEOPLE_MANAGER_EMAIL,
  ASSET_PROT_DIR_NAME AS ASSET_PROT_DIR_NAME,
  ASSET_PROT_DIR_EMAIL AS ASSET_PROT_DIR_EMAIL,
  SR_REG_ASSET_PROT_MGR_NAME AS SR_REG_ASSET_PROT_MGR_NAME,
  SR_REG_ASSET_PROT_MGR_EMAIL AS SR_REG_ASSET_PROT_MGR_EMAIL,
  REG_ASSET_PROT_MGR_NAME AS REG_ASSET_PROT_MGR_NAME,
  REG_ASSET_PROT_MGR_EMAIL AS REG_ASSET_PROT_MGR_EMAIL,
  ASSET_PROTECT_EMAIL AS ASSET_PROTECT_EMAIL,
  TP_START_DT AS TP_START_DT,
  OPEN_DT AS OPEN_DT,
  GR_OPEN_DT AS GR_OPEN_DT,
  CLOSE_DT AS CLOSE_DT,
  HOTEL_OPEN_DT AS HOTEL_OPEN_DT,
  ADD_DT AS ADD_DT,
  DELETE_DT AS DELETE_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT
FROM
  SITE_PROFILE"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("Shortcut_to_SITE_PROFILE_4")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_PROFILE_5


query_5 = f"""SELECT
  LOCATION_ID AS LOCATION_ID,
  REGION_ID AS REGION_ID,
  DISTRICT_ID AS DISTRICT_ID,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_PROFILE_4
WHERE
  location_type_id in (8)"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("SQ_Shortcut_to_SITE_PROFILE_5")

# COMMAND ----------
# DBTITLE 1, JNRTRANS_6


query_6 = f"""SELECT
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.REGION_ID AS REGION_ID,
  DETAIL.DISTRICT_ID AS DISTRICT_ID,
  MASTER.DISTRICT_DESC AS DISTRICT_DESC,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DISTRICT_1 MASTER
  INNER JOIN SQ_Shortcut_to_SITE_PROFILE_5 DETAIL ON MASTER.DISTRICT_ID = DETAIL.DISTRICT_ID"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("JNRTRANS_6")

# COMMAND ----------
# DBTITLE 1, JNRTRANS1_7


query_7 = f"""SELECT
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.DISTRICT_ID AS DISTRICT_ID,
  DETAIL.DISTRICT_DESC AS DISTRICT_DESC,
  MASTER.REGION_ID AS REGION_ID1,
  MASTER.REGION_DESC AS REGION_DESC,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_REGION_3 MASTER
  INNER JOIN JNRTRANS_6 DETAIL ON MASTER.REGION_ID = DETAIL.REGION_ID"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("JNRTRANS1_7")

# COMMAND ----------
# DBTITLE 1, EXPTRANS_AFTER_JOINS_8


query_8 = f"""SELECT
  LOCATION_ID AS LOCATION_ID,
  DISTRICT_ID AS DISTRICT_ID,
  DISTRICT_DESC AS DISTRICT_DESC,
  REGION_ID1 AS REGION_ID1,
  REGION_DESC AS REGION_DESC,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNRTRANS1_7"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("EXPTRANS_AFTER_JOINS_8")

# COMMAND ----------
# DBTITLE 1, LKP_NZ_SITE_HIERARCHY_HIST_9


query_9 = f"""SELECT
  SHH.LOCATION_ID AS LOCATION_ID,
  SHH.SITE_HIERARCHY_EFF_DT AS SITE_HIERARCHY_EFF_DT,
  SHH.DISTRICT_ID AS DISTRICT_ID,
  SHH.DISTRICT_DESC AS DISTRICT_DESC,
  SHH.REGION_ID AS REGION_ID,
  SHH.REGION_DESC AS REGION_DESC,
  SHH.SITE_HIERARCHY_END_DT AS SITE_HIERARCHY_END_DT,
  SHH.CURRENT_SITE_CD AS CURRENT_SITE_CD,
  SHH.UPDATE_TSTMP AS UPDATE_TSTMP,
  SHH.LOAD_TSTMP AS LOAD_TSTMP,
  EAJ8.LOCATION_ID AS NEW_LOCATION_ID,
  EAJ8.DISTRICT_ID AS NEW_DISTRICT_ID,
  EAJ8.DISTRICT_DESC AS NEW_DISTRICT_DESC,
  EAJ8.REGION_ID1 AS NEW_REGION_ID,
  EAJ8.REGION_DESC AS NEW_REGION_DESC,
  EAJ8.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXPTRANS_AFTER_JOINS_8 EAJ8
  LEFT JOIN SITE_HIERARCHY_HIST SHH ON SHH.LOCATION_ID = EAJ8.LOCATION_ID"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("LKP_NZ_SITE_HIERARCHY_HIST_9")

# COMMAND ----------
# DBTITLE 1, EXP_DATES_STRATEGY_10


query_10 = f"""SELECT
  LOCATION_ID AS LOCATION_ID,
  NEW_LOCATION_ID AS NEW_LOCATION_ID,
  NEW_DISTRICT_ID AS NEW_DISTRICT_ID,
  NEW_DISTRICT_DESC AS NEW_DISTRICT_DESC,
  NEW_REGION_ID AS NEW_REGION_ID,
  NEW_REGION_DESC AS NEW_REGION_DESC,
  IFF(
    ISNULL(LOCATION_ID)
    OR NEW_DISTRICT_ID <> DISTRICT_ID
    OR NEW_DISTRICT_DESC <> DISTRICT_DESC
    OR NEW_REGION_ID <> REGION_ID
    OR NEW_REGION_DESC <> REGION_DESC,
    'I',
    'R'
  ) AS STRATEGY,
  TRUNC(ADD_TO_DATE(now(), 'DD', -1)) AS SITE_HIERARCHY_EFF_DT,
  TO_DATE('12/31/9999', 'MM/DD/YYYY') AS SITE_HIERARCHY_END_DT,
  'Y' AS CURRENT_SITE_CD,
  now() AS UPDATE_TSTMP,
  now() AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  LKP_NZ_SITE_HIERARCHY_HIST_9"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("EXP_DATES_STRATEGY_10")

# COMMAND ----------
# DBTITLE 1, FILT_EXISTING_RECORDS_11


query_11 = f"""SELECT
  STRATEGY AS STRATEGY,
  NEW_LOCATION_ID AS NEW_LOCATION_ID,
  SITE_HIERARCHY_EFF_DT AS SITE_HIERARCHY_EFF_DT,
  NEW_DISTRICT_ID AS NEW_DISTRICT_ID,
  NEW_DISTRICT_DESC AS NEW_DISTRICT_DESC,
  NEW_REGION_ID AS NEW_REGION_ID,
  NEW_REGION_DESC AS NEW_REGION_DESC,
  SITE_HIERARCHY_END_DT AS SITE_HIERARCHY_END_DT,
  CURRENT_SITE_CD AS CURRENT_SITE_CD,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_DATES_STRATEGY_10
WHERE
  STRATEGY <> 'R'"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("FILT_EXISTING_RECORDS_11")

# COMMAND ----------
# DBTITLE 1, UPDTRANS_INSERT_REJECT_12


query_12 = f"""SELECT
  STRATEGY AS STRATEGY,
  NEW_LOCATION_ID AS NEW_LOCATION_ID,
  SITE_HIERARCHY_EFF_DT AS SITE_HIERARCHY_EFF_DT,
  NEW_DISTRICT_ID AS NEW_DISTRICT_ID,
  NEW_DISTRICT_DESC AS NEW_DISTRICT_DESC,
  NEW_REGION_ID AS NEW_REGION_ID,
  NEW_REGION_DESC AS NEW_REGION_DESC,
  SITE_HIERARCHY_END_DT AS SITE_HIERARCHY_END_DT,
  CURRENT_SITE_CD AS CURRENT_SITE_CD,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(STRATEGY = 'I', 'DD_INSERT', 'DD_REJECT') AS UPDATE_STRATEGY_FLAG
FROM
  FILT_EXISTING_RECORDS_11"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("UPDTRANS_INSERT_REJECT_12")

# COMMAND ----------
# DBTITLE 1, SITE_HIERARCHY_HIST


spark.sql("""MERGE INTO SITE_HIERARCHY_HIST AS TARGET
USING
  UPDTRANS_INSERT_REJECT_12 AS SOURCE ON TARGET.LOCATION_ID = SOURCE.NEW_LOCATION_ID
  AND TARGET.SITE_HIERARCHY_EFF_DT = SOURCE.SITE_HIERARCHY_EFF_DT
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.LOCATION_ID = SOURCE.NEW_LOCATION_ID,
  TARGET.SITE_HIERARCHY_EFF_DT = SOURCE.SITE_HIERARCHY_EFF_DT,
  TARGET.DISTRICT_ID = SOURCE.NEW_DISTRICT_ID,
  TARGET.DISTRICT_DESC = SOURCE.NEW_DISTRICT_DESC,
  TARGET.REGION_ID = SOURCE.NEW_REGION_ID,
  TARGET.REGION_DESC = SOURCE.NEW_REGION_DESC,
  TARGET.SITE_HIERARCHY_END_DT = SOURCE.SITE_HIERARCHY_END_DT,
  TARGET.CURRENT_SITE_CD = SOURCE.CURRENT_SITE_CD,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.DISTRICT_ID = SOURCE.NEW_DISTRICT_ID
  AND TARGET.DISTRICT_DESC = SOURCE.NEW_DISTRICT_DESC
  AND TARGET.REGION_ID = SOURCE.NEW_REGION_ID
  AND TARGET.REGION_DESC = SOURCE.NEW_REGION_DESC
  AND TARGET.SITE_HIERARCHY_END_DT = SOURCE.SITE_HIERARCHY_END_DT
  AND TARGET.CURRENT_SITE_CD = SOURCE.CURRENT_SITE_CD
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.LOCATION_ID,
    TARGET.SITE_HIERARCHY_EFF_DT,
    TARGET.DISTRICT_ID,
    TARGET.DISTRICT_DESC,
    TARGET.REGION_ID,
    TARGET.REGION_DESC,
    TARGET.SITE_HIERARCHY_END_DT,
    TARGET.CURRENT_SITE_CD,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.NEW_LOCATION_ID,
    SOURCE.SITE_HIERARCHY_EFF_DT,
    SOURCE.NEW_DISTRICT_ID,
    SOURCE.NEW_DISTRICT_DESC,
    SOURCE.NEW_REGION_ID,
    SOURCE.NEW_REGION_DESC,
    SOURCE.SITE_HIERARCHY_END_DT,
    SOURCE.CURRENT_SITE_CD,
    SOURCE.UPDATE_TSTMP,
    SOURCE.LOAD_TSTMP
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_Site_Hierarchy_Hist")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_Site_Hierarchy_Hist", mainWorkflowId, parentName)
