# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ./MappingUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_sku_profile_hist")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_sku_profile_hist", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SKU_PROFILE_HIST_0


query_0 = f"""SELECT
  REC_START_DT AS REC_START_DT,
  PRODUCT_ID AS PRODUCT_ID,
  STATUS_ID AS STATUS_ID,
  STATUS_ID_IND AS STATUS_ID_IND,
  BRAND_CD AS BRAND_CD,
  BRAND_CD_IND AS BRAND_CD_IND,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  OWNBRAND_FLAG_IND AS OWNBRAND_FLAG_IND,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  BRAND_CLASSIFICATION_ID_IND AS BRAND_CLASSIFICATION_ID_IND,
  REC_END_DT AS REC_END_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT
FROM
  SKU_PROFILE_HIST"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_SKU_PROFILE_HIST_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SKU_PROFILE_HIST_1


query_1 = f"""SELECT
  REC_START_DT AS REC_START_DT,
  PRODUCT_ID AS PRODUCT_ID,
  STATUS_ID AS STATUS_ID,
  STATUS_ID_IND AS STATUS_ID_IND,
  BRAND_CD AS BRAND_CD,
  BRAND_CD_IND AS BRAND_CD_IND,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  OWNBRAND_FLAG_IND AS OWNBRAND_FLAG_IND,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  BRAND_CLASSIFICATION_ID_IND AS BRAND_CLASSIFICATION_ID_IND,
  REC_END_DT AS REC_END_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SKU_PROFILE_HIST_0
WHERE
  Shortcut_to_SKU_PROFILE_HIST_0.REC_END_DT = '12/31/9999'"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_SKU_PROFILE_HIST_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_To_SKU_PROFILE_2


query_2 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  SKU_TYPE AS SKU_TYPE,
  PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
  STATUS_ID AS STATUS_ID,
  SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
  SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
  SKU_DESC AS SKU_DESC,
  ALT_DESC AS ALT_DESC,
  SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
  SAP_CLASS_ID AS SAP_CLASS_ID,
  SAP_DEPT_ID AS SAP_DEPT_ID,
  SAP_DIVISION_ID AS SAP_DIVISION_ID,
  PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  COUNTRY_CD AS COUNTRY_CD,
  IMPORT_FLAG AS IMPORT_FLAG,
  HTS_CODE_ID AS HTS_CODE_ID,
  CONTENTS AS CONTENTS,
  CONTENTS_UNITS AS CONTENTS_UNITS,
  WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
  WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
  SIZE_DESC AS SIZE_DESC,
  BUM_QTY AS BUM_QTY,
  UOM_CD AS UOM_CD,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  BUYER_ID AS BUYER_ID,
  PURCH_GROUP_ID AS PURCH_GROUP_ID,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
  TAX_CLASS_ID AS TAX_CLASS_ID,
  VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
  BRAND_CD AS BRAND_CD,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  STATELINE_FLAG AS STATELINE_FLAG,
  SIGN_TYPE_CD AS SIGN_TYPE_CD,
  OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
  VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  INIT_MKDN_DT AS INIT_MKDN_DT,
  DISC_START_DT AS DISC_START_DT,
  ADD_DT AS ADD_DT,
  DELETE_DT AS DELETE_DT,
  UPDATE_DT AS UPDATE_DT,
  FIRST_SALE_DT AS FIRST_SALE_DT,
  LAST_SALE_DT AS LAST_SALE_DT,
  FIRST_INV_DT AS FIRST_INV_DT,
  LAST_INV_DT AS LAST_INV_DT,
  LOAD_DT AS LOAD_DT,
  BASE_NBR AS BASE_NBR,
  BP_COLOR_ID AS BP_COLOR_ID,
  BP_SIZE_ID AS BP_SIZE_ID,
  BP_BREED_ID AS BP_BREED_ID,
  BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
  BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
  BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
  CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
  NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
  NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
  RTV_DEPT_CD AS RTV_DEPT_CD,
  GL_ACCT_NBR AS GL_ACCT_NBR,
  ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
  COMPONENT_FLAG AS COMPONENT_FLAG,
  ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
  ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
  ZDISCO_PID_DT AS ZDISCO_PID_DT,
  ZDISCO_START_DT AS ZDISCO_START_DT,
  ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
  ZDISCO_DC_DT AS ZDISCO_DC_DT,
  ZDISCO_STR_DT AS ZDISCO_STR_DT,
  ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
  ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT
FROM
  SKU_PROFILE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_To_SKU_PROFILE_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_To_SKU_PROFILE_3


query_3 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  SKU_TYPE AS SKU_TYPE,
  PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
  STATUS_ID AS STATUS_ID,
  SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
  SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
  SKU_DESC AS SKU_DESC,
  ALT_DESC AS ALT_DESC,
  SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
  SAP_CLASS_ID AS SAP_CLASS_ID,
  SAP_DEPT_ID AS SAP_DEPT_ID,
  SAP_DIVISION_ID AS SAP_DIVISION_ID,
  PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  COUNTRY_CD AS COUNTRY_CD,
  IMPORT_FLAG AS IMPORT_FLAG,
  HTS_CODE_ID AS HTS_CODE_ID,
  CONTENTS AS CONTENTS,
  CONTENTS_UNITS AS CONTENTS_UNITS,
  WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
  WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
  SIZE_DESC AS SIZE_DESC,
  BUM_QTY AS BUM_QTY,
  UOM_CD AS UOM_CD,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  BUYER_ID AS BUYER_ID,
  PURCH_GROUP_ID AS PURCH_GROUP_ID,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
  TAX_CLASS_ID AS TAX_CLASS_ID,
  VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
  BRAND_CD AS BRAND_CD,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  STATELINE_FLAG AS STATELINE_FLAG,
  SIGN_TYPE_CD AS SIGN_TYPE_CD,
  OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
  VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  INIT_MKDN_DT AS INIT_MKDN_DT,
  DISC_START_DT AS DISC_START_DT,
  ADD_DT AS ADD_DT,
  DELETE_DT AS DELETE_DT,
  UPDATE_DT AS UPDATE_DT,
  FIRST_SALE_DT AS FIRST_SALE_DT,
  LAST_SALE_DT AS LAST_SALE_DT,
  FIRST_INV_DT AS FIRST_INV_DT,
  LAST_INV_DT AS LAST_INV_DT,
  LOAD_DT AS LOAD_DT,
  BASE_NBR AS BASE_NBR,
  BP_COLOR_ID AS BP_COLOR_ID,
  BP_SIZE_ID AS BP_SIZE_ID,
  BP_BREED_ID AS BP_BREED_ID,
  BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
  BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
  BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
  CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
  NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
  NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
  RTV_DEPT_CD AS RTV_DEPT_CD,
  GL_ACCT_NBR AS GL_ACCT_NBR,
  ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
  COMPONENT_FLAG AS COMPONENT_FLAG,
  ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
  ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
  ZDISCO_PID_DT AS ZDISCO_PID_DT,
  ZDISCO_START_DT AS ZDISCO_START_DT,
  ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
  ZDISCO_DC_DT AS ZDISCO_DC_DT,
  ZDISCO_STR_DT AS ZDISCO_STR_DT,
  ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
  ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_To_SKU_PROFILE_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_To_SKU_PROFILE_3")

# COMMAND ----------
# DBTITLE 1, JNRTRANS_4


query_4 = f"""SELECT
  DETAIL.PRODUCT_ID AS PRODUCT_ID,
  DETAIL.SKU_TYPE AS SKU_TYPE,
  DETAIL.PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
  DETAIL.STATUS_ID AS STATUS_ID,
  DETAIL.BRAND_CD AS BRAND_CD,
  DETAIL.BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  DETAIL.OWNBRAND_FLAG AS OWNBRAND_FLAG,
  MASTER.REC_START_DT AS HIST_REC_START_DT,
  MASTER.PRODUCT_ID AS HIST_PRODUCT_ID,
  MASTER.STATUS_ID AS HIST_STATUS_ID,
  MASTER.STATUS_ID_IND AS HIST_STATUS_ID_IND,
  MASTER.BRAND_CD AS HIST_BRAND_CD,
  MASTER.BRAND_CD_IND AS HIST_BRAND_CD_IND,
  MASTER.OWNBRAND_FLAG AS HIST_OWNBRAND_FLAG,
  MASTER.OWNBRAND_FLAG_IND AS HIST_OWNBRAND_FLAG_IND,
  MASTER.BRAND_CLASSIFICATION_ID AS HIST_BRAND_CLASSIFICATION_ID,
  MASTER.BRAND_CLASSIFICATION_ID_IND AS HIST_BRAND_CLASSIFICATION_ID_IND,
  MASTER.REC_END_DT AS HIST_REC_END_DT,
  MASTER.UPDATE_DT AS HIST_UPDATE_D1,
  MASTER.LOAD_DT AS HIST_LOAD_DT,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_SKU_PROFILE_HIST_1 MASTER
  RIGHT JOIN SQ_Shortcut_To_SKU_PROFILE_3 DETAIL ON MASTER.PRODUCT_ID = DETAIL.PRODUCT_ID"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("JNRTRANS_4")

# COMMAND ----------
# DBTITLE 1, RTRTRANS


query_5 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID1,
  STATUS_ID AS STATUS_ID1,
  BRAND_CD AS BRAND_CD1,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID1,
  OWNBRAND_FLAG AS OWNBRAND_FLAG1,
  HIST_REC_START_DT AS HIST_REC_START_DT1,
  HIST_PRODUCT_ID AS HIST_PRODUCT_ID1,
  HIST_STATUS_ID AS HIST_STATUS_ID1,
  HIST_STATUS_ID_IND AS HIST_STATUS_ID_IND1,
  HIST_BRAND_CD AS HIST_BRAND_CD1,
  HIST_BRAND_CD_IND AS HIST_BRAND_CD_IND1,
  HIST_OWNBRAND_FLAG AS HIST_OWNBRAND_FLAG1,
  HIST_OWNBRAND_FLAG_IND AS HIST_OWNBRAND_FLAG_IND1,
  HIST_BRAND_CLASSIFICATION_ID AS HIST_BRAND_CLASSIFICATION_ID1,
  HIST_BRAND_CLASSIFICATION_ID_IND AS HIST_BRAND_CLASSIFICATION_ID_IND1,
  HIST_REC_END_DT AS HIST_REC_END_DT1,
  HIST_UPDATE_D1 AS HIST_UPDATE_D11,
  HIST_LOAD_DT AS HIST_LOAD_DT1,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNRTRANS_4
WHERE
  NOT ISNULL(PRODUCT_ID)
  AND ISNULL (HIST_PRODUCT_ID)"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("FIL_INSERT_New_SKU_5")

query_6 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID3,
  STATUS_ID AS STATUS_ID3,
  BRAND_CD AS BRAND_CD3,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID3,
  OWNBRAND_FLAG AS OWNBRAND_FLAG3,
  HIST_REC_START_DT AS HIST_REC_START_DT3,
  HIST_PRODUCT_ID AS HIST_PRODUCT_ID3,
  HIST_STATUS_ID AS HIST_STATUS_ID3,
  HIST_STATUS_ID_IND AS HIST_STATUS_ID_IND3,
  HIST_BRAND_CD AS HIST_BRAND_CD3,
  HIST_BRAND_CD_IND AS HIST_BRAND_CD_IND3,
  HIST_OWNBRAND_FLAG AS HIST_OWNBRAND_FLAG3,
  HIST_OWNBRAND_FLAG_IND AS HIST_OWNBRAND_FLAG_IND3,
  HIST_BRAND_CLASSIFICATION_ID AS HIST_BRAND_CLASSIFICATION_ID3,
  HIST_BRAND_CLASSIFICATION_ID_IND AS HIST_BRAND_CLASSIFICATION_ID_IND3,
  HIST_REC_END_DT AS HIST_REC_END_DT3,
  HIST_UPDATE_D1 AS HIST_UPDATE_D13,
  HIST_LOAD_DT AS HIST_LOAD_DT3,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNRTRANS_4
WHERE
  NOT ISNULL(PRODUCT_ID)
  AND NOT ISNULL(HIST_PRODUCT_ID)
  AND (
    STATUS_ID != HIST_STATUS_ID
    OR BRAND_CD != HIST_BRAND_CD
    OR BRAND_CLASSIFICATION_ID != HIST_BRAND_CLASSIFICATION_ID
    OR OWNBRAND_FLAG != HIST_OWNBRAND_FLAG
  )"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("FIL_UPDATE_Close_Existing_Record_6")

query_7 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID4,
  STATUS_ID AS STATUS_ID4,
  BRAND_CD AS BRAND_CD4,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID4,
  OWNBRAND_FLAG AS OWNBRAND_FLAG4,
  HIST_REC_START_DT AS HIST_REC_START_DT4,
  HIST_PRODUCT_ID AS HIST_PRODUCT_ID4,
  HIST_STATUS_ID AS HIST_STATUS_ID4,
  HIST_STATUS_ID_IND AS HIST_STATUS_ID_IND4,
  HIST_BRAND_CD AS HIST_BRAND_CD4,
  HIST_BRAND_CD_IND AS HIST_BRAND_CD_IND4,
  HIST_OWNBRAND_FLAG AS HIST_OWNBRAND_FLAG4,
  HIST_OWNBRAND_FLAG_IND AS HIST_OWNBRAND_FLAG_IND4,
  HIST_BRAND_CLASSIFICATION_ID AS HIST_BRAND_CLASSIFICATION_ID4,
  HIST_BRAND_CLASSIFICATION_ID_IND AS HIST_BRAND_CLASSIFICATION_ID_IND4,
  HIST_REC_END_DT AS HIST_REC_END_DT4,
  HIST_UPDATE_D1 AS HIST_UPDATE_D14,
  HIST_LOAD_DT AS HIST_LOAD_DT4,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNRTRANS_4
WHERE
  NOT ISNULL(PRODUCT_ID)
  AND NOT ISNULL(HIST_PRODUCT_ID)
  AND (
    STATUS_ID != HIST_STATUS_ID
    OR BRAND_CD != HIST_BRAND_CD
    OR BRAND_CLASSIFICATION_ID != HIST_BRAND_CLASSIFICATION_ID
    OR OWNBRAND_FLAG != HIST_OWNBRAND_FLAG
  )"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("FIL_INSERT_Open_New_Record_7")

# COMMAND ----------
# DBTITLE 1, Exp_INSERT_New_Record_8


query_8 = f"""SELECT
  now() AS REC_START_DT,
  PRODUCT_ID1 AS PRODUCT_ID,
  STATUS_ID1 AS STATUS_ID,
  1 AS STATUS_ID_IND,
  BRAND_CD1 AS BRAND_CD,
  1 AS BRAND_CD_IND,
  OWNBRAND_FLAG1 AS OWNBRAND_FLAG,
  1 AS OWNBRAND_FLAG_IND,
  BRAND_CLASSIFICATION_ID1 AS BRAND_CLASSIFICATION_ID,
  1 AS BRAND_CLASSIFICATION_ID_IND,
  TO_DATE('12/31/9999', 'MM/DD/YYYY') AS REC_END_DT,
  now() AS UPDATE_DT,
  now() AS LOAD_DT,
  'I' AS LOAD_STRATEGY_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FIL_INSERT_New_SKU_5"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("Exp_INSERT_New_Record_8")

# COMMAND ----------
# DBTITLE 1, Exp_INSERT_Open_New_record_9


query_9 = f"""SELECT
  now() AS REC_START_DT,
  PRODUCT_ID4 AS PRODUCT_ID,
  STATUS_ID4 AS STATUS_ID,
  IFF(STATUS_ID4 != HIST_STATUS_ID4, 1, 0) AS STATUS_ID_IND,
  BRAND_CD4 AS BRAND_CD,
  IFF(BRAND_CD4 != HIST_BRAND_CD4, 1, 0) AS BRAND_CD_IND,
  OWNBRAND_FLAG4 AS OWNBRAND_FLAG,
  IFF(OWNBRAND_FLAG4 != HIST_OWNBRAND_FLAG4, 1, 0) AS OWNBRAND_FLAG_IND,
  BRAND_CLASSIFICATION_ID4 AS BRAND_CLASSIFICATION_ID,
  IFF(
    BRAND_CLASSIFICATION_ID4 != HIST_BRAND_CLASSIFICATION_ID4,
    1,
    0
  ) AS BRAND_CLASSIFICATION_ID_IND,
  TO_DATE('12/31/9999', 'MM/DD/YYYY') AS REC_END_DT,
  now() AS UPDATE_DT,
  now() AS LOAD_DT,
  'I' AS LOAD_STRATEGY_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FIL_INSERT_Open_New_Record_7"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("Exp_INSERT_Open_New_record_9")

# COMMAND ----------
# DBTITLE 1, Exp_Update_Close_Record_10


query_10 = f"""SELECT
  HIST_REC_START_DT3 AS REC_START_DT,
  HIST_PRODUCT_ID3 AS PRODUCT_ID,
  HIST_STATUS_ID3 AS STATUS_ID,
  HIST_STATUS_ID_IND3 AS STATUS_ID_IND,
  HIST_BRAND_CD3 AS BRAND_CD,
  HIST_BRAND_CD_IND3 AS BRAND_CD_IND,
  HIST_OWNBRAND_FLAG3 AS OWNBRAND_FLAG,
  HIST_OWNBRAND_FLAG_IND3 AS OWNBRAND_FLAG_IND,
  HIST_BRAND_CLASSIFICATION_ID3 AS BRAND_CLASSIFICATION_ID,
  HIST_BRAND_CLASSIFICATION_ID_IND3 AS BRAND_CLASSIFICATION_ID_IND,
  now() AS REC_END_DT,
  now() AS UPDATE_DT,
  HIST_LOAD_DT3 AS LOAD_DT,
  'U' AS LOAD_STRATEGY_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FIL_UPDATE_Close_Existing_Record_6"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("Exp_Update_Close_Record_10")

# COMMAND ----------
# DBTITLE 1, Union_11


query_11 = f"""SELECT
  REC_START_DT AS REC_START_DT,
  PRODUCT_ID AS PRODUCT_ID,
  STATUS_ID AS STATUS_ID,
  STATUS_ID_IND AS STATUS_ID_IND,
  BRAND_CD AS BRAND_CD,
  BRAND_CD_IND AS BRAND_CD_IND,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  OWNBRAND_FLAG_IND AS OWNBRAND_FLAG_IND,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  BRAND_CLASSIFICATION_ID_IND AS BRAND_CLASSIFICATION_ID_IND,
  REC_END_DT AS REC_END_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT,
  LOAD_STRATEGY_FLAG AS LOAD_STRATEGY_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Exp_Update_Close_Record_10
UNION ALL
SELECT
  REC_START_DT AS REC_START_DT,
  PRODUCT_ID AS PRODUCT_ID,
  STATUS_ID AS STATUS_ID,
  STATUS_ID_IND AS STATUS_ID_IND,
  BRAND_CD AS BRAND_CD,
  BRAND_CD_IND AS BRAND_CD_IND,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  OWNBRAND_FLAG_IND AS OWNBRAND_FLAG_IND,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  BRAND_CLASSIFICATION_ID_IND AS BRAND_CLASSIFICATION_ID_IND,
  REC_END_DT AS REC_END_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT,
  LOAD_STRATEGY_FLAG AS LOAD_STRATEGY_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Exp_INSERT_Open_New_record_9
UNION ALL
SELECT
  REC_START_DT AS REC_START_DT,
  PRODUCT_ID AS PRODUCT_ID,
  STATUS_ID AS STATUS_ID,
  STATUS_ID_IND AS STATUS_ID_IND,
  BRAND_CD AS BRAND_CD,
  BRAND_CD_IND AS BRAND_CD_IND,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  OWNBRAND_FLAG_IND AS OWNBRAND_FLAG_IND,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  BRAND_CLASSIFICATION_ID_IND AS BRAND_CLASSIFICATION_ID_IND,
  REC_END_DT AS REC_END_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT,
  LOAD_STRATEGY_FLAG AS LOAD_STRATEGY_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Exp_INSERT_New_Record_8"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("Union_11")

# COMMAND ----------
# DBTITLE 1, Ups_SKU_PROFILE_HIST_12


query_12 = f"""SELECT
  REC_START_DT AS REC_START_DT,
  PRODUCT_ID AS PRODUCT_ID,
  STATUS_ID AS STATUS_ID,
  STATUS_ID_IND AS STATUS_ID_IND,
  BRAND_CD AS BRAND_CD,
  BRAND_CD_IND AS BRAND_CD_IND,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  OWNBRAND_FLAG_IND AS OWNBRAND_FLAG_IND,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  BRAND_CLASSIFICATION_ID_IND AS BRAND_CLASSIFICATION_ID_IND,
  REC_END_DT AS REC_END_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT,
  LOAD_STRATEGY_FLAG AS LOAD_STRATEGY_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(LOAD_STRATEGY_FLAG = 'I', 'DD_INSERT', 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  Union_11"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("Ups_SKU_PROFILE_HIST_12")

# COMMAND ----------
# DBTITLE 1, SKU_PROFILE_HIST


spark.sql("""MERGE INTO SKU_PROFILE_HIST AS TARGET
USING
  Ups_SKU_PROFILE_HIST_12 AS SOURCE ON TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID
  AND TARGET.REC_START_DT = SOURCE.REC_START_DT
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.REC_START_DT = SOURCE.REC_START_DT,
  TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID,
  TARGET.STATUS_ID = SOURCE.STATUS_ID,
  TARGET.STATUS_ID_IND = SOURCE.STATUS_ID_IND,
  TARGET.BRAND_CD = SOURCE.BRAND_CD,
  TARGET.BRAND_CD_IND = SOURCE.BRAND_CD_IND,
  TARGET.OWNBRAND_FLAG = SOURCE.OWNBRAND_FLAG,
  TARGET.OWNBRAND_FLAG_IND = SOURCE.OWNBRAND_FLAG_IND,
  TARGET.BRAND_CLASSIFICATION_ID = SOURCE.BRAND_CLASSIFICATION_ID,
  TARGET.BRAND_CLASSIFICATION_ID_IND = SOURCE.BRAND_CLASSIFICATION_ID_IND,
  TARGET.REC_END_DT = SOURCE.REC_END_DT,
  TARGET.UPDATE_DT = SOURCE.UPDATE_DT,
  TARGET.LOAD_DT = SOURCE.LOAD_DT
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.STATUS_ID = SOURCE.STATUS_ID
  AND TARGET.STATUS_ID_IND = SOURCE.STATUS_ID_IND
  AND TARGET.BRAND_CD = SOURCE.BRAND_CD
  AND TARGET.BRAND_CD_IND = SOURCE.BRAND_CD_IND
  AND TARGET.OWNBRAND_FLAG = SOURCE.OWNBRAND_FLAG
  AND TARGET.OWNBRAND_FLAG_IND = SOURCE.OWNBRAND_FLAG_IND
  AND TARGET.BRAND_CLASSIFICATION_ID = SOURCE.BRAND_CLASSIFICATION_ID
  AND TARGET.BRAND_CLASSIFICATION_ID_IND = SOURCE.BRAND_CLASSIFICATION_ID_IND
  AND TARGET.REC_END_DT = SOURCE.REC_END_DT
  AND TARGET.UPDATE_DT = SOURCE.UPDATE_DT
  AND TARGET.LOAD_DT = SOURCE.LOAD_DT THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.REC_START_DT,
    TARGET.PRODUCT_ID,
    TARGET.STATUS_ID,
    TARGET.STATUS_ID_IND,
    TARGET.BRAND_CD,
    TARGET.BRAND_CD_IND,
    TARGET.OWNBRAND_FLAG,
    TARGET.OWNBRAND_FLAG_IND,
    TARGET.BRAND_CLASSIFICATION_ID,
    TARGET.BRAND_CLASSIFICATION_ID_IND,
    TARGET.REC_END_DT,
    TARGET.UPDATE_DT,
    TARGET.LOAD_DT
  )
VALUES
  (
    SOURCE.REC_START_DT,
    SOURCE.PRODUCT_ID,
    SOURCE.STATUS_ID,
    SOURCE.STATUS_ID_IND,
    SOURCE.BRAND_CD,
    SOURCE.BRAND_CD_IND,
    SOURCE.OWNBRAND_FLAG,
    SOURCE.OWNBRAND_FLAG_IND,
    SOURCE.BRAND_CLASSIFICATION_ID,
    SOURCE.BRAND_CLASSIFICATION_ID_IND,
    SOURCE.REC_END_DT,
    SOURCE.UPDATE_DT,
    SOURCE.LOAD_DT
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_sku_profile_hist")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_sku_profile_hist", mainWorkflowId, parentName)
