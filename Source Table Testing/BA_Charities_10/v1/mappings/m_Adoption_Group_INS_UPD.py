# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, Shortcut_to_UDH_ADOPTION_GROUP_0


df_0 = spark.sql("""SELECT
  ADOPTION_GROUP_ID AS ADOPTION_GROUP_ID,
  ADOPTION_GROUP_NAME AS ADOPTION_GROUP_NAME,
  ADOPTION_GROUP_PARENT_ID AS ADOPTION_GROUP_PARENT_ID,
  ADOPTION_GROUP_PARENT_NAME AS ADOPTION_GROUP_PARENT_NAME
FROM
  UDH_ADOPTION_GROUP""")

df_0.createOrReplaceTempView("Shortcut_to_UDH_ADOPTION_GROUP_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_UDH_ADOPTION_GROUP_1


df_1 = spark.sql("""SELECT
  ADOPTION_GROUP_ID AS ADOPTION_GROUP_ID,
  ADOPTION_GROUP_NAME AS ADOPTION_GROUP_NAME,
  ADOPTION_GROUP_PARENT_ID AS ADOPTION_GROUP_PARENT_ID,
  ADOPTION_GROUP_PARENT_NAME AS ADOPTION_GROUP_PARENT_NAME,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_UDH_ADOPTION_GROUP_0""")

df_1.createOrReplaceTempView("SQ_Shortcut_to_UDH_ADOPTION_GROUP_1")

# COMMAND ----------
# DBTITLE 1, EXP_ADOPTION_GROUP_VALIDATIONS_2


df_2 = spark.sql("""SELECT
  ADOPTION_GROUP_ID AS ADOPTION_GROUP_ID,
  ADOPTION_GROUP_NAME AS ADOPTION_GROUP_NAME,
  IFF(
    ISNULL(ADOPTION_GROUP_PARENT_ID),
    ADOPTION_GROUP_ID,
    ADOPTION_GROUP_PARENT_ID
  ) AS O_ADOPTION_GROUP_PARENT_ID,
  IFF(
    ISNULL(ADOPTION_GROUP_PARENT_NAME),
    ADOPTION_GROUP_NAME,
    ADOPTION_GROUP_PARENT_NAME
  ) AS O_ADOPTION_GROUP_PARENT_NAME,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_UDH_ADOPTION_GROUP_1""")

df_2.createOrReplaceTempView("EXP_ADOPTION_GROUP_VALIDATIONS_2")

# COMMAND ----------
# DBTITLE 1, LKP_EDW_ADOPTION_GROUP_3


df_3 = spark.sql("""SELECT
  AG.ADOPTION_GROUP_ID AS ADOPTION_GROUP_ID,
  AG.ADOPTION_GROUP_NAME AS ADOPTION_GROUP_NAME,
  AG.ADOPTION_GROUP_PARENT_ID AS ADOPTION_GROUP_PARENT_ID,
  AG.ADOPTION_GROUP_PARENT_NAME AS ADOPTION_GROUP_PARENT_NAME,
  AG.UPDATE_TSTMP AS UPDATE_TSTMP,
  AG.LOAD_TSTMP AS LOAD_TSTMP,
  EAGV2.ADOPTION_GROUP_ID AS IN_ADOPTION_GROUP_ID,
  EAGV2.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_ADOPTION_GROUP_VALIDATIONS_2 EAGV2
  LEFT JOIN ADOPTION_GROUP AG ON AG.ADOPTION_GROUP_ID = EAGV2.ADOPTION_GROUP_ID""")

df_3.createOrReplaceTempView("LKP_EDW_ADOPTION_GROUP_3")

# COMMAND ----------
# DBTITLE 1, EXP_ADAPTION_GROUP_INS_UPD_VALIDATIONS_4


df_4 = spark.sql("""SELECT
  LEAG3.ADOPTION_GROUP_ID AS LKP_ADOPTION_GROUP_ID,
  LEAG3.ADOPTION_GROUP_NAME AS LKP_ADOPTION_GROUP_NAME,
  LEAG3.O_ADOPTION_GROUP_PARENT_ID AS LKP_ADOPTION_GROUP_PARENT_ID,
  LEAG3.O_ADOPTION_GROUP_PARENT_NAME AS LKP_ADOPTION_GROUP_PARENT_NAME,
  LEAG3.UPDATE_TSTMP AS LKP_UPDATE_TSTMP,
  EAGV2.ADOPTION_GROUP_NAME AS ADOPTION_GROUP_NAME,
  EAGV2.O_ADOPTION_GROUP_PARENT_ID AS ADOPTION_GROUP_PARENT_ID,
  EAGV2.O_ADOPTION_GROUP_PARENT_NAME AS ADOPTION_GROUP_PARENT_NAME,
  LEAG3.IN_ADOPTION_GROUP_ID AS IN_ADOPTION_GROUP_ID,
  SYSTIMESTAMP() AS O_LOAD_TIMESTAMP,
  IFF(
    ISNULL(LEAG3.LOAD_TSTMP),
    SYSTIMESTAMP(),
    LEAG3.LOAD_TSTMP
  ) AS O_LOAD_TSTMP,
  IFF(
    ISNULL(LEAG3.ADOPTION_GROUP_ID),
    'INSERT',
    IFF(
      IFF(
        ISNULL(LTRIM(RTRIM(EAGV2.ADOPTION_GROUP_NAME))),
        'NULL',
        LTRIM(RTRIM(EAGV2.ADOPTION_GROUP_NAME))
      ) <> IFF(
        ISNULL(LTRIM(RTRIM(LEAG3.EAGV2.ADOPTION_GROUP_NAME))),
        'NULL',
        LTRIM(RTRIM(LEAG3.EAGV2.ADOPTION_GROUP_NAME))
      )
      OR IFF(
        ISNULL(LTRIM(RTRIM(EAGV2.O_ADOPTION_GROUP_PARENT_ID))),
        '-1',
        LTRIM(RTRIM(EAGV2.O_ADOPTION_GROUP_PARENT_ID))
      ) <> IFF(
        ISNULL(
          LTRIM(RTRIM(LEAG3.EAGV2.O_ADOPTION_GROUP_PARENT_ID))
        ),
        '-1',
        LTRIM(RTRIM(LEAG3.EAGV2.O_ADOPTION_GROUP_PARENT_ID))
      )
      OR IFF(
        ISNULL(LTRIM(RTRIM(EAGV2.O_ADOPTION_GROUP_PARENT_NAME))),
        'NULL',
        LTRIM(RTRIM(EAGV2.O_ADOPTION_GROUP_PARENT_NAME))
      ) <> IFF(
        ISNULL(
          LTRIM(RTRIM(LEAG3.EAGV2.O_ADOPTION_GROUP_PARENT_NAME))
        ),
        'NULL',
        LTRIM(RTRIM(LEAG3.EAGV2.O_ADOPTION_GROUP_PARENT_NAME))
      ),
      'UPDATE',
      'REJECT'
    )
  ) AS FLAG,
  LEAG3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  LKP_EDW_ADOPTION_GROUP_3 LEAG3
  INNER JOIN EXP_ADOPTION_GROUP_VALIDATIONS_2 EAGV2 ON LEAG3.Monotonically_Increasing_Id = EAGV2.Monotonically_Increasing_Id""")

df_4.createOrReplaceTempView("EXP_ADAPTION_GROUP_INS_UPD_VALIDATIONS_4")

# COMMAND ----------
# DBTITLE 1, FILT_EXTISTING_RECORDS_5


df_5 = spark.sql("""SELECT
  LKP_ADOPTION_GROUP_NAME AS LKP_ADOPTION_GROUP_NAME,
  LKP_ADOPTION_GROUP_PARENT_ID AS LKP_ADOPTION_GROUP_PARENT_ID,
  LKP_ADOPTION_GROUP_PARENT_NAME AS LKP_ADOPTION_GROUP_PARENT_NAME,
  LKP_UPDATE_TSTMP AS LKP_UPDATE_TSTMP,
  ADOPTION_GROUP_NAME AS ADOPTION_GROUP_NAME,
  ADOPTION_GROUP_PARENT_ID AS ADOPTION_GROUP_PARENT_ID,
  ADOPTION_GROUP_PARENT_NAME AS ADOPTION_GROUP_PARENT_NAME,
  IN_ADOPTION_GROUP_ID AS IN_ADOPTION_GROUP_ID,
  FLAG AS FLAG,
  O_LOAD_TIMESTAMP AS UPDATE_TIMESTAMP,
  O_LOAD_TSTMP AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_ADAPTION_GROUP_INS_UPD_VALIDATIONS_4
WHERE
  FLAG <> 'REJECT'""")

df_5.createOrReplaceTempView("FILT_EXTISTING_RECORDS_5")

# COMMAND ----------
# DBTITLE 1, UPD_EDW_ADOPTION_GROUP_INS_UPD_6


df_6 = spark.sql("""SELECT
  ADOPTION_GROUP_NAME AS ADOPTION_GROUP_NAME,
  ADOPTION_GROUP_PARENT_ID AS ADOPTION_GROUP_PARENT_ID,
  ADOPTION_GROUP_PARENT_NAME AS ADOPTION_GROUP_PARENT_NAME,
  IN_ADOPTION_GROUP_ID AS ADOPTION_GROUP_ID,
  UPDATE_TIMESTAMP AS UPDATE_TIMESTAMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  FLAG AS FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(FLAG = 'INSERT', 'DD_INSERT', 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  FILT_EXTISTING_RECORDS_5""")

df_6.createOrReplaceTempView("UPD_EDW_ADOPTION_GROUP_INS_UPD_6")

# COMMAND ----------
# DBTITLE 1, ADOPTION_GROUP


spark.sql("""MERGE INTO ADOPTION_GROUP AS TARGET
USING
  UPD_EDW_ADOPTION_GROUP_INS_UPD_6 AS SOURCE ON TARGET.ADOPTION_GROUP_ID = SOURCE.ADOPTION_GROUP_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.ADOPTION_GROUP_ID = SOURCE.ADOPTION_GROUP_ID,
  TARGET.ADOPTION_GROUP_NAME = SOURCE.ADOPTION_GROUP_NAME,
  TARGET.ADOPTION_GROUP_PARENT_ID = SOURCE.ADOPTION_GROUP_PARENT_ID,
  TARGET.ADOPTION_GROUP_PARENT_NAME = SOURCE.ADOPTION_GROUP_PARENT_NAME,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TIMESTAMP,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.ADOPTION_GROUP_NAME = SOURCE.ADOPTION_GROUP_NAME
  AND TARGET.ADOPTION_GROUP_PARENT_ID = SOURCE.ADOPTION_GROUP_PARENT_ID
  AND TARGET.ADOPTION_GROUP_PARENT_NAME = SOURCE.ADOPTION_GROUP_PARENT_NAME
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TIMESTAMP
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.ADOPTION_GROUP_ID,
    TARGET.ADOPTION_GROUP_NAME,
    TARGET.ADOPTION_GROUP_PARENT_ID,
    TARGET.ADOPTION_GROUP_PARENT_NAME,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.ADOPTION_GROUP_ID,
    SOURCE.ADOPTION_GROUP_NAME,
    SOURCE.ADOPTION_GROUP_PARENT_ID,
    SOURCE.ADOPTION_GROUP_PARENT_NAME,
    SOURCE.UPDATE_TIMESTAMP,
    SOURCE.LOAD_TSTMP
  )""")