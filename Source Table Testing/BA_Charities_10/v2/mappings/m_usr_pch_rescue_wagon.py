# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, Shortcut_to_UDH_PCH_RESCUE_WAGON_0


df_0 = spark.sql("""SELECT
  RW_TRANS_DT AS RW_TRANS_DT,
  RW_ROUTE_ID AS RW_ROUTE_ID,
  SOURCE_SHELTER AS SOURCE_SHELTER,
  DESTINATION_SHELTER AS DESTINATION_SHELTER,
  NO_OF_PETS_TRANSPORTED AS NO_OF_PETS_TRANSPORTED,
  NO_OF_PUPPIES AS NO_OF_PUPPIES,
  NO_OF_DOGS AS NO_OF_DOGS,
  ACTION AS ACTION,
  USER_ID AS USER_ID,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  UDH_PCH_RESCUE_WAGON""")

df_0.createOrReplaceTempView("Shortcut_to_UDH_PCH_RESCUE_WAGON_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_UDH_PCH_RESCUE_WAGON_1


df_1 = spark.sql("""SELECT
  RW_TRANS_DT AS RW_TRANS_DT,
  RW_ROUTE_ID AS RW_ROUTE_ID,
  SOURCE_SHELTER AS SOURCE_SHELTER,
  DESTINATION_SHELTER AS DESTINATION_SHELTER,
  NO_OF_PETS_TRANSPORTED AS NO_OF_PETS_TRANSPORTED,
  NO_OF_PUPPIES AS NO_OF_PUPPIES,
  NO_OF_DOGS AS NO_OF_DOGS,
  ACTION AS ACTION,
  USER_ID AS USER_ID,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_UDH_PCH_RESCUE_WAGON_0
WHERE
  Shortcut_to_UDH_PCH_RESCUE_WAGON_0.ACTION IN ('Insert', 'Update')""")

df_1.createOrReplaceTempView("SQ_Shortcut_to_UDH_PCH_RESCUE_WAGON_1")

# COMMAND ----------
# DBTITLE 1, LKP_USR_PCH_RESCUE_WAGON_2


df_2 = spark.sql("""SELECT
  UPRW.RW_TRANS_DT AS RW_TRANS_DT,
  UPRW.RW_ROUTE_ID AS RW_ROUTE_ID,
  UPRW.LOAD_TSTMP AS LOAD_TSTMP,
  SStUPRW1.RW_TRANS_DT AS in_RW_TRANS_DT,
  SStUPRW1.RW_ROUTE_ID AS in_RW_ROUTE_ID,
  SStUPRW1.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_UDH_PCH_RESCUE_WAGON_1 SStUPRW1
  LEFT JOIN USR_PCH_RESCUE_WAGON UPRW ON UPRW.RW_TRANS_DT = SStUPRW1.RW_TRANS_DT
  AND UPRW.RW_ROUTE_ID = SStUPRW1.RW_ROUTE_ID""")

df_2.createOrReplaceTempView("LKP_USR_PCH_RESCUE_WAGON_2")

# COMMAND ----------
# DBTITLE 1, EXP_TRANS_3


df_3 = spark.sql("""SELECT
  SStUPRW1.RW_TRANS_DT AS RW_TRANS_DT,
  SStUPRW1.RW_ROUTE_ID AS RW_ROUTE_ID,
  SStUPRW1.SOURCE_SHELTER AS SOURCE_SHELTER,
  SStUPRW1.DESTINATION_SHELTER AS DESTINATION_SHELTER,
  SStUPRW1.NO_OF_PETS_TRANSPORTED AS NO_OF_PETS_TRANSPORTED,
  SStUPRW1.NO_OF_PUPPIES AS NO_OF_PUPPIES,
  SStUPRW1.NO_OF_DOGS AS NO_OF_DOGS,
  SStUPRW1.USER_ID AS USER_ID,
  LUPRW2.RW_TRANS_DT AS lkp_RW_TRANS_DT,
  0 AS DELETED_IND,
  IFF(ISNULL(LUPRW2.RW_TRANS_DT), 'I', 'U') AS LOAD_FLAG,
  SESSSTARTTIME AS UPDATE_TSTMP,
  IFF(
    ISNULL(LUPRW2.LOAD_TSTMP),
    SESSSTARTTIME,
    LUPRW2.LOAD_TSTMP
  ) AS LOAD_TSTMP,
  SStUPRW1.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_UDH_PCH_RESCUE_WAGON_1 SStUPRW1
  INNER JOIN LKP_USR_PCH_RESCUE_WAGON_2 LUPRW2 ON SStUPRW1.Monotonically_Increasing_Id = LUPRW2.Monotonically_Increasing_Id""")

df_3.createOrReplaceTempView("EXP_TRANS_3")

# COMMAND ----------
# DBTITLE 1, LKP_RW_4


df_4 = spark.sql("""SELECT
  UPRR.RW_ROUTE_ID AS RW_ROUTE_ID,
  UPRR.RW_ROUTE_DESC AS RW_ROUTE_DESC,
  ET3.RW_ROUTE_ID AS in_RW_ROUTE_ID,
  ET3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_TRANS_3 ET3
  LEFT JOIN USR_PCH_RW_ROUTE UPRR ON UPRR.RW_ROUTE_ID = ET3.RW_ROUTE_ID""")

df_4.createOrReplaceTempView("LKP_RW_4")

# COMMAND ----------
# DBTITLE 1, LKP_DAYS_5


df_5 = spark.sql("""SELECT
  D.CAL_WK AS CAL_WK,
  D.CAL_MO AS CAL_MO,
  D.CAL_QTR AS CAL_QTR,
  D.CAL_YR AS CAL_YR,
  D.FISCAL_WK AS FISCAL_WK,
  D.FISCAL_MO AS FISCAL_MO,
  D.FISCAL_QTR AS FISCAL_QTR,
  D.FISCAL_YR AS FISCAL_YR,
  D.WEEK_DT AS WEEK_DT,
  ET3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_TRANS_3 ET3
  LEFT JOIN DAYS D ON D.DAY_DT = ET3.RW_TRANS_DT""")

df_5.createOrReplaceTempView("LKP_DAYS_5")

# COMMAND ----------
# DBTITLE 1, UPD_ins_upd_6


df_6 = spark.sql("""SELECT
  ET3.RW_TRANS_DT AS RW_TRANS_DT1,
  ET3.RW_ROUTE_ID AS RW_ROUTE_ID1,
  LR4.RW_ROUTE_DESC AS RW_ROUTE_DESC1,
  ET3.SOURCE_SHELTER AS SOURCE_SHELTER1,
  ET3.DESTINATION_SHELTER AS DESTINATION_SHELTER1,
  ET3.NO_OF_PETS_TRANSPORTED AS NO_OF_PETS_TRANSPORTED1,
  ET3.NO_OF_PUPPIES AS NO_OF_PUPPIES1,
  ET3.NO_OF_DOGS AS NO_OF_DOGS1,
  ET3.USER_ID AS USER_ID1,
  LD5.WEEK_DT AS WEEK_DT1,
  LD5.FISCAL_WK AS FISCAL_WK1,
  LD5.FISCAL_MO AS FISCAL_MO1,
  LD5.FISCAL_QTR AS FISCAL_QTR1,
  LD5.FISCAL_YR AS FISCAL_YR1,
  LD5.CAL_WK AS CAL_WK1,
  LD5.CAL_MO AS CAL_MO1,
  LD5.CAL_QTR AS CAL_QTR1,
  LD5.CAL_YR AS CAL_YR1,
  ET3.DELETED_IND AS DELETED_IND1,
  ET3.UPDATE_TSTMP AS UPDATE_TSTMP,
  ET3.LOAD_TSTMP AS LOAD_TSTMP1,
  ET3.LOAD_FLAG AS LOAD_FLAG,
  LD5.Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(ET3.LOAD_FLAG = 'I', 'DD_INSERT', 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  LKP_DAYS_5 LD5
  INNER JOIN EXP_TRANS_3 ET3 ON LD5.Monotonically_Increasing_Id = ET3.Monotonically_Increasing_Id
  INNER JOIN LKP_RW_4 LR4 ON ET3.Monotonically_Increasing_Id = LR4.Monotonically_Increasing_Id""")

df_6.createOrReplaceTempView("UPD_ins_upd_6")

# COMMAND ----------
# DBTITLE 1, USR_PCH_RESCUE_WAGON_v2


spark.sql("""MERGE INTO USR_PCH_RESCUE_WAGON_v2 AS TARGET
USING
  UPD_ins_upd_6 AS SOURCE ON TARGET.RW_ROUTE_ID = SOURCE.RW_ROUTE_ID1
  AND TARGET.RW_TRANS_DT_v2 = SOURCE.RW_TRANS_DT1
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.RW_TRANS_DT_v2 = SOURCE.RW_TRANS_DT1,
  TARGET.RW_ROUTE_ID = SOURCE.RW_ROUTE_ID1,
  TARGET.RW_ROUTE_DESC = SOURCE.RW_ROUTE_DESC1,
  TARGET.RW_SOURCE_SHELTER = SOURCE.SOURCE_SHELTER1,
  TARGET.RW_DESTINATION_SHELTER = SOURCE.DESTINATION_SHELTER1,
  TARGET.PETS_TRANSPORTED_CNT = SOURCE.NO_OF_PETS_TRANSPORTED1,
  TARGET.PUPPIES_CNT = SOURCE.NO_OF_PUPPIES1,
  TARGET.DOGS_CNT = SOURCE.NO_OF_DOGS1,
  TARGET.USER_ID = SOURCE.USER_ID1,
  TARGET.WEEK_DT = SOURCE.WEEK_DT1,
  TARGET.FISCAL_WK = SOURCE.FISCAL_WK1,
  TARGET.FISCAL_MO = SOURCE.FISCAL_MO1,
  TARGET.FISCAL_QTR = SOURCE.FISCAL_QTR1,
  TARGET.FISCAL_YR = SOURCE.FISCAL_YR1,
  TARGET.CAL_WK = SOURCE.CAL_WK1,
  TARGET.CAL_MO = SOURCE.CAL_MO1,
  TARGET.CAL_QTR = SOURCE.CAL_QTR1,
  TARGET.CAL_YR = SOURCE.CAL_YR1,
  TARGET.DELETED_IND = SOURCE.DELETED_IND1,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP1
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.RW_ROUTE_DESC = SOURCE.RW_ROUTE_DESC1
  AND TARGET.RW_SOURCE_SHELTER = SOURCE.SOURCE_SHELTER1
  AND TARGET.RW_DESTINATION_SHELTER = SOURCE.DESTINATION_SHELTER1
  AND TARGET.PETS_TRANSPORTED_CNT = SOURCE.NO_OF_PETS_TRANSPORTED1
  AND TARGET.PUPPIES_CNT = SOURCE.NO_OF_PUPPIES1
  AND TARGET.DOGS_CNT = SOURCE.NO_OF_DOGS1
  AND TARGET.USER_ID = SOURCE.USER_ID1
  AND TARGET.WEEK_DT = SOURCE.WEEK_DT1
  AND TARGET.FISCAL_WK = SOURCE.FISCAL_WK1
  AND TARGET.FISCAL_MO = SOURCE.FISCAL_MO1
  AND TARGET.FISCAL_QTR = SOURCE.FISCAL_QTR1
  AND TARGET.FISCAL_YR = SOURCE.FISCAL_YR1
  AND TARGET.CAL_WK = SOURCE.CAL_WK1
  AND TARGET.CAL_MO = SOURCE.CAL_MO1
  AND TARGET.CAL_QTR = SOURCE.CAL_QTR1
  AND TARGET.CAL_YR = SOURCE.CAL_YR1
  AND TARGET.DELETED_IND = SOURCE.DELETED_IND1
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP1 THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.RW_TRANS_DT_v2,
    TARGET.RW_ROUTE_ID,
    TARGET.RW_ROUTE_DESC,
    TARGET.RW_SOURCE_SHELTER,
    TARGET.RW_DESTINATION_SHELTER,
    TARGET.PETS_TRANSPORTED_CNT,
    TARGET.PUPPIES_CNT,
    TARGET.DOGS_CNT,
    TARGET.USER_ID,
    TARGET.WEEK_DT,
    TARGET.FISCAL_WK,
    TARGET.FISCAL_MO,
    TARGET.FISCAL_QTR,
    TARGET.FISCAL_YR,
    TARGET.CAL_WK,
    TARGET.CAL_MO,
    TARGET.CAL_QTR,
    TARGET.CAL_YR,
    TARGET.DELETED_IND,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.RW_TRANS_DT1,
    SOURCE.RW_ROUTE_ID1,
    SOURCE.RW_ROUTE_DESC1,
    SOURCE.SOURCE_SHELTER1,
    SOURCE.DESTINATION_SHELTER1,
    SOURCE.NO_OF_PETS_TRANSPORTED1,
    SOURCE.NO_OF_PUPPIES1,
    SOURCE.NO_OF_DOGS1,
    SOURCE.USER_ID1,
    SOURCE.WEEK_DT1,
    SOURCE.FISCAL_WK1,
    SOURCE.FISCAL_MO1,
    SOURCE.FISCAL_QTR1,
    SOURCE.FISCAL_YR1,
    SOURCE.CAL_WK1,
    SOURCE.CAL_MO1,
    SOURCE.CAL_QTR1,
    SOURCE.CAL_YR1,
    SOURCE.DELETED_IND1,
    SOURCE.UPDATE_TSTMP,
    SOURCE.LOAD_TSTMP1
  )""")