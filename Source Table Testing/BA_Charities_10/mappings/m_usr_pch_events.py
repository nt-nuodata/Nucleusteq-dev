# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, Shortcut_to_UDH_PCH_EVENTS_0


df_0 = spark.sql("""SELECT
  PCH_EVENT_START_DT AS PCH_EVENT_START_DT,
  PCH_EVENT_END_DT AS PCH_EVENT_END_DT,
  PCH_EVENT_LEAD_AGCY_NM AS PCH_EVENT_LEAD_AGCY_NM,
  PCH_EVENT_LOC_NAME AS PCH_EVENT_LOC_NAME,
  PCH_EVENT_GROUP_NO AS PCH_EVENT_GROUP_NO,
  STORE_IND AS STORE_IND,
  STATE AS STATE,
  CITY AS CITY,
  EVENT_GOAL AS EVENT_GOAL,
  FUNDING_PROVIDED AS FUNDING_PROVIDED,
  CAT_ADOPTIONS AS CAT_ADOPTIONS,
  DOG_ADOPTIONS AS DOG_ADOPTIONS,
  OTHER_ADOPTIONS AS OTHER_ADOPTIONS,
  ACTION AS ACTION,
  USER_ID AS USER_ID,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  UDH_PCH_EVENTS""")

df_0.createOrReplaceTempView("Shortcut_to_UDH_PCH_EVENTS_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_UDH_PCH_EVENTS_1


df_1 = spark.sql("""SELECT
  PCH_EVENT_START_DT AS PCH_EVENT_START_DT,
  PCH_EVENT_END_DT AS PCH_EVENT_END_DT,
  PCH_EVENT_LEAD_AGCY_NM AS PCH_EVENT_LEAD_AGCY_NM,
  PCH_EVENT_LOC_NAME AS PCH_EVENT_LOC_NAME,
  PCH_EVENT_GROUP_NO AS PCH_EVENT_GROUP_NO,
  STORE_IND AS STORE_IND,
  STATE AS STATE,
  CITY AS CITY,
  EVENT_GOAL AS EVENT_GOAL,
  FUNDING_PROVIDED AS FUNDING_PROVIDED,
  CAT_ADOPTIONS AS CAT_ADOPTIONS,
  DOG_ADOPTIONS AS DOG_ADOPTIONS,
  OTHER_ADOPTIONS AS OTHER_ADOPTIONS,
  ACTION AS ACTION,
  USER_ID AS USER_ID,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_UDH_PCH_EVENTS_0
WHERE
  ACTION IN ('Insert', 'Update')""")

df_1.createOrReplaceTempView("SQ_Shortcut_to_UDH_PCH_EVENTS_1")

# COMMAND ----------
# DBTITLE 1, LKP_USR_PCH_EVENTS_2


df_2 = spark.sql("""SELECT
  UPE.PCH_EVENT_START_DT AS PCH_EVENT_START_DT,
  UPE.PCH_EVENT_END_DT AS PCH_EVENT_END_DT,
  UPE.PCH_EVENT_LEAD_AGCY_NM AS PCH_EVENT_LEAD_AGCY_NM,
  UPE.PCH_EVENT_LOC_NM AS PCH_EVENT_LOC_NM,
  UPE.LOAD_TSTMP AS LOAD_TSTMP,
  SStUPE1.PCH_EVENT_START_DT AS in_PCH_EVENT_START_DT,
  SStUPE1.PCH_EVENT_END_DT AS in_PCH_EVENT_END_DT,
  SStUPE1.PCH_EVENT_LEAD_AGCY_NM AS in_PCH_EVENT_LEAD_AGCY_NM,
  SStUPE1.PCH_EVENT_LOC_NAME AS in_PCH_EVENT_LOC_NAME,
  SStUPE1.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_UDH_PCH_EVENTS_1 SStUPE1
  LEFT JOIN USR_PCH_EVENTS UPE ON UPE.PCH_EVENT_START_DT = SStUPE1.PCH_EVENT_START_DT
  AND UPE.PCH_EVENT_END_DT = SStUPE1.PCH_EVENT_END_DT
  AND UPE.PCH_EVENT_LEAD_AGCY_NM = SStUPE1.PCH_EVENT_LEAD_AGCY_NM
  AND UPE.PCH_EVENT_LOC_NM = SStUPE1.PCH_EVENT_LOC_NAME""")

df_2.createOrReplaceTempView("LKP_USR_PCH_EVENTS_2")

# COMMAND ----------
# DBTITLE 1, EXP_TRANS_3


df_3 = spark.sql("""SELECT
  SStUPE1.PCH_EVENT_START_DT AS PCH_EVENT_START_DT,
  SStUPE1.PCH_EVENT_END_DT AS PCH_EVENT_END_DT,
  SStUPE1.PCH_EVENT_LEAD_AGCY_NM AS PCH_EVENT_LEAD_AGCY_NM,
  SStUPE1.PCH_EVENT_LOC_NAME AS PCH_EVENT_LOC_NAME,
  SStUPE1.PCH_EVENT_GROUP_NO AS PCH_EVENT_GROUP_NO,
  SStUPE1.STORE_IND AS STORE_IND,
  SStUPE1.STATE AS STATE,
  SStUPE1.CITY AS CITY,
  SStUPE1.EVENT_GOAL AS EVENT_GOAL,
  SStUPE1.FUNDING_PROVIDED AS FUNDING_PROVIDED,
  SStUPE1.CAT_ADOPTIONS AS CAT_ADOPTIONS,
  SStUPE1.DOG_ADOPTIONS AS DOG_ADOPTIONS,
  SStUPE1.OTHER_ADOPTIONS AS OTHER_ADOPTIONS,
  SStUPE1.USER_ID AS USER_ID,
  LUPE2.PCH_EVENT_START_DT AS lkp_PCH_EVENT_START_DT,
  IFF(ISNULL(LUPE2.PCH_EVENT_START_DT), 'I', ' U') AS LOAD_FLAG,
  0 AS DELETED_IND,
  SESSSTARTTIME AS UPDATE_TSTMP,
  IFF(
    ISNULL(LUPE2.LOAD_TSTMP),
    SESSSTARTTIME,
    LUPE2.LOAD_TSTMP
  ) AS LOAD_TSTMP,
  SStUPE1.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_UDH_PCH_EVENTS_1 SStUPE1
  INNER JOIN LKP_USR_PCH_EVENTS_2 LUPE2 ON SStUPE1.Monotonically_Increasing_Id = LUPE2.Monotonically_Increasing_Id""")

df_3.createOrReplaceTempView("EXP_TRANS_3")

# COMMAND ----------
# DBTITLE 1, LKP_DAYS_4


df_4 = spark.sql("""SELECT
  D.DAY_DT AS DAY_DT,
  D.WEEK_DT AS WEEK_DT,
  D.FISCAL_WK AS FISCAL_WK,
  D.FISCAL_MO AS FISCAL_MO,
  D.FISCAL_QTR AS FISCAL_QTR,
  D.FISCAL_YR AS FISCAL_YR,
  D.CAL_WK AS CAL_WK,
  D.CAL_MO AS CAL_MO,
  D.CAL_QTR AS CAL_QTR,
  D.CAL_YR AS CAL_YR,
  ET3.PCH_EVENT_END_DT AS in_PCH_EVENT_END_DT,
  ET3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_TRANS_3 ET3
  LEFT JOIN DAYS D ON D.DAY_DT = ET3.PCH_EVENT_END_DT""")

df_4.createOrReplaceTempView("LKP_DAYS_4")

# COMMAND ----------
# DBTITLE 1, UPD_ins_upd_5


df_5 = spark.sql("""SELECT
  ET3.PCH_EVENT_START_DT AS PCH_EVENT_START_DT1,
  ET3.PCH_EVENT_END_DT AS PCH_EVENT_END_DT1,
  ET3.PCH_EVENT_LEAD_AGCY_NM AS PCH_EVENT_LEAD_AGCY_NM1,
  ET3.PCH_EVENT_LOC_NAME AS PCH_EVENT_LOC_NAME1,
  ET3.PCH_EVENT_GROUP_NO AS PCH_EVENT_GROUP_NO1,
  ET3.STORE_IND AS STORE_IND1,
  ET3.STATE AS STATE1,
  ET3.CITY AS CITY1,
  ET3.EVENT_GOAL AS EVENT_GOAL1,
  ET3.FUNDING_PROVIDED AS FUNDING_PROVIDED1,
  ET3.CAT_ADOPTIONS AS CAT_ADOPTIONS1,
  ET3.DOG_ADOPTIONS AS DOG_ADOPTIONS1,
  ET3.OTHER_ADOPTIONS AS OTHER_ADOPTIONS1,
  ET3.USER_ID AS USER_ID1,
  LD4.WEEK_DT AS WEEK_DT1,
  LD4.FISCAL_WK AS FISCAL_WK1,
  LD4.FISCAL_MO AS FISCAL_MO1,
  LD4.FISCAL_QTR AS FISCAL_QTR1,
  LD4.FISCAL_YR AS FISCAL_YR1,
  LD4.CAL_WK AS CAL_WK1,
  LD4.CAL_MO AS CAL_MO1,
  LD4.CAL_QTR AS CAL_QTR1,
  LD4.CAL_YR AS CAL_YR1,
  ET3.DELETED_IND AS DELETED_IND1,
  ET3.UPDATE_TSTMP AS UPDATE_TSTMP,
  ET3.LOAD_TSTMP AS LOAD_TSTMP1,
  ET3.LOAD_FLAG AS LOAD_FLAG,
  LD4.Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(ET3.LOAD_FLAG = 'I', 'DD_INSERT', 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  LKP_DAYS_4 LD4
  INNER JOIN EXP_TRANS_3 ET3 ON LD4.Monotonically_Increasing_Id = ET3.Monotonically_Increasing_Id""")

df_5.createOrReplaceTempView("UPD_ins_upd_5")

# COMMAND ----------
# DBTITLE 1, USR_PCH_EVENTS


spark.sql("""MERGE INTO USR_PCH_EVENTS AS TARGET
USING
  UPD_ins_upd_5 AS SOURCE ON TARGET.PCH_EVENT_LEAD_AGCY_NM = SOURCE.PCH_EVENT_LEAD_AGCY_NM1
  AND TARGET.PCH_EVENT_START_DT = SOURCE.PCH_EVENT_START_DT1
  AND TARGET.PCH_EVENT_END_DT = SOURCE.PCH_EVENT_END_DT1
  AND TARGET.PCH_EVENT_LOC_NM = SOURCE.PCH_EVENT_LOC_NAME1
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.PCH_EVENT_START_DT = SOURCE.PCH_EVENT_START_DT1,
  TARGET.PCH_EVENT_END_DT = SOURCE.PCH_EVENT_END_DT1,
  TARGET.PCH_EVENT_LEAD_AGCY_NM = SOURCE.PCH_EVENT_LEAD_AGCY_NM1,
  TARGET.PCH_EVENT_LOC_NM = SOURCE.PCH_EVENT_LOC_NAME1,
  TARGET.PCH_EVENT_GROUP_NO = SOURCE.PCH_EVENT_GROUP_NO1,
  TARGET.STORE_IND = SOURCE.STORE_IND1,
  TARGET.EVENT_STATE_CD = SOURCE.STATE1,
  TARGET.EVENT_CITY = SOURCE.CITY1,
  TARGET.EVENT_GOAL_AMT = SOURCE.EVENT_GOAL1,
  TARGET.FUNDING_PROVIDED_AMT = SOURCE.FUNDING_PROVIDED1,
  TARGET.CAT_ADOPTIONS_CNT = SOURCE.CAT_ADOPTIONS1,
  TARGET.DOG_ADOPTIONS_CNT = SOURCE.DOG_ADOPTIONS1,
  TARGET.OTHER_ADOPTIONS_CNT = SOURCE.OTHER_ADOPTIONS1,
  TARGET.USER_ID = SOURCE.USER_ID1,
  TARGET.WEEK_DT = SOURCE.WEEK_DT1,
  TARGET.FISCAL_WK = SOURCE.FISCAL_WK1,
  TARGET.FISCAL_MO = SOURCE.FISCAL_MO1,
  TARGET.FISCAL_QTR = SOURCE.FISCAL_QTR1,
  TARGET.FISCAL_YR = SOURCE.FISCAL_YR1,
  TARGET.CAL_WK = SOURCE.CAL_WK1,
  TARGET.CAL_MO = SOURCE.CAL_MO1,
  TARGET.CAL_QTR = SOURCE.CAL_QTR1,
  TARGET.CAL_YR = SOURCE.CAL_YR1,
  TARGET.DELETED_IND = SOURCE.DELETED_IND1,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP1
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.PCH_EVENT_GROUP_NO = SOURCE.PCH_EVENT_GROUP_NO1
  AND TARGET.STORE_IND = SOURCE.STORE_IND1
  AND TARGET.EVENT_STATE_CD = SOURCE.STATE1
  AND TARGET.EVENT_CITY = SOURCE.CITY1
  AND TARGET.EVENT_GOAL_AMT = SOURCE.EVENT_GOAL1
  AND TARGET.FUNDING_PROVIDED_AMT = SOURCE.FUNDING_PROVIDED1
  AND TARGET.CAT_ADOPTIONS_CNT = SOURCE.CAT_ADOPTIONS1
  AND TARGET.DOG_ADOPTIONS_CNT = SOURCE.DOG_ADOPTIONS1
  AND TARGET.OTHER_ADOPTIONS_CNT = SOURCE.OTHER_ADOPTIONS1
  AND TARGET.USER_ID = SOURCE.USER_ID1
  AND TARGET.WEEK_DT = SOURCE.WEEK_DT1
  AND TARGET.FISCAL_WK = SOURCE.FISCAL_WK1
  AND TARGET.FISCAL_MO = SOURCE.FISCAL_MO1
  AND TARGET.FISCAL_QTR = SOURCE.FISCAL_QTR1
  AND TARGET.FISCAL_YR = SOURCE.FISCAL_YR1
  AND TARGET.CAL_WK = SOURCE.CAL_WK1
  AND TARGET.CAL_MO = SOURCE.CAL_MO1
  AND TARGET.CAL_QTR = SOURCE.CAL_QTR1
  AND TARGET.CAL_YR = SOURCE.CAL_YR1
  AND TARGET.DELETED_IND = SOURCE.DELETED_IND1
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP1 THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.PCH_EVENT_START_DT,
    TARGET.PCH_EVENT_END_DT,
    TARGET.PCH_EVENT_LEAD_AGCY_NM,
    TARGET.PCH_EVENT_LOC_NM,
    TARGET.PCH_EVENT_GROUP_NO,
    TARGET.STORE_IND,
    TARGET.EVENT_STATE_CD,
    TARGET.EVENT_CITY,
    TARGET.EVENT_GOAL_AMT,
    TARGET.FUNDING_PROVIDED_AMT,
    TARGET.CAT_ADOPTIONS_CNT,
    TARGET.DOG_ADOPTIONS_CNT,
    TARGET.OTHER_ADOPTIONS_CNT,
    TARGET.USER_ID,
    TARGET.WEEK_DT,
    TARGET.FISCAL_WK,
    TARGET.FISCAL_MO,
    TARGET.FISCAL_QTR,
    TARGET.FISCAL_YR,
    TARGET.CAL_WK,
    TARGET.CAL_MO,
    TARGET.CAL_QTR,
    TARGET.CAL_YR,
    TARGET.DELETED_IND,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.PCH_EVENT_START_DT1,
    SOURCE.PCH_EVENT_END_DT1,
    SOURCE.PCH_EVENT_LEAD_AGCY_NM1,
    SOURCE.PCH_EVENT_LOC_NAME1,
    SOURCE.PCH_EVENT_GROUP_NO1,
    SOURCE.STORE_IND1,
    SOURCE.STATE1,
    SOURCE.CITY1,
    SOURCE.EVENT_GOAL1,
    SOURCE.FUNDING_PROVIDED1,
    SOURCE.CAT_ADOPTIONS1,
    SOURCE.DOG_ADOPTIONS1,
    SOURCE.OTHER_ADOPTIONS1,
    SOURCE.USER_ID1,
    SOURCE.WEEK_DT1,
    SOURCE.FISCAL_WK1,
    SOURCE.FISCAL_MO1,
    SOURCE.FISCAL_QTR1,
    SOURCE.FISCAL_YR1,
    SOURCE.CAL_WK1,
    SOURCE.CAL_MO1,
    SOURCE.CAL_QTR1,
    SOURCE.CAL_YR1,
    SOURCE.DELETED_IND1,
    SOURCE.UPDATE_TSTMP,
    SOURCE.LOAD_TSTMP1
  )""")