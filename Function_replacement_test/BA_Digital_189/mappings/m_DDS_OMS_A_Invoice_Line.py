# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DDS_OMS_A_Invoice_Line")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_DDS_OMS_A_Invoice_Line", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_INVOICE_LINE_PRE_0


query_0 = f"""SELECT
  INVOICE_LINE_ID AS INVOICE_LINE_ID,
  INVOICE_LINE_NUMBER AS INVOICE_LINE_NUMBER,
  INVOICE_ID AS INVOICE_ID,
  ENTITY_LINE_NUMBER AS ENTITY_LINE_NUMBER,
  ORDERED_ITEM_UOM_ID AS ORDERED_ITEM_UOM_ID,
  ORDERED_QTY AS ORDERED_QTY,
  INVOICED_QTY AS INVOICED_QTY,
  UNIT_PRICE AS UNIT_PRICE,
  LINE_CHARGE AS LINE_CHARGE,
  LINE_DISCOUNT AS LINE_DISCOUNT,
  LINE_TAX AS LINE_TAX,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  ORDER_LINE_ID AS ORDER_LINE_ID,
  RETURN_ORDER_LINE_ID AS RETURN_ORDER_LINE_ID,
  RETURN_ORDER_LINE_NUMBER AS RETURN_ORDER_LINE_NUMBER,
  RETURN_TYPE AS RETURN_TYPE,
  IS_TAX_INCLUDED AS IS_TAX_INCLUDED,
  SHIPPED_QUANTITY AS SHIPPED_QUANTITY,
  SHIPPED_ITEM_ID AS SHIPPED_ITEM_ID,
  ORDERED_ITEM_ID AS ORDERED_ITEM_ID,
  SHIPPED_ITEM_UOM_ID AS SHIPPED_ITEM_UOM_ID,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_INVOICE_LINE_PRE"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_OMS_A_INVOICE_LINE_PRE_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_A_INVOICE_LINE_PRE_1


query_1 = f"""SELECT
  INVOICE_LINE_ID AS INVOICE_LINE_ID,
  INVOICE_LINE_NUMBER AS INVOICE_LINE_NUMBER,
  INVOICE_ID AS INVOICE_ID,
  ENTITY_LINE_NUMBER AS ENTITY_LINE_NUMBER,
  ORDERED_ITEM_UOM_ID AS ORDERED_ITEM_UOM_ID,
  ORDERED_QTY AS ORDERED_QTY,
  INVOICED_QTY AS INVOICED_QTY,
  UNIT_PRICE AS UNIT_PRICE,
  LINE_CHARGE AS LINE_CHARGE,
  LINE_DISCOUNT AS LINE_DISCOUNT,
  LINE_TAX AS LINE_TAX,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  ORDER_LINE_ID AS ORDER_LINE_ID,
  RETURN_ORDER_LINE_ID AS RETURN_ORDER_LINE_ID,
  RETURN_ORDER_LINE_NUMBER AS RETURN_ORDER_LINE_NUMBER,
  RETURN_TYPE AS RETURN_TYPE,
  IS_TAX_INCLUDED AS IS_TAX_INCLUDED,
  SHIPPED_QUANTITY AS SHIPPED_QUANTITY,
  SHIPPED_ITEM_ID AS SHIPPED_ITEM_ID,
  ORDERED_ITEM_ID AS ORDERED_ITEM_ID,
  SHIPPED_ITEM_UOM_ID AS SHIPPED_ITEM_UOM_ID,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_A_INVOICE_LINE_PRE_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_OMS_A_INVOICE_LINE_PRE_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_INVOICE_LINE_2


query_2 = f"""SELECT
  OMS_INVOICE_LINE_ID AS OMS_INVOICE_LINE_ID,
  OMS_INVOICE_LINE_NBR AS OMS_INVOICE_LINE_NBR,
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_ENTITY_LINE_NBR AS OMS_ENTITY_LINE_NBR,
  OMS_ORDER_LINE_ID AS OMS_ORDER_LINE_ID,
  OMS_RETURN_ORDER_LINE_ID AS OMS_RETURN_ORDER_LINE_ID,
  OMS_RETURN_ORDER_LINE_NBR AS OMS_RETURN_ORDER_LINE_NBR,
  OMS_RETURN_TYPE AS OMS_RETURN_TYPE,
  TAX_INCLUDED_FLAG AS TAX_INCLUDED_FLAG,
  OMS_ORDERED_ITEM_ID AS OMS_ORDERED_ITEM_ID,
  OMS_ORDERED_ITEM_UOM_ID AS OMS_ORDERED_ITEM_UOM_ID,
  ORDERED_QTY AS ORDERED_QTY,
  OMS_SHIPPED_ITEM_ID AS OMS_SHIPPED_ITEM_ID,
  OMS_SHIPPED_ITEM_UOM_ID AS OMS_SHIPPED_ITEM_UOM_ID,
  SHIPPED_QTY AS SHIPPED_QTY,
  INVOICED_QTY AS INVOICED_QTY,
  UNIT_PRICE_AMT AS UNIT_PRICE_AMT,
  LINE_CHARGE_AMT AS LINE_CHARGE_AMT,
  LINE_DISCOUNT_AMT AS LINE_DISCOUNT_AMT,
  LINE_TAX_AMT AS LINE_TAX_AMT,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_INVOICE_LINE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_A_INVOICE_LINE_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_A_INVOICE_LINE_3


query_3 = f"""SELECT
  OMS_INVOICE_LINE_ID AS OMS_INVOICE_LINE_ID,
  OMS_INVOICE_LINE_NBR AS OMS_INVOICE_LINE_NBR,
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_ENTITY_LINE_NBR AS OMS_ENTITY_LINE_NBR,
  OMS_ORDER_LINE_ID AS OMS_ORDER_LINE_ID,
  OMS_RETURN_ORDER_LINE_ID AS OMS_RETURN_ORDER_LINE_ID,
  OMS_RETURN_ORDER_LINE_NBR AS OMS_RETURN_ORDER_LINE_NBR,
  OMS_RETURN_TYPE AS OMS_RETURN_TYPE,
  TAX_INCLUDED_FLAG AS TAX_INCLUDED_FLAG,
  OMS_ORDERED_ITEM_ID AS OMS_ORDERED_ITEM_ID,
  OMS_ORDERED_ITEM_UOM_ID AS OMS_ORDERED_ITEM_UOM_ID,
  ORDERED_QTY AS ORDERED_QTY,
  OMS_SHIPPED_ITEM_ID AS OMS_SHIPPED_ITEM_ID,
  OMS_SHIPPED_ITEM_UOM_ID AS OMS_SHIPPED_ITEM_UOM_ID,
  SHIPPED_QTY AS SHIPPED_QTY,
  INVOICED_QTY AS INVOICED_QTY,
  UNIT_PRICE_AMT AS UNIT_PRICE_AMT,
  LINE_CHARGE_AMT AS LINE_CHARGE_AMT,
  LINE_DISCOUNT_AMT AS LINE_DISCOUNT_AMT,
  LINE_TAX_AMT AS LINE_TAX_AMT,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_A_INVOICE_LINE_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_OMS_A_INVOICE_LINE_3")

# COMMAND ----------
# DBTITLE 1, JNR_OMS_A_INVOICE_LINE_4


query_4 = f"""SELECT
  DETAIL.INVOICE_LINE_ID AS INVOICE_LINE_ID,
  DETAIL.INVOICE_LINE_NUMBER AS INVOICE_LINE_NUMBER,
  DETAIL.INVOICE_ID AS INVOICE_ID,
  DETAIL.ENTITY_LINE_NUMBER AS ENTITY_LINE_NUMBER,
  DETAIL.ORDERED_ITEM_UOM_ID AS ORDERED_ITEM_UOM_ID,
  DETAIL.ORDERED_QTY AS ORDERED_QTY,
  DETAIL.INVOICED_QTY AS INVOICED_QTY,
  DETAIL.UNIT_PRICE AS UNIT_PRICE,
  DETAIL.LINE_CHARGE AS LINE_CHARGE,
  DETAIL.LINE_DISCOUNT AS LINE_DISCOUNT,
  DETAIL.LINE_TAX AS LINE_TAX,
  DETAIL.CREATED_DTTM AS CREATED_DTTM,
  DETAIL.LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  DETAIL.ORDER_LINE_ID AS ORDER_LINE_ID,
  DETAIL.RETURN_ORDER_LINE_ID AS RETURN_ORDER_LINE_ID,
  DETAIL.RETURN_ORDER_LINE_NUMBER AS RETURN_ORDER_LINE_NUMBER,
  DETAIL.RETURN_TYPE AS RETURN_TYPE,
  DETAIL.IS_TAX_INCLUDED AS IS_TAX_INCLUDED,
  DETAIL.SHIPPED_QUANTITY AS SHIPPED_QUANTITY,
  DETAIL.SHIPPED_ITEM_ID AS SHIPPED_ITEM_ID,
  DETAIL.ORDERED_ITEM_ID AS ORDERED_ITEM_ID,
  DETAIL.SHIPPED_ITEM_UOM_ID AS SHIPPED_ITEM_UOM_ID,
  MASTER.OMS_INVOICE_LINE_ID AS lkp_OMS_INVOICE_LINE_ID,
  MASTER.OMS_INVOICE_LINE_NBR AS lkp_OMS_INVOICE_LINE_NBR,
  MASTER.OMS_INVOICE_ID AS lkp_OMS_INVOICE_ID,
  MASTER.OMS_ENTITY_LINE_NBR AS lkp_OMS_ENTITY_LINE_NBR,
  MASTER.OMS_ORDER_LINE_ID AS lkp_OMS_ORDER_LINE_ID,
  MASTER.OMS_RETURN_ORDER_LINE_ID AS lkp_OMS_RETURN_ORDER_LINE_ID,
  MASTER.OMS_RETURN_ORDER_LINE_NBR AS lkp_OMS_RETURN_ORDER_LINE_NBR,
  MASTER.OMS_RETURN_TYPE AS lkp_OMS_RETURN_TYPE,
  MASTER.TAX_INCLUDED_FLAG AS lkp_TAX_INCLUDED_FLAG,
  MASTER.OMS_ORDERED_ITEM_ID AS lkp_OMS_ORDERED_ITEM_ID,
  MASTER.OMS_ORDERED_ITEM_UOM_ID AS lkp_OMS_ORDERED_ITEM_UOM_ID,
  MASTER.ORDERED_QTY AS lkp_ORDERED_QTY,
  MASTER.OMS_SHIPPED_ITEM_ID AS lkp_OMS_SHIPPED_ITEM_ID,
  MASTER.OMS_SHIPPED_ITEM_UOM_ID AS lkp_OMS_SHIPPED_ITEM_UOM_ID,
  MASTER.SHIPPED_QTY AS lkp_SHIPPED_QTY,
  MASTER.INVOICED_QTY AS lkp_INVOICED_QTY,
  MASTER.UNIT_PRICE_AMT AS lkp_UNIT_PRICE_AMT,
  MASTER.LINE_CHARGE_AMT AS lkp_LINE_CHARGE_AMT,
  MASTER.LINE_DISCOUNT_AMT AS lkp_LINE_DISCOUNT_AMT,
  MASTER.LINE_TAX_AMT AS lkp_LINE_TAX_AMT,
  MASTER.OMS_CREATED_TSTMP AS lkp_OMS_CREATED_TSTMP,
  MASTER.OMS_LAST_UPDATED_TSTMP AS lkp_OMS_LAST_UPDATED_TSTMP,
  MASTER.LOAD_TSTMP AS lkp_LOAD_TSTMP,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_A_INVOICE_LINE_3 MASTER
  RIGHT JOIN SQ_Shortcut_to_OMS_A_INVOICE_LINE_PRE_1 DETAIL ON MASTER.OMS_INVOICE_LINE_ID = DETAIL.INVOICE_LINE_ID"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("JNR_OMS_A_INVOICE_LINE_4")

# COMMAND ----------
# DBTITLE 1, FTR_UNCHANGED_REC_5


query_5 = f"""SELECT
  INVOICE_LINE_ID AS INVOICE_LINE_ID,
  INVOICE_LINE_NUMBER AS INVOICE_LINE_NUMBER,
  INVOICE_ID AS INVOICE_ID,
  ENTITY_LINE_NUMBER AS ENTITY_LINE_NUMBER,
  ORDERED_ITEM_UOM_ID AS ORDERED_ITEM_UOM_ID,
  ORDERED_QTY AS ORDERED_QTY,
  INVOICED_QTY AS INVOICED_QTY,
  UNIT_PRICE AS UNIT_PRICE,
  LINE_CHARGE AS LINE_CHARGE,
  LINE_DISCOUNT AS LINE_DISCOUNT,
  LINE_TAX AS LINE_TAX,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  ORDER_LINE_ID AS ORDER_LINE_ID,
  RETURN_ORDER_LINE_ID AS RETURN_ORDER_LINE_ID,
  RETURN_ORDER_LINE_NUMBER AS RETURN_ORDER_LINE_NUMBER,
  RETURN_TYPE AS RETURN_TYPE,
  IS_TAX_INCLUDED AS IS_TAX_INCLUDED,
  SHIPPED_QUANTITY AS SHIPPED_QUANTITY,
  SHIPPED_ITEM_ID AS SHIPPED_ITEM_ID,
  ORDERED_ITEM_ID AS ORDERED_ITEM_ID,
  SHIPPED_ITEM_UOM_ID AS SHIPPED_ITEM_UOM_ID,
  lkp_OMS_INVOICE_LINE_ID AS lkp_OMS_INVOICE_LINE_ID,
  lkp_OMS_INVOICE_LINE_NBR AS lkp_OMS_INVOICE_LINE_NBR,
  lkp_OMS_INVOICE_ID AS lkp_OMS_INVOICE_ID,
  lkp_OMS_ENTITY_LINE_NBR AS lkp_OMS_ENTITY_LINE_NBR,
  lkp_OMS_ORDER_LINE_ID AS lkp_OMS_ORDER_LINE_ID,
  lkp_OMS_RETURN_ORDER_LINE_ID AS lkp_OMS_RETURN_ORDER_LINE_ID,
  lkp_OMS_RETURN_ORDER_LINE_NBR AS lkp_OMS_RETURN_ORDER_LINE_NBR,
  lkp_OMS_RETURN_TYPE AS lkp_OMS_RETURN_TYPE,
  lkp_TAX_INCLUDED_FLAG AS lkp_TAX_INCLUDED_FLAG,
  lkp_OMS_ORDERED_ITEM_ID AS lkp_OMS_ORDERED_ITEM_ID,
  lkp_OMS_ORDERED_ITEM_UOM_ID AS lkp_OMS_ORDERED_ITEM_UOM_ID,
  lkp_ORDERED_QTY AS lkp_ORDERED_QTY,
  lkp_OMS_SHIPPED_ITEM_ID AS lkp_OMS_SHIPPED_ITEM_ID,
  lkp_OMS_SHIPPED_ITEM_UOM_ID AS lkp_OMS_SHIPPED_ITEM_UOM_ID,
  lkp_SHIPPED_QTY AS lkp_SHIPPED_QTY,
  lkp_INVOICED_QTY AS lkp_INVOICED_QTY,
  lkp_UNIT_PRICE_AMT AS lkp_UNIT_PRICE_AMT,
  lkp_LINE_CHARGE_AMT AS lkp_LINE_CHARGE_AMT,
  lkp_LINE_DISCOUNT_AMT AS lkp_LINE_DISCOUNT_AMT,
  lkp_LINE_TAX_AMT AS lkp_LINE_TAX_AMT,
  lkp_OMS_CREATED_TSTMP AS lkp_OMS_CREATED_TSTMP,
  lkp_OMS_LAST_UPDATED_TSTMP AS lkp_OMS_LAST_UPDATED_TSTMP,
  lkp_LOAD_TSTMP AS lkp_LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_OMS_A_INVOICE_LINE_4
WHERE
  ISNULL(lkp_OMS_INVOICE_LINE_ID)
  OR (
    NOT ISNULL(lkp_OMS_INVOICE_LINE_ID)
    AND (
      IFF (
        ISNULL(LTRIM(RTRIM(INVOICE_LINE_NUMBER))),
        ' ',
        LTRIM(RTRIM(INVOICE_LINE_NUMBER))
      ) <> IFF(
        ISNULL(LTRIM(RTRIM(lkp_OMS_INVOICE_LINE_NBR))),
        ' ',
        LTRIM(RTRIM(lkp_OMS_INVOICE_LINE_NBR))
      )
      OR IFF(
        ISNULL(INVOICE_ID),
        TO_INTEGER(999999999),
        INVOICE_ID
      ) <> IFF(
        ISNULL(lkp_OMS_INVOICE_ID),
        TO_INTEGER(999999999),
        lkp_OMS_INVOICE_ID
      )
      OR IFF (
        ISNULL(LTRIM(RTRIM(ENTITY_LINE_NUMBER))),
        ' ',
        LTRIM(RTRIM(ENTITY_LINE_NUMBER))
      ) <> IFF(
        ISNULL(LTRIM(RTRIM(lkp_OMS_ENTITY_LINE_NBR))),
        ' ',
        LTRIM(RTRIM(lkp_OMS_ENTITY_LINE_NBR))
      )
      OR IFF(
        ISNULL(ORDERED_ITEM_UOM_ID),
        TO_INTEGER(999999999),
        ORDERED_ITEM_UOM_ID
      ) <> IFF(
        ISNULL(lkp_OMS_ORDERED_ITEM_UOM_ID),
        TO_INTEGER(999999999),
        lkp_OMS_ORDERED_ITEM_UOM_ID
      )
      OR IFF(
        ISNULL(ORDERED_QTY),
        TO_INTEGER(999999999),
        ORDERED_QTY
      ) <> IFF(
        ISNULL(lkp_ORDERED_QTY),
        TO_INTEGER(999999999),
        lkp_ORDERED_QTY
      )
      OR IFF(
        ISNULL(INVOICED_QTY),
        TO_INTEGER(999999999),
        INVOICED_QTY
      ) <> IFF(
        ISNULL(lkp_INVOICED_QTY),
        TO_INTEGER(999999999),
        lkp_INVOICED_QTY
      )
      OR IFF(
        ISNULL(UNIT_PRICE),
        TO_INTEGER(999999999),
        UNIT_PRICE
      ) <> IFF(
        ISNULL(lkp_UNIT_PRICE_AMT),
        TO_INTEGER(999999999),
        lkp_UNIT_PRICE_AMT
      )
      OR IFF(
        ISNULL(LINE_CHARGE),
        TO_INTEGER(999999999),
        LINE_CHARGE
      ) <> IFF(
        ISNULL(lkp_LINE_CHARGE_AMT),
        TO_INTEGER(999999999),
        lkp_LINE_CHARGE_AMT
      )
      OR IFF(
        ISNULL(LINE_DISCOUNT),
        TO_INTEGER(999999999),
        LINE_DISCOUNT
      ) <> IFF(
        ISNULL(lkp_LINE_DISCOUNT_AMT),
        TO_INTEGER(999999999),
        lkp_LINE_DISCOUNT_AMT
      )
      OR IFF(ISNULL(LINE_TAX), TO_INTEGER(999999999), LINE_TAX) <> IFF(
        ISNULL(lkp_LINE_TAX_AMT),
        TO_INTEGER(999999999),
        lkp_LINE_TAX_AMT
      )
      OR IFF(
        ISNULL(ORDER_LINE_ID),
        TO_INTEGER(999999999),
        ORDER_LINE_ID
      ) <> IFF(
        ISNULL(lkp_OMS_ORDER_LINE_ID),
        TO_INTEGER(999999999),
        lkp_OMS_ORDER_LINE_ID
      )
      OR IFF(
        ISNULL(RETURN_ORDER_LINE_ID),
        TO_INTEGER(999999999),
        RETURN_ORDER_LINE_ID
      ) <> IFF(
        ISNULL(lkp_OMS_RETURN_ORDER_LINE_ID),
        TO_INTEGER(999999999),
        lkp_OMS_RETURN_ORDER_LINE_ID
      )
      OR IFF (
        ISNULL(LTRIM(RTRIM(RETURN_ORDER_LINE_NUMBER))),
        ' ',
        LTRIM(RTRIM(RETURN_ORDER_LINE_NUMBER))
      ) <> IFF(
        ISNULL(LTRIM(RTRIM(lkp_OMS_RETURN_ORDER_LINE_NBR))),
        ' ',
        LTRIM(RTRIM(lkp_OMS_RETURN_ORDER_LINE_NBR))
      )
      OR IFF(
        ISNULL(RETURN_TYPE),
        TO_INTEGER(999999999),
        RETURN_TYPE
      ) <> IFF(
        ISNULL(lkp_OMS_RETURN_TYPE),
        TO_INTEGER(999999999),
        lkp_OMS_RETURN_TYPE
      )
      OR IFF(
        ISNULL(IS_TAX_INCLUDED),
        TO_INTEGER(999999999),
        IS_TAX_INCLUDED
      ) <> IFF(
        ISNULL(lkp_TAX_INCLUDED_FLAG),
        TO_INTEGER(999999999),
        lkp_TAX_INCLUDED_FLAG
      )
      OR IFF(
        ISNULL(SHIPPED_QUANTITY),
        TO_INTEGER(999999999),
        SHIPPED_QUANTITY
      ) <> IFF(
        ISNULL(lkp_SHIPPED_QTY),
        TO_INTEGER(999999999),
        lkp_SHIPPED_QTY
      )
      OR IFF(
        ISNULL(SHIPPED_ITEM_ID),
        TO_INTEGER(999999999),
        SHIPPED_ITEM_ID
      ) <> IFF(
        ISNULL(lkp_OMS_SHIPPED_ITEM_ID),
        TO_INTEGER(999999999),
        lkp_OMS_SHIPPED_ITEM_ID
      )
      OR IFF(
        ISNULL(ORDERED_ITEM_ID),
        TO_INTEGER(999999999),
        ORDERED_ITEM_ID
      ) <> IFF(
        ISNULL(lkp_OMS_ORDERED_ITEM_ID),
        TO_INTEGER(999999999),
        lkp_OMS_ORDERED_ITEM_ID
      )
      OR IFF(
        ISNULL(SHIPPED_ITEM_UOM_ID),
        TO_INTEGER(999999999),
        SHIPPED_ITEM_UOM_ID
      ) <> IFF(
        ISNULL(lkp_OMS_SHIPPED_ITEM_UOM_ID),
        TO_INTEGER(999999999),
        lkp_OMS_SHIPPED_ITEM_UOM_ID
      )
      OR IFF(
        ISNULL(CREATED_DTTM),
        To_DATE('12-31-9999', 'MM-DD-YYYY'),
        CREATED_DTTM
      ) <> IFF(
        ISNULL(lkp_OMS_CREATED_TSTMP),
        To_DATE('12-31-9999', 'MM-DD-YYYY'),
        lkp_OMS_CREATED_TSTMP
      )
      OR IFF(
        ISNULL(LAST_UPDATED_DTTM),
        To_DATE('12-31-9999', 'MM-DD-YYYY'),
        LAST_UPDATED_DTTM
      ) <> IFF(
        ISNULL(lkp_OMS_LAST_UPDATED_TSTMP),
        To_DATE('12-31-9999', 'MM-DD-YYYY'),
        lkp_OMS_LAST_UPDATED_TSTMP
      )
    )
  )"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("FTR_UNCHANGED_REC_5")

# COMMAND ----------
# DBTITLE 1, EXP_VALID_FLAG_6


query_6 = f"""SELECT
  INVOICE_LINE_ID AS INVOICE_LINE_ID,
  INVOICE_LINE_NUMBER AS INVOICE_LINE_NUMBER,
  INVOICE_ID AS INVOICE_ID,
  ENTITY_LINE_NUMBER AS ENTITY_LINE_NUMBER,
  ORDERED_ITEM_UOM_ID AS ORDERED_ITEM_UOM_ID,
  ORDERED_QTY AS ORDERED_QTY,
  INVOICED_QTY AS INVOICED_QTY,
  UNIT_PRICE AS UNIT_PRICE,
  LINE_CHARGE AS LINE_CHARGE,
  LINE_DISCOUNT AS LINE_DISCOUNT,
  LINE_TAX AS LINE_TAX,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  ORDER_LINE_ID AS ORDER_LINE_ID,
  RETURN_ORDER_LINE_ID AS RETURN_ORDER_LINE_ID,
  RETURN_ORDER_LINE_NUMBER AS RETURN_ORDER_LINE_NUMBER,
  RETURN_TYPE AS RETURN_TYPE,
  IS_TAX_INCLUDED AS IS_TAX_INCLUDED,
  SHIPPED_QUANTITY AS SHIPPED_QUANTITY,
  SHIPPED_ITEM_ID AS SHIPPED_ITEM_ID,
  ORDERED_ITEM_ID AS ORDERED_ITEM_ID,
  SHIPPED_ITEM_UOM_ID AS SHIPPED_ITEM_UOM_ID,
  lkp_OMS_INVOICE_LINE_ID AS lkp_OMS_INVOICE_LINE_ID,
  lkp_LOAD_TSTMP AS lkp_LOAD_TSTMP,
  now() AS UPDATE_TSTMP_exp,
  IFF(ISNULL(lkp_LOAD_TSTMP), now(), lkp_LOAD_TSTMP) AS LOAD_TSTMP_exp,
  IFF(ISNULL(lkp_OMS_INVOICE_LINE_ID), 1, 2) AS o_UPD_VALIDATOR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FTR_UNCHANGED_REC_5"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("EXP_VALID_FLAG_6")

# COMMAND ----------
# DBTITLE 1, UPD_INS_UPD_7


query_7 = f"""SELECT
  INVOICE_LINE_ID AS INVOICE_LINE_ID,
  INVOICE_LINE_NUMBER AS INVOICE_LINE_NUMBER,
  INVOICE_ID AS INVOICE_ID,
  ENTITY_LINE_NUMBER AS ENTITY_LINE_NUMBER,
  ORDER_LINE_ID AS ORDER_LINE_ID,
  RETURN_ORDER_LINE_ID AS RETURN_ORDER_LINE_ID,
  RETURN_ORDER_LINE_NUMBER AS RETURN_ORDER_LINE_NUMBER,
  RETURN_TYPE AS RETURN_TYPE,
  IS_TAX_INCLUDED AS IS_TAX_INCLUDED,
  ORDERED_ITEM_ID AS ORDERED_ITEM_ID,
  ORDERED_ITEM_UOM_ID AS ORDERED_ITEM_UOM_ID,
  ORDERED_QTY AS ORDERED_QTY,
  SHIPPED_ITEM_ID AS SHIPPED_ITEM_ID,
  SHIPPED_ITEM_UOM_ID AS SHIPPED_ITEM_UOM_ID,
  SHIPPED_QUANTITY AS SHIPPED_QUANTITY,
  INVOICED_QTY AS INVOICED_QTY,
  UNIT_PRICE AS UNIT_PRICE,
  LINE_CHARGE AS LINE_CHARGE,
  LINE_DISCOUNT AS LINE_DISCOUNT,
  LINE_TAX AS LINE_TAX,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  UPDATE_TSTMP_exp AS UPDATE_TSTMP_exp,
  LOAD_TSTMP_exp AS LOAD_TSTMP_exp,
  o_UPD_VALIDATOR AS o_UPD_VALIDATOR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(o_UPD_VALIDATOR, 1, 'DD_INSERT', 2, 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  EXP_VALID_FLAG_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("UPD_INS_UPD_7")

# COMMAND ----------
# DBTITLE 1, OMS_A_INVOICE_LINE


spark.sql("""MERGE INTO OMS_A_INVOICE_LINE AS TARGET
USING
  UPD_INS_UPD_7 AS SOURCE ON TARGET.OMS_INVOICE_LINE_ID = SOURCE.INVOICE_LINE_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.OMS_INVOICE_LINE_ID = SOURCE.INVOICE_LINE_ID,
  TARGET.OMS_INVOICE_LINE_NBR = SOURCE.INVOICE_LINE_NUMBER,
  TARGET.OMS_INVOICE_ID = SOURCE.INVOICE_ID,
  TARGET.OMS_ENTITY_LINE_NBR = SOURCE.ENTITY_LINE_NUMBER,
  TARGET.OMS_ORDER_LINE_ID = SOURCE.ORDER_LINE_ID,
  TARGET.OMS_RETURN_ORDER_LINE_ID = SOURCE.RETURN_ORDER_LINE_ID,
  TARGET.OMS_RETURN_ORDER_LINE_NBR = SOURCE.RETURN_ORDER_LINE_NUMBER,
  TARGET.OMS_RETURN_TYPE = SOURCE.RETURN_TYPE,
  TARGET.TAX_INCLUDED_FLAG = SOURCE.IS_TAX_INCLUDED,
  TARGET.OMS_ORDERED_ITEM_ID = SOURCE.ORDERED_ITEM_ID,
  TARGET.OMS_ORDERED_ITEM_UOM_ID = SOURCE.ORDERED_ITEM_UOM_ID,
  TARGET.ORDERED_QTY = SOURCE.ORDERED_QTY,
  TARGET.OMS_SHIPPED_ITEM_ID = SOURCE.SHIPPED_ITEM_ID,
  TARGET.OMS_SHIPPED_ITEM_UOM_ID = SOURCE.SHIPPED_ITEM_UOM_ID,
  TARGET.SHIPPED_QTY = SOURCE.SHIPPED_QUANTITY,
  TARGET.INVOICED_QTY = SOURCE.INVOICED_QTY,
  TARGET.UNIT_PRICE_AMT = SOURCE.UNIT_PRICE,
  TARGET.LINE_CHARGE_AMT = SOURCE.LINE_CHARGE,
  TARGET.LINE_DISCOUNT_AMT = SOURCE.LINE_DISCOUNT,
  TARGET.LINE_TAX_AMT = SOURCE.LINE_TAX,
  TARGET.OMS_CREATED_TSTMP = SOURCE.CREATED_DTTM,
  TARGET.OMS_LAST_UPDATED_TSTMP = SOURCE.LAST_UPDATED_DTTM,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP_exp,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP_exp
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.OMS_INVOICE_LINE_NBR = SOURCE.INVOICE_LINE_NUMBER
  AND TARGET.OMS_INVOICE_ID = SOURCE.INVOICE_ID
  AND TARGET.OMS_ENTITY_LINE_NBR = SOURCE.ENTITY_LINE_NUMBER
  AND TARGET.OMS_ORDER_LINE_ID = SOURCE.ORDER_LINE_ID
  AND TARGET.OMS_RETURN_ORDER_LINE_ID = SOURCE.RETURN_ORDER_LINE_ID
  AND TARGET.OMS_RETURN_ORDER_LINE_NBR = SOURCE.RETURN_ORDER_LINE_NUMBER
  AND TARGET.OMS_RETURN_TYPE = SOURCE.RETURN_TYPE
  AND TARGET.TAX_INCLUDED_FLAG = SOURCE.IS_TAX_INCLUDED
  AND TARGET.OMS_ORDERED_ITEM_ID = SOURCE.ORDERED_ITEM_ID
  AND TARGET.OMS_ORDERED_ITEM_UOM_ID = SOURCE.ORDERED_ITEM_UOM_ID
  AND TARGET.ORDERED_QTY = SOURCE.ORDERED_QTY
  AND TARGET.OMS_SHIPPED_ITEM_ID = SOURCE.SHIPPED_ITEM_ID
  AND TARGET.OMS_SHIPPED_ITEM_UOM_ID = SOURCE.SHIPPED_ITEM_UOM_ID
  AND TARGET.SHIPPED_QTY = SOURCE.SHIPPED_QUANTITY
  AND TARGET.INVOICED_QTY = SOURCE.INVOICED_QTY
  AND TARGET.UNIT_PRICE_AMT = SOURCE.UNIT_PRICE
  AND TARGET.LINE_CHARGE_AMT = SOURCE.LINE_CHARGE
  AND TARGET.LINE_DISCOUNT_AMT = SOURCE.LINE_DISCOUNT
  AND TARGET.LINE_TAX_AMT = SOURCE.LINE_TAX
  AND TARGET.OMS_CREATED_TSTMP = SOURCE.CREATED_DTTM
  AND TARGET.OMS_LAST_UPDATED_TSTMP = SOURCE.LAST_UPDATED_DTTM
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP_exp
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP_exp THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.OMS_INVOICE_LINE_ID,
    TARGET.OMS_INVOICE_LINE_NBR,
    TARGET.OMS_INVOICE_ID,
    TARGET.OMS_ENTITY_LINE_NBR,
    TARGET.OMS_ORDER_LINE_ID,
    TARGET.OMS_RETURN_ORDER_LINE_ID,
    TARGET.OMS_RETURN_ORDER_LINE_NBR,
    TARGET.OMS_RETURN_TYPE,
    TARGET.TAX_INCLUDED_FLAG,
    TARGET.OMS_ORDERED_ITEM_ID,
    TARGET.OMS_ORDERED_ITEM_UOM_ID,
    TARGET.ORDERED_QTY,
    TARGET.OMS_SHIPPED_ITEM_ID,
    TARGET.OMS_SHIPPED_ITEM_UOM_ID,
    TARGET.SHIPPED_QTY,
    TARGET.INVOICED_QTY,
    TARGET.UNIT_PRICE_AMT,
    TARGET.LINE_CHARGE_AMT,
    TARGET.LINE_DISCOUNT_AMT,
    TARGET.LINE_TAX_AMT,
    TARGET.OMS_CREATED_TSTMP,
    TARGET.OMS_LAST_UPDATED_TSTMP,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.INVOICE_LINE_ID,
    SOURCE.INVOICE_LINE_NUMBER,
    SOURCE.INVOICE_ID,
    SOURCE.ENTITY_LINE_NUMBER,
    SOURCE.ORDER_LINE_ID,
    SOURCE.RETURN_ORDER_LINE_ID,
    SOURCE.RETURN_ORDER_LINE_NUMBER,
    SOURCE.RETURN_TYPE,
    SOURCE.IS_TAX_INCLUDED,
    SOURCE.ORDERED_ITEM_ID,
    SOURCE.ORDERED_ITEM_UOM_ID,
    SOURCE.ORDERED_QTY,
    SOURCE.SHIPPED_ITEM_ID,
    SOURCE.SHIPPED_ITEM_UOM_ID,
    SOURCE.SHIPPED_QUANTITY,
    SOURCE.INVOICED_QTY,
    SOURCE.UNIT_PRICE,
    SOURCE.LINE_CHARGE,
    SOURCE.LINE_DISCOUNT,
    SOURCE.LINE_TAX,
    SOURCE.CREATED_DTTM,
    SOURCE.LAST_UPDATED_DTTM,
    SOURCE.UPDATE_TSTMP_exp,
    SOURCE.LOAD_TSTMP_exp
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DDS_OMS_A_Invoice_Line")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_DDS_OMS_A_Invoice_Line", mainWorkflowId, parentName)
