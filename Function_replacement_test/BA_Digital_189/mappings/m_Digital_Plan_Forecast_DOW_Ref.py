# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_Digital_Plan_Forecast_DOW_Ref")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_Digital_Plan_Forecast_DOW_Ref", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DIGITAL_CHANNEL_GROUP_0


query_0 = f"""SELECT
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_LN_SCHED_DELIVERY_FLAG AS ORDER_LN_SCHED_DELIVERY_FLAG,
  ORDER_LN_SUBSCRIPTION_ORDER_FLAG AS ORDER_LN_SUBSCRIPTION_ORDER_FLAG,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  DIGITAL_CHANNEL_GROUP"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_DIGITAL_CHANNEL_GROUP_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DIGITAL_CHANNEL_GROUP_1


query_1 = f"""SELECT
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_LN_SCHED_DELIVERY_FLAG AS ORDER_LN_SCHED_DELIVERY_FLAG,
  ORDER_LN_SUBSCRIPTION_ORDER_FLAG AS ORDER_LN_SUBSCRIPTION_ORDER_FLAG,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DIGITAL_CHANNEL_GROUP_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_DIGITAL_CHANNEL_GROUP_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_ORDER_LN_SALES_VW_2


query_2 = f"""SELECT
  CREATED_TSTMP AS CREATED_TSTMP,
  OMS_ORDER_DT AS OMS_ORDER_DT,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_NBR AS OMS_ORDER_NBR,
  ORDER_NBR AS ORDER_NBR,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  PRODUCT_ID AS PRODUCT_ID,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  CANCELLED_FLG AS CANCELLED_FLG,
  OMS_DO_TYPE_ID AS OMS_DO_TYPE_ID,
  SHIP_POSTAL_CD AS SHIP_POSTAL_CD,
  SHIP_COUNTRY_CD AS SHIP_COUNTRY_CD,
  SHIP_STATE AS SHIP_STATE,
  BILL_POSTAL_CD AS BILL_POSTAL_CD,
  BILL_COUNTRY_CD AS BILL_COUNTRY_CD,
  OMS_ORDER_STATUS_ID AS OMS_ORDER_STATUS_ID,
  OMS_ORDER_LN_STATUS_ID AS OMS_ORDER_LN_STATUS_ID,
  FULF_LOCATION_ID AS FULF_LOCATION_ID,
  FULF_LOCATION_NBR AS FULF_LOCATION_NBR,
  FULF_STORE_NAME AS FULF_STORE_NAME,
  FULF_LOCATION_TYPE AS FULF_LOCATION_TYPE,
  FULF_LOCATION_TYPE_DESC AS FULF_LOCATION_TYPE_DESC,
  FULF_LOC_GROUP_ID AS FULF_LOC_GROUP_ID,
  FULF_LOC_GROUP_DESC AS FULF_LOC_GROUP_DESC,
  CREATION_DEVICE_TYPE AS CREATION_DEVICE_TYPE,
  CREATION_DEVICE_WIDTH AS CREATION_DEVICE_WIDTH,
  SHIPPED_DT AS SHIPPED_DT,
  AGING_DAYS AS AGING_DAYS,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  ALLOCATED_QTY AS ALLOCATED_QTY,
  CANCELLED_QTY AS CANCELLED_QTY,
  UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  ORIG_SHIP_CHARGE_AMT AS ORIG_SHIP_CHARGE_AMT,
  SHIP_CHARGE_AMT AS SHIP_CHARGE_AMT,
  HEADER_DISC_AMT AS HEADER_DISC_AMT,
  LN_DISC_AMT AS LN_DISC_AMT,
  UNIT_TAX_AMT AS UNIT_TAX_AMT,
  NET_SALES_QTY AS NET_SALES_QTY,
  NET_SALES_AMT AS NET_SALES_AMT,
  SALES_QTY AS SALES_QTY,
  SALES_AMT AS SALES_AMT,
  NET_SALES_TAX_AMT AS NET_SALES_TAX_AMT,
  DISCOUNT_AMT AS DISCOUNT_AMT,
  RETURN_QTY AS RETURN_QTY,
  RETURN_AMT AS RETURN_AMT,
  NET_MARGIN_AMT AS NET_MARGIN_AMT,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  SALES_COST AS SALES_COST,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  NET_ORDER_SALES_DISC_AMT AS NET_ORDER_SALES_DISC_AMT,
  NET_ORDER_MARGIN_DISC_AMT AS NET_ORDER_MARGIN_DISC_AMT,
  NET_SALES_SHIP_AMT AS NET_SALES_SHIP_AMT,
  MARGIN_PRE_AMT AS MARGIN_PRE_AMT,
  MA_VF_AMT AS MA_VF_AMT,
  MA_VF_PRODUCT_AMT AS MA_VF_PRODUCT_AMT,
  MA_SALES_VF_AMT AS MA_SALES_VF_AMT,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  PICK_DECL_QTY AS PICK_DECL_QTY,
  ORDER_AGE AS ORDER_AGE,
  RX_TYPE AS RX_TYPE
FROM
  OMS_ORDER_LN_SALES_VW"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_ORDER_LN_SALES_VW_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_ORDER_LN_SALES_VW_3


query_3 = f"""SELECT
  CREATED_TSTMP AS CREATED_TSTMP,
  OMS_ORDER_DT AS OMS_ORDER_DT,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_NBR AS OMS_ORDER_NBR,
  ORDER_NBR AS ORDER_NBR,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  PRODUCT_ID AS PRODUCT_ID,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  CANCELLED_FLG AS CANCELLED_FLG,
  OMS_DO_TYPE_ID AS OMS_DO_TYPE_ID,
  SHIP_POSTAL_CD AS SHIP_POSTAL_CD,
  SHIP_COUNTRY_CD AS SHIP_COUNTRY_CD,
  SHIP_STATE AS SHIP_STATE,
  BILL_POSTAL_CD AS BILL_POSTAL_CD,
  BILL_COUNTRY_CD AS BILL_COUNTRY_CD,
  OMS_ORDER_STATUS_ID AS OMS_ORDER_STATUS_ID,
  OMS_ORDER_LN_STATUS_ID AS OMS_ORDER_LN_STATUS_ID,
  FULF_LOCATION_ID AS FULF_LOCATION_ID,
  FULF_LOCATION_NBR AS FULF_LOCATION_NBR,
  FULF_STORE_NAME AS FULF_STORE_NAME,
  FULF_LOCATION_TYPE AS FULF_LOCATION_TYPE,
  FULF_LOCATION_TYPE_DESC AS FULF_LOCATION_TYPE_DESC,
  FULF_LOC_GROUP_ID AS FULF_LOC_GROUP_ID,
  FULF_LOC_GROUP_DESC AS FULF_LOC_GROUP_DESC,
  CREATION_DEVICE_TYPE AS CREATION_DEVICE_TYPE,
  CREATION_DEVICE_WIDTH AS CREATION_DEVICE_WIDTH,
  SHIPPED_DT AS SHIPPED_DT,
  AGING_DAYS AS AGING_DAYS,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  ALLOCATED_QTY AS ALLOCATED_QTY,
  CANCELLED_QTY AS CANCELLED_QTY,
  UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  ORIG_SHIP_CHARGE_AMT AS ORIG_SHIP_CHARGE_AMT,
  SHIP_CHARGE_AMT AS SHIP_CHARGE_AMT,
  HEADER_DISC_AMT AS HEADER_DISC_AMT,
  LN_DISC_AMT AS LN_DISC_AMT,
  UNIT_TAX_AMT AS UNIT_TAX_AMT,
  NET_SALES_QTY AS NET_SALES_QTY,
  NET_SALES_AMT AS NET_SALES_AMT,
  SALES_QTY AS SALES_QTY,
  SALES_AMT AS SALES_AMT,
  NET_SALES_TAX_AMT AS NET_SALES_TAX_AMT,
  DISCOUNT_AMT AS DISCOUNT_AMT,
  RETURN_QTY AS RETURN_QTY,
  RETURN_AMT AS RETURN_AMT,
  NET_MARGIN_AMT AS NET_MARGIN_AMT,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  SALES_COST AS SALES_COST,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  NET_ORDER_SALES_DISC_AMT AS NET_ORDER_SALES_DISC_AMT,
  NET_ORDER_MARGIN_DISC_AMT AS NET_ORDER_MARGIN_DISC_AMT,
  NET_SALES_SHIP_AMT AS NET_SALES_SHIP_AMT,
  MARGIN_PRE_AMT AS MARGIN_PRE_AMT,
  MA_VF_AMT AS MA_VF_AMT,
  MA_VF_PRODUCT_AMT AS MA_VF_PRODUCT_AMT,
  MA_SALES_VF_AMT AS MA_SALES_VF_AMT,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  PICK_DECL_QTY AS PICK_DECL_QTY,
  ORDER_AGE AS ORDER_AGE,
  RX_TYPE AS RX_TYPE,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_ORDER_LN_SALES_VW_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_OMS_ORDER_LN_SALES_VW_3")

# COMMAND ----------
# DBTITLE 1, EXP_CREATE_DATE_4


query_4 = f"""SELECT
  CREATED_TSTMP AS CREATED_TSTMP_in,
  TRUNC(CREATED_TSTMP) AS CREATED_TSTMP_out,
  DECODE(
    ORDER_CREATION_CHANNEL,
    NULL,
    '0',
    ORDER_CREATION_CHANNEL
  ) AS o_ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  IFF(OMS_DO_TYPE_ID = 'Subscription', 1, 0) AS o_SUBSCRIPTION_ORDER_FLAG,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  HEADER_DISC_AMT AS HEADER_DISC_AMT,
  LN_DISC_AMT AS LN_DISC_AMT,
  SHIP_CHARGE_AMT AS SHIP_CHARGE_AMT,
  RETURN_AMT AS RETURN_AMT,
  CANCELLED_QTY AS CANCELLED_QTY,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  RETURN_QTY AS RETURN_QTY,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  MA_VF_PRODUCT_AMT AS MA_VF_PRODUCT_AMT,
  ORDER_NBR AS ORDER_NBR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_ORDER_LN_SALES_VW_3"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("EXP_CREATE_DATE_4")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DIGITAL_PLAN_FORECAST_DOW_REF_5


query_5 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DIGITAL_CHANNEL AS DIGITAL_CHANNEL,
  MON_SALES_PCT AS MON_SALES_PCT,
  TUE_SALES_PCT AS TUE_SALES_PCT,
  WED_SALES_PCT AS WED_SALES_PCT,
  THU_SALES_PCT AS THU_SALES_PCT,
  FRI_SALES_PCT AS FRI_SALES_PCT,
  SAT_SALES_PCT AS SAT_SALES_PCT,
  SUN_SALES_PCT AS SUN_SALES_PCT,
  MON_MARGIN_PCT AS MON_MARGIN_PCT,
  TUE_MARGIN_PCT AS TUE_MARGIN_PCT,
  WED_MARGIN_PCT AS WED_MARGIN_PCT,
  THU_MARGIN_PCT AS THU_MARGIN_PCT,
  FRI_MARGIN_PCT AS FRI_MARGIN_PCT,
  SAT_MARGIN_PCT AS SAT_MARGIN_PCT,
  SUN_MARGIN_PCT AS SUN_MARGIN_PCT,
  MON_ORDER_PCT AS MON_ORDER_PCT,
  TUE_ORDER_PCT AS TUE_ORDER_PCT,
  WED_ORDER_PCT AS WED_ORDER_PCT,
  THU_ORDER_PCT AS THU_ORDER_PCT,
  FRI_ORDER_PCT AS FRI_ORDER_PCT,
  SAT_ORDER_PCT AS SAT_ORDER_PCT,
  SUN_ORDER_PCT AS SUN_ORDER_PCT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  DIGITAL_PLAN_FORECAST_DOW_REF"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("Shortcut_to_DIGITAL_PLAN_FORECAST_DOW_REF_5")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DIGITAL_PLAN_FORECAST_DOW_REF_6


query_6 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DIGITAL_CHANNEL AS DIGITAL_CHANNEL,
  MON_SALES_PCT AS MON_SALES_PCT,
  TUE_SALES_PCT AS TUE_SALES_PCT,
  WED_SALES_PCT AS WED_SALES_PCT,
  THU_SALES_PCT AS THU_SALES_PCT,
  FRI_SALES_PCT AS FRI_SALES_PCT,
  SAT_SALES_PCT AS SAT_SALES_PCT,
  SUN_SALES_PCT AS SUN_SALES_PCT,
  MON_MARGIN_PCT AS MON_MARGIN_PCT,
  TUE_MARGIN_PCT AS TUE_MARGIN_PCT,
  WED_MARGIN_PCT AS WED_MARGIN_PCT,
  THU_MARGIN_PCT AS THU_MARGIN_PCT,
  FRI_MARGIN_PCT AS FRI_MARGIN_PCT,
  SAT_MARGIN_PCT AS SAT_MARGIN_PCT,
  SUN_MARGIN_PCT AS SUN_MARGIN_PCT,
  MON_ORDER_PCT AS MON_ORDER_PCT,
  TUE_ORDER_PCT AS TUE_ORDER_PCT,
  WED_ORDER_PCT AS WED_ORDER_PCT,
  THU_ORDER_PCT AS THU_ORDER_PCT,
  FRI_ORDER_PCT AS FRI_ORDER_PCT,
  SAT_ORDER_PCT AS SAT_ORDER_PCT,
  SUN_ORDER_PCT AS SUN_ORDER_PCT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DIGITAL_PLAN_FORECAST_DOW_REF_5"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("SQ_Shortcut_to_DIGITAL_PLAN_FORECAST_DOW_REF_6")

# COMMAND ----------
# DBTITLE 1, Shortcut_To_DAYS_7


query_7 = f"""SELECT
  DAY_DT AS DAY_DT,
  BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  DAY_OF_WK_NAME AS DAY_OF_WK_NAME,
  DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,
  CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,
  CAL_WK AS CAL_WK,
  CAL_WK_NBR AS CAL_WK_NBR,
  CAL_MO AS CAL_MO,
  CAL_MO_NBR AS CAL_MO_NBR,
  CAL_MO_NAME AS CAL_MO_NAME,
  CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,
  CAL_QTR AS CAL_QTR,
  CAL_QTR_NBR AS CAL_QTR_NBR,
  CAL_HALF AS CAL_HALF,
  CAL_YR AS CAL_YR,
  FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,
  FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,
  FISCAL_WK AS FISCAL_WK,
  FISCAL_WK_NBR AS FISCAL_WK_NBR,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_MO_NBR AS FISCAL_MO_NBR,
  FISCAL_MO_NAME AS FISCAL_MO_NAME,
  FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,
  FISCAL_QTR AS FISCAL_QTR,
  FISCAL_QTR_NBR AS FISCAL_QTR_NBR,
  FISCAL_HALF AS FISCAL_HALF,
  FISCAL_YR AS FISCAL_YR,
  LYR_WEEK_DT AS LYR_WEEK_DT,
  LWK_WEEK_DT AS LWK_WEEK_DT,
  WEEK_DT AS WEEK_DT,
  EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,
  EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,
  ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,
  ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,
  CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,
  CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,
  CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,
  CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,
  MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,
  MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,
  MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,
  MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,
  PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,
  PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS
FROM
  DAYS"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("Shortcut_To_DAYS_7")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_To_DAYS_8


query_8 = f"""SELECT
  DAY_DT AS DAY_DT,
  BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  DAY_OF_WK_NAME AS DAY_OF_WK_NAME,
  DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,
  CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,
  CAL_WK AS CAL_WK,
  CAL_WK_NBR AS CAL_WK_NBR,
  CAL_MO AS CAL_MO,
  CAL_MO_NBR AS CAL_MO_NBR,
  CAL_MO_NAME AS CAL_MO_NAME,
  CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,
  CAL_QTR AS CAL_QTR,
  CAL_QTR_NBR AS CAL_QTR_NBR,
  CAL_HALF AS CAL_HALF,
  CAL_YR AS CAL_YR,
  FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,
  FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,
  FISCAL_WK AS FISCAL_WK,
  FISCAL_WK_NBR AS FISCAL_WK_NBR,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_MO_NBR AS FISCAL_MO_NBR,
  FISCAL_MO_NAME AS FISCAL_MO_NAME,
  FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,
  FISCAL_QTR AS FISCAL_QTR,
  FISCAL_QTR_NBR AS FISCAL_QTR_NBR,
  FISCAL_HALF AS FISCAL_HALF,
  FISCAL_YR AS FISCAL_YR,
  LYR_WEEK_DT AS LYR_WEEK_DT,
  LWK_WEEK_DT AS LWK_WEEK_DT,
  WEEK_DT AS WEEK_DT,
  EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,
  EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,
  ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,
  ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,
  CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,
  CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,
  CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,
  CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,
  MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,
  MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,
  MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,
  MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,
  PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,
  PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_To_DAYS_7"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("SQ_Shortcut_To_DAYS_8")

# COMMAND ----------
# DBTITLE 1, FILTRANS_9


query_9 = f"""SELECT
  DAY_DT AS DAY_DT,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  FISCAL_YR AS FISCAL_YR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_To_DAYS_8
WHERE
  FISCAL_YR = (GET_DATE_PART(sysdate, 'YYYY') -1)"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("FILTRANS_9")

# COMMAND ----------
# DBTITLE 1, JNR_CREATE_DATE_10


query_10 = f"""SELECT
  DETAIL.CREATED_TSTMP_out AS CREATED_TSTMP,
  DETAIL.o_ORDER_CREATION_CHANNEL AS o_ORDER_CREATION_CHANNEL,
  DETAIL.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  DETAIL.SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  DETAIL.o_SUBSCRIPTION_ORDER_FLAG AS o_SUBSCRIPTION_ORDER_FLAG,
  DETAIL.ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  DETAIL.UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  DETAIL.EXCH_RATE_PCT AS EXCH_RATE_PCT,
  DETAIL.HEADER_DISC_AMT AS HEADER_DISC_AMT,
  DETAIL.LN_DISC_AMT AS LN_DISC_AMT,
  DETAIL.SHIP_CHARGE_AMT AS SHIP_CHARGE_AMT,
  DETAIL.RETURN_AMT AS RETURN_AMT,
  DETAIL.CANCELLED_QTY AS CANCELLED_QTY,
  DETAIL.PURCH_COST_AMT AS PURCH_COST_AMT,
  DETAIL.RETURN_QTY AS RETURN_QTY,
  MASTER.DAY_DT AS DAY_DT,
  MASTER.FISCAL_YR AS FISCAL_YR,
  MASTER.DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DETAIL.EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  DETAIL.MA_VF_PRODUCT_AMT AS MA_VF_PRODUCT_AMT,
  DETAIL.ORDER_NBR AS ORDER_NBR,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FILTRANS_9 MASTER
  INNER JOIN EXP_CREATE_DATE_4 DETAIL ON MASTER.DAY_DT = DETAIL.CREATED_TSTMP_out"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("JNR_CREATE_DATE_10")

# COMMAND ----------
# DBTITLE 1, JNR_DCGROUP_11


query_11 = f"""SELECT
  DETAIL.CREATED_TSTMP AS CREATED_TSTMP,
  DETAIL.o_ORDER_CREATION_CHANNEL AS o_ORDER_CREATION_CHANNEL,
  DETAIL.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  DETAIL.SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  DETAIL.o_SUBSCRIPTION_ORDER_FLAG AS o_SUBSCRIPTION_ORDER_FLAG,
  DETAIL.ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  DETAIL.UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  DETAIL.EXCH_RATE_PCT AS EXCH_RATE_PCT,
  DETAIL.HEADER_DISC_AMT AS HEADER_DISC_AMT,
  DETAIL.LN_DISC_AMT AS LN_DISC_AMT,
  DETAIL.SHIP_CHARGE_AMT AS SHIP_CHARGE_AMT,
  DETAIL.RETURN_AMT AS RETURN_AMT,
  DETAIL.CANCELLED_QTY AS CANCELLED_QTY,
  DETAIL.PURCH_COST_AMT AS PURCH_COST_AMT,
  DETAIL.RETURN_QTY AS RETURN_QTY,
  DETAIL.DAY_DT AS DAY_DT,
  DETAIL.FISCAL_YR AS FISCAL_YR,
  DETAIL.DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  MASTER.ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL1,
  MASTER.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL1,
  MASTER.ORDER_LN_SCHED_DELIVERY_FLAG AS ORDER_LN_SCHED_DELIVERY_FLAG,
  MASTER.ORDER_LN_SUBSCRIPTION_ORDER_FLAG AS ORDER_LN_SUBSCRIPTION_ORDER_FLAG,
  MASTER.DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  DETAIL.EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  DETAIL.MA_VF_PRODUCT_AMT AS MA_VF_PRODUCT_AMT,
  DETAIL.ORDER_NBR AS ORDER_NBR,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DIGITAL_CHANNEL_GROUP_1 MASTER
  INNER JOIN JNR_CREATE_DATE_10 DETAIL ON MASTER.ORDER_CREATION_CHANNEL = DETAIL.o_ORDER_CREATION_CHANNEL
  AND MASTER.ORDER_FULFILLMENT_CHANNEL = DETAIL.ORDER_FULFILLMENT_CHANNEL
  AND MASTER.ORDER_LN_SCHED_DELIVERY_FLAG = DETAIL.SCHED_DELIVERY_FLG
  AND MASTER.ORDER_LN_SUBSCRIPTION_ORDER_FLAG = DETAIL.o_SUBSCRIPTION_ORDER_FLAG"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("JNR_DCGROUP_11")

# COMMAND ----------
# DBTITLE 1, SRT_DISTINCT_ORDER_12


query_12 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  ORDER_NBR AS ORDER_NBR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_DCGROUP_11
ORDER BY
  FISCAL_YR ASC,
  DAY_OF_WK_NBR ASC,
  DIGITAL_CHANNEL_GROUP ASC,
  ORDER_NBR ASC"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("SRT_DISTINCT_ORDER_12")

# COMMAND ----------
# DBTITLE 1, AGG_INITIAL_ORDER_13


query_13 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  (count(ORDER_NBR)) AS o_ORDER_COUNT,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  SRT_DISTINCT_ORDER_12
GROUP BY
  FISCAL_YR,
  DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP"""

df_13 = spark.sql(query_13)

df_13.createOrReplaceTempView("AGG_INITIAL_ORDER_13")

# COMMAND ----------
# DBTITLE 1, SRT_FY_DCG_DOW_14


query_14 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  CREATED_TSTMP AS CREATED_TSTMP,
  o_ORDER_CREATION_CHANNEL AS o_ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  o_SUBSCRIPTION_ORDER_FLAG AS o_SUBSCRIPTION_ORDER_FLAG,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  HEADER_DISC_AMT AS HEADER_DISC_AMT,
  LN_DISC_AMT AS LN_DISC_AMT,
  SHIP_CHARGE_AMT AS SHIP_CHARGE_AMT,
  RETURN_AMT AS RETURN_AMT,
  CANCELLED_QTY AS CANCELLED_QTY,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  RETURN_QTY AS RETURN_QTY,
  DAY_DT AS DAY_DT,
  ORDER_CREATION_CHANNEL1 AS ORDER_CREATION_CHANNEL1,
  ORDER_FULFILLMENT_CHANNEL1 AS ORDER_FULFILLMENT_CHANNEL1,
  ORDER_LN_SCHED_DELIVERY_FLAG AS ORDER_LN_SCHED_DELIVERY_FLAG,
  ORDER_LN_SUBSCRIPTION_ORDER_FLAG AS ORDER_LN_SUBSCRIPTION_ORDER_FLAG,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  MA_VF_PRODUCT_AMT AS MA_VF_PRODUCT_AMT,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_DCGROUP_11
ORDER BY
  FISCAL_YR ASC,
  DAY_OF_WK_NBR ASC,
  DIGITAL_CHANNEL_GROUP ASC"""

df_14 = spark.sql(query_14)

df_14.createOrReplaceTempView("SRT_FY_DCG_DOW_14")

# COMMAND ----------
# DBTITLE 1, AGG_INITIAL_15


query_15 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  ROUND(
    SUM(
      (
        (
          (ORIG_ORDER_QTY * UNIT_MONETARY_VALUE_AMT) * EXCHANGE_RATE_PCNT
        ) - (LN_DISC_AMT * EXCHANGE_RATE_PCNT) - (HEADER_DISC_AMT * EXCHANGE_RATE_PCNT)
      ) + (SHIP_CHARGE_AMT * EXCHANGE_RATE_PCNT)
    ),
    2
  ) AS o_DEMAND_NET_DOLLAR,
  ROUND(SUM(SHIP_CHARGE_AMT * EXCHANGE_RATE_PCNT), 2) AS o_DEMAND_NET_SHIP,
  ROUND(
    SUM(
      (
        (
          (
            (
              (
                (
                  DECODE(ORIG_ORDER_QTY, null, 0, ORIG_ORDER_QTY) * DECODE(
                    UNIT_MONETARY_VALUE_AMT,
                    null,
                    0,
                    UNIT_MONETARY_VALUE_AMT
                  )
                ) * EXCHANGE_RATE_PCNT
              ) - (
                DECODE(LN_DISC_AMT, null, 0, LN_DISC_AMT) * EXCHANGE_RATE_PCNT
              )
            ) - (
              DECODE(HEADER_DISC_AMT, null, 0, HEADER_DISC_AMT) * EXCHANGE_RATE_PCNT
            )
          ) - (
            DECODE(RETURN_AMT, null, 0, RETURN_AMT) * EXCH_RATE_PCT
          )
        ) - (
          (
            (
              (
                DECODE(CANCELLED_QTY, null, 0, CANCELLED_QTY) * DECODE(
                  UNIT_MONETARY_VALUE_AMT,
                  null,
                  0,
                  UNIT_MONETARY_VALUE_AMT
                ) * EXCHANGE_RATE_PCNT
              ) - (
                (
                  (
                    DECODE(HEADER_DISC_AMT, null, 0, HEADER_DISC_AMT) * EXCHANGE_RATE_PCNT
                  ) * DECODE(CANCELLED_QTY, null, 0, CANCELLED_QTY)
                ) / DECODE(ORIG_ORDER_QTY, null, 0, ORIG_ORDER_QTY)
              )
            ) - (
              (
                (
                  DECODE(LN_DISC_AMT, null, 0, LN_DISC_AMT) * EXCHANGE_RATE_PCNT
                ) / DECODE(ORIG_ORDER_QTY, null, 0, ORIG_ORDER_QTY)
              ) * DECODE(CANCELLED_QTY, null, 0, CANCELLED_QTY)
            )
          )
        ) - (
          (
            DECODE(PURCH_COST_AMT, null, 0, PURCH_COST_AMT) * (
              (
                DECODE(ORIG_ORDER_QTY, null, 0, ORIG_ORDER_QTY) - DECODE(CANCELLED_QTY, null, 0, CANCELLED_QTY)
              ) - (DECODE(RETURN_QTY, null, 0, RETURN_QTY))
            )
          ) * EXCHANGE_RATE_PCNT
        )
      ) + (
        (
          DECODE(MA_VF_PRODUCT_AMT, null, 0, MA_VF_PRODUCT_AMT) * (
            DECODE(ORIG_ORDER_QTY, null, 0, ORIG_ORDER_QTY) - (
              DECODE(CANCELLED_QTY, null, 0, CANCELLED_QTY) + DECODE(RETURN_QTY, null, 0, RETURN_QTY)
            )
          )
        ) * EXCHANGE_RATE_PCNT
      )
    ),
    2
  ) AS o_DED_MARGIN_PRE_ADJ_AFTER_CANCELS_AND_RETURNS,
  ROUND(
    SUM(
      (
        (
          (CANCELLED_QTY * UNIT_MONETARY_VALUE_AMT) * EXCHANGE_RATE_PCNT
        ) - (
          (
            (HEADER_DISC_AMT * EXCHANGE_RATE_PCNT) * CANCELLED_QTY
          ) / ORIG_ORDER_QTY
        )
      ) - (
        ((LN_DISC_AMT * EXCHANGE_RATE_PCNT) / ORIG_ORDER_QTY) * CANCELLED_QTY
      )
    ),
    2
  ) AS o_CANCELLED_DOLLAR,
  Round(
    sum(
      DECODE(RETURN_AMT, NULL, 0, RETURN_AMT) * EXCH_RATE_PCT
    ),
    2
  ) AS o_RETURN_DOLLAR,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  SRT_FY_DCG_DOW_14
GROUP BY
  FISCAL_YR,
  DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP"""

df_15 = spark.sql(query_15)

df_15.createOrReplaceTempView("AGG_INITIAL_15")

# COMMAND ----------
# DBTITLE 1, JNR_ORD_SALES_MARGIN_16


query_16 = f"""SELECT
  DETAIL.FISCAL_YR AS FISCAL_YR,
  DETAIL.DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DETAIL.DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  DETAIL.o_ORDER_COUNT AS o_ORDER_COUNT,
  MASTER.FISCAL_YR AS FISCAL_YR1,
  MASTER.DAY_OF_WK_NBR AS DAY_OF_WK_NBR1,
  MASTER.o_DEMAND_NET_DOLLAR AS o_DEMAND_NET_DOLLAR,
  MASTER.o_DEMAND_NET_SHIP AS o_DEMAND_NET_SHIP,
  MASTER.o_DED_MARGIN_PRE_ADJ_AFTER_CANCELS_AND_RETURNS AS o_DED_MARGIN_PRE_ADJ_AFTER_CANCELS_AND_RETURNS,
  MASTER.o_CANCELLED_DOLLAR AS o_CANCELLED_DOLLAR,
  MASTER.o_RETURN_DOLLAR AS o_RETURN_DOLLAR,
  MASTER.DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP1,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  AGG_INITIAL_15 MASTER
  INNER JOIN AGG_INITIAL_ORDER_13 DETAIL ON MASTER.FISCAL_YR = DETAIL.FISCAL_YR
  AND MASTER.DAY_OF_WK_NBR = DETAIL.DAY_OF_WK_NBR
  AND MASTER.DIGITAL_CHANNEL_GROUP = DETAIL.DIGITAL_CHANNEL_GROUP"""

df_16 = spark.sql(query_16)

df_16.createOrReplaceTempView("JNR_ORD_SALES_MARGIN_16")

# COMMAND ----------
# DBTITLE 1, SRT_YR_DCG_17


query_17 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_ORDER_COUNT AS o_ORDER_COUNT,
  o_DEMAND_NET_DOLLAR AS o_DEMAND_NET_DOLLAR,
  o_DEMAND_NET_SHIP AS o_DEMAND_NET_SHIP,
  o_DED_MARGIN_PRE_ADJ_AFTER_CANCELS_AND_RETURNS AS o_DED_MARGIN_PRE_ADJ_AFTER_CANCELS_AND_RETURNS,
  o_CANCELLED_DOLLAR AS o_CANCELLED_DOLLAR,
  o_RETURN_DOLLAR AS o_RETURN_DOLLAR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_ORD_SALES_MARGIN_16
ORDER BY
  FISCAL_YR ASC,
  DAY_OF_WK_NBR ASC,
  DIGITAL_CHANNEL_GROUP ASC"""

df_17 = spark.sql(query_17)

df_17.createOrReplaceTempView("SRT_YR_DCG_17")

# COMMAND ----------
# DBTITLE 1, AGG_YR_DCG_18


query_18 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  SUM(o_ORDER_COUNT) AS o_ORDER_COUNT_YR,
  SUM(
    o_DEMAND_NET_DOLLAR - (o_CANCELLED_DOLLAR + o_RETURN_DOLLAR)
  ) AS o_SALES_AMT_YR,
  SUM (
    o_DEMAND_NET_SHIP + o_DED_MARGIN_PRE_ADJ_AFTER_CANCELS_AND_RETURNS
  ) AS o_DEMAND_MARG_AMOUNT_YR,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  SRT_YR_DCG_17
GROUP BY
  FISCAL_YR,
  DIGITAL_CHANNEL_GROUP"""

df_18 = spark.sql(query_18)

df_18.createOrReplaceTempView("AGG_YR_DCG_18")

# COMMAND ----------
# DBTITLE 1, EXP_JOIN_KEY_YR_19


query_19 = f"""SELECT
  o_ORDER_COUNT_YR AS o_ORDER_COUNT_YR,
  FISCAL_YR AS FISCAL_YR,
  NULL AS RETURN_DOLLAR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_SALES_AMT_YR AS o_SALES_AMT_YR,
  o_DEMAND_MARG_AMOUNT_YR AS o_DEMAND_MARG_AMOUNT_YR,
  CONCAT(FISCAL_YR, DIGITAL_CHANNEL_GROUP) AS o_JOIN_KEY_YR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  AGG_YR_DCG_18"""

df_19 = spark.sql(query_19)

df_19.createOrReplaceTempView("EXP_JOIN_KEY_YR_19")

# COMMAND ----------
# DBTITLE 1, SRT_JOIN_KEY_YR_20


query_20 = f"""SELECT
  o_ORDER_COUNT_YR AS o_ORDER_COUNT_YR,
  FISCAL_YR AS FISCAL_YR,
  RETURN_DOLLAR AS RETURN_DOLLAR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_SALES_AMT_YR AS o_SALES_AMT_YR,
  o_DEMAND_MARG_AMOUNT_YR AS o_DEMAND_MARG_AMOUNT_YR,
  o_JOIN_KEY_YR AS o_JOIN_KEY_YR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_JOIN_KEY_YR_19
ORDER BY
  o_JOIN_KEY_YR ASC"""

df_20 = spark.sql(query_20)

df_20.createOrReplaceTempView("SRT_JOIN_KEY_YR_20")

# COMMAND ----------
# DBTITLE 1, AGG_YR_DCG_DOW_21


query_21 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  SUM(o_ORDER_COUNT) AS o_ORDER_COUNT_DAY,
  SUM(
    o_DEMAND_NET_DOLLAR - (o_CANCELLED_DOLLAR + o_RETURN_DOLLAR)
  ) AS o_SALES_AMT_DAY,
  SUM (
    o_DEMAND_NET_SHIP + o_DED_MARGIN_PRE_ADJ_AFTER_CANCELS_AND_RETURNS
  ) AS o_DEMAND_MARG_AMOUNT_DAY,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  SRT_YR_DCG_17
GROUP BY
  FISCAL_YR,
  DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP"""

df_21 = spark.sql(query_21)

df_21.createOrReplaceTempView("AGG_YR_DCG_DOW_21")

# COMMAND ----------
# DBTITLE 1, EXP_JOIN_KEY_DAY_22


query_22 = f"""SELECT
  o_ORDER_COUNT_DAY AS o_ORDER_COUNT_DAY,
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_SALES_AMT_DAY AS o_SALES_AMT_DAY,
  o_DEMAND_MARG_AMOUNT_DAY AS o_DEMAND_MARG_AMOUNT_DAY,
  CONCAT(FISCAL_YR, DIGITAL_CHANNEL_GROUP) AS o_JOIN_KEY_DAY,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  AGG_YR_DCG_DOW_21"""

df_22 = spark.sql(query_22)

df_22.createOrReplaceTempView("EXP_JOIN_KEY_DAY_22")

# COMMAND ----------
# DBTITLE 1, SRT_JOIN_KEY_DAY_23


query_23 = f"""SELECT
  o_ORDER_COUNT_DAY AS o_ORDER_COUNT_DAY,
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_SALES_AMT_DAY AS o_SALES_AMT_DAY,
  o_DEMAND_MARG_AMOUNT_DAY AS o_DEMAND_MARG_AMOUNT_DAY,
  o_JOIN_KEY_DAY AS o_JOIN_KEY_DAY,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_JOIN_KEY_DAY_22
ORDER BY
  o_JOIN_KEY_DAY ASC"""

df_23 = spark.sql(query_23)

df_23.createOrReplaceTempView("SRT_JOIN_KEY_DAY_23")

# COMMAND ----------
# DBTITLE 1, JNR_YR_DAY_24


query_24 = f"""SELECT
  DETAIL.o_ORDER_COUNT_DAY AS o_ORDER_COUNT_DAY,
  DETAIL.FISCAL_YR AS FISCAL_YR,
  DETAIL.DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DETAIL.DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  DETAIL.o_SALES_AMT_DAY AS o_SALES_AMT_DAY,
  DETAIL.o_DEMAND_MARG_AMOUNT_DAY AS o_DEMAND_MARG_AMOUNT_DAY,
  DETAIL.o_JOIN_KEY_DAY AS o_JOIN_KEY_DAY,
  MASTER.o_ORDER_COUNT_YR AS o_ORDER_COUNT_YR,
  MASTER.FISCAL_YR AS FISCAL_YR1,
  MASTER.RETURN_DOLLAR AS RETURN_DOLLAR,
  MASTER.DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP1,
  MASTER.o_SALES_AMT_YR AS o_SALES_AMT_YR,
  MASTER.o_DEMAND_MARG_AMOUNT_YR AS o_DEMAND_MARG_AMOUNT_YR,
  MASTER.o_JOIN_KEY_YR AS o_JOIN_KEY_YR,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SRT_JOIN_KEY_YR_20 MASTER
  INNER JOIN SRT_JOIN_KEY_DAY_23 DETAIL ON MASTER.o_JOIN_KEY_YR = DETAIL.o_JOIN_KEY_DAY"""

df_24 = spark.sql(query_24)

df_24.createOrReplaceTempView("JNR_YR_DAY_24")

# COMMAND ----------
# DBTITLE 1, SRT_METRICS_25


query_25 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_ORDER_COUNT_DAY AS o_ORDER_COUNT_DAY,
  o_ORDER_COUNT_YR AS o_ORDER_COUNT_YR,
  o_SALES_AMT_DAY AS o_SALES_AMT_DAY,
  o_DEMAND_MARG_AMOUNT_DAY AS o_DEMAND_MARG_AMOUNT_DAY,
  o_ORDER_COUNT_YR AS o_ORDER_COUNT_YR1,
  o_SALES_AMT_YR AS o_SALES_AMT_YR,
  o_DEMAND_MARG_AMOUNT_YR AS o_DEMAND_MARG_AMOUNT_YR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_YR_DAY_24
ORDER BY
  FISCAL_YR ASC,
  DAY_OF_WK_NBR ASC,
  DIGITAL_CHANNEL_GROUP ASC"""

df_25 = spark.sql(query_25)

df_25.createOrReplaceTempView("SRT_METRICS_25")

# COMMAND ----------
# DBTITLE 1, EXP_METRICS_PCT_26


query_26 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  IFF (
    DIGITAL_CHANNEL_GROUP = v_PREV_DIGITAL_CHANNEL_GROUP,
    v_COUNTER + 1,
    NULL
  ) AS v_COUNTER,
  DIGITAL_CHANNEL_GROUP AS v_PREV_DIGITAL_CHANNEL_GROUP,
  Round(((o_ORDER_COUNT_DAY / o_ORDER_COUNT_YR)), 6) AS v_ORDER_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 2
    OR DAY_OF_WK_NBR = 1,
    Round(((o_ORDER_COUNT_DAY / o_ORDER_COUNT_YR)), 6),
    NULL
  ) AS o_Mon_Ord_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 3
    OR DAY_OF_WK_NBR = 2,
    Round(((o_ORDER_COUNT_DAY / o_ORDER_COUNT_YR)), 6),
    NULL
  ) AS o_Tue_Ord_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 4
    OR DAY_OF_WK_NBR = 3,
    Round(((o_ORDER_COUNT_DAY / o_ORDER_COUNT_YR)), 6),
    NULL
  ) AS o_Wed_Ord_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 5
    OR DAY_OF_WK_NBR = 4,
    Round(((o_ORDER_COUNT_DAY / o_ORDER_COUNT_YR)), 6),
    NULL
  ) AS o_Thu_Ord_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 6
    OR DAY_OF_WK_NBR = 5,
    Round(((o_ORDER_COUNT_DAY / o_ORDER_COUNT_YR)), 6),
    NULL
  ) AS o_Fri_Ord_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 7
    OR DAY_OF_WK_NBR = 6,
    Round(((o_ORDER_COUNT_DAY / o_ORDER_COUNT_YR)), 6),
    NULL
  ) AS o_Sat_Ord_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 1
    OR DAY_OF_WK_NBR = 7,
    Round(((o_ORDER_COUNT_DAY / o_ORDER_COUNT_YR)), 6),
    NULL
  ) AS o_Sun_Ord_PCT,
  now() AS UPDATE_TSTMP,
  now() AS LOAD_TSTMP,
  Round(((o_SALES_AMT_DAY / o_SALES_AMT_YR)), 6) AS v_SALES_PCT,
  Round(
    (
      (o_DEMAND_MARG_AMOUNT_DAY / o_DEMAND_MARG_AMOUNT_YR)
    ),
    6
  ) AS v_MARGIN_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 2
    OR DAY_OF_WK_NBR = 1,
    Round(((o_SALES_AMT_DAY / o_SALES_AMT_YR)), 6),
    NULL
  ) AS o_Mon_Sales_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 3
    OR DAY_OF_WK_NBR = 2,
    Round(((o_SALES_AMT_DAY / o_SALES_AMT_YR)), 6),
    NULL
  ) AS o_Tue_Sales_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 4
    OR DAY_OF_WK_NBR = 3,
    Round(((o_SALES_AMT_DAY / o_SALES_AMT_YR)), 6),
    NULL
  ) AS o_Wed_Sales_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 5
    OR DAY_OF_WK_NBR = 4,
    Round(((o_SALES_AMT_DAY / o_SALES_AMT_YR)), 6),
    NULL
  ) AS o_Thu_Sales_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 6
    OR DAY_OF_WK_NBR = 5,
    Round(((o_SALES_AMT_DAY / o_SALES_AMT_YR)), 6),
    NULL
  ) AS o_Fri_Sales_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 7
    OR DAY_OF_WK_NBR = 6,
    Round(((o_SALES_AMT_DAY / o_SALES_AMT_YR)), 6),
    NULL
  ) AS o_Sat_Sales_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 1
    OR DAY_OF_WK_NBR = 7,
    Round(((o_SALES_AMT_DAY / o_SALES_AMT_YR)), 6),
    NULL
  ) AS o_Sun_Sales_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 2
    OR DAY_OF_WK_NBR = 1,
    Round(
      (
        (o_DEMAND_MARG_AMOUNT_DAY / o_DEMAND_MARG_AMOUNT_YR)
      ),
      6
    ),
    NULL
  ) AS o_Mon_Margin_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 3
    OR DAY_OF_WK_NBR = 2,
    Round(
      (
        (o_DEMAND_MARG_AMOUNT_DAY / o_DEMAND_MARG_AMOUNT_YR)
      ),
      6
    ),
    NULL
  ) AS o_Tue_Margin_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 4
    OR DAY_OF_WK_NBR = 3,
    Round(
      (
        (o_DEMAND_MARG_AMOUNT_DAY / o_DEMAND_MARG_AMOUNT_YR)
      ),
      6
    ),
    NULL
  ) AS o_Wed_Margin_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 5
    OR DAY_OF_WK_NBR = 4,
    Round(
      (
        (o_DEMAND_MARG_AMOUNT_DAY / o_DEMAND_MARG_AMOUNT_YR)
      ),
      6
    ),
    NULL
  ) AS o_Thu_Margin_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 6
    OR DAY_OF_WK_NBR = 5,
    Round(
      (
        (o_DEMAND_MARG_AMOUNT_DAY / o_DEMAND_MARG_AMOUNT_YR)
      ),
      6
    ),
    NULL
  ) AS o_Fri_Margin_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 7
    OR DAY_OF_WK_NBR = 6,
    Round(
      (
        (o_DEMAND_MARG_AMOUNT_DAY / o_DEMAND_MARG_AMOUNT_YR)
      ),
      6
    ),
    NULL
  ) AS o_Sat_Margin_PCT,
  IFF (
    IFF (
      DIGITAL_CHANNEL_GROUP = DIGITAL_CHANNEL_GROUP,
      v_COUNTER + 1,
      NULL
    ) = 1
    OR DAY_OF_WK_NBR = 7,
    Round(
      (
        (o_DEMAND_MARG_AMOUNT_DAY / o_DEMAND_MARG_AMOUNT_YR)
      ),
      6
    ),
    NULL
  ) AS o_Sun_Margin_PCT,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SRT_METRICS_25"""

df_26 = spark.sql(query_26)

df_26.createOrReplaceTempView("EXP_METRICS_PCT_26")

# COMMAND ----------
# DBTITLE 1, AGG_METRICS_YR_DCG_27


query_27 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  MAX(o_Mon_Ord_PCT) AS o_src_Mon_Ord_PCT,
  MAX(o_Tue_Ord_PCT) AS o_src_Tue_Ord_PCT,
  MAX(o_Wed_Ord_PCT) AS o_src_Wed_Ord_PCT,
  MAX(o_Thu_Ord_PCT) AS o_src_Thu_Ord_PCT,
  MAX(o_Fri_Ord_PCT) AS o_src_Fri_Ord_PCT,
  MAX(o_Sat_Ord_PCT) AS o_src_Sat_Ord_PCT,
  MAX(o_Sun_Ord_PCT) AS o_src_Sun_Ord_PCT,
  max(o_Mon_Sales_PCT) AS o_src_Mon_Sales_PCT,
  max(o_Tue_Sales_PCT) AS o_src_Tue_Sales_PCT,
  max(o_Wed_Sales_PCT) AS o_src_Wed_Sales_PCT,
  max(o_Thu_Sales_PCT) AS o_src_Thu_Sales_PCT,
  max(o_Fri_Sales_PCT) AS o_src_Fri_Sales_PCT,
  Max(o_Sat_Sales_PCT) AS o_src_Sat_Sales_PCT,
  Max(o_Sun_Sales_PCT) AS o_src_Sun_Sales_PCT,
  Max(o_Mon_Margin_PCT) AS o_src_Mon_Margin_PCT,
  Max(o_Tue_Margin_PCT) AS o_src_Tue_Margin_PCT,
  Max(o_Wed_Margin_PCT) AS o_src_Wed_Margin_PCT,
  Max(o_Thu_Margin_PCT) AS o_src_Thur_Margin_PCT,
  Max(o_Fri_Margin_PCT) AS o_src_Fri_Margin_PCT,
  Max(o_Sat_Margin_PCT) AS o_src_Sat_Margin_PCT,
  Max(o_Sun_Margin_PCT) AS o_src_Sun_Margin_PCT,
  LOAD_TSTMP AS LOAD_TSTMP,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  EXP_METRICS_PCT_26
GROUP BY
  FISCAL_YR,
  DIGITAL_CHANNEL_GROUP"""

df_27 = spark.sql(query_27)

df_27.createOrReplaceTempView("AGG_METRICS_YR_DCG_27")

# COMMAND ----------
# DBTITLE 1, JNR_DOW_REF_28


query_28 = f"""SELECT
  DETAIL.FISCAL_YR AS FISCAL_YR,
  DETAIL.DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  DETAIL.o_src_Mon_Ord_PCT AS o_src_Mon_Ord_PCT,
  DETAIL.o_src_Tue_Ord_PCT AS o_src_Tue_Ord_PCT,
  DETAIL.o_src_Wed_Ord_PCT AS o_src_Wed_Ord_PCT,
  DETAIL.o_src_Thu_Ord_PCT AS o_src_Thu_Ord_PCT,
  DETAIL.o_src_Fri_Ord_PCT AS o_src_Fri_Ord_PCT,
  DETAIL.o_src_Sat_Ord_PCT AS o_src_Sat_Ord_PCT,
  DETAIL.o_src_Sun_Ord_PCT AS o_src_Sun_Ord_PCT,
  DETAIL.o_src_Mon_Sales_PCT AS o_src_Mon_Sales_PCT,
  DETAIL.o_src_Tue_Sales_PCT AS o_src_Tue_Sales_PCT,
  DETAIL.o_src_Wed_Sales_PCT AS o_src_Wed_Sales_PCT,
  DETAIL.o_src_Thu_Sales_PCT AS o_src_Thu_Sales_PCT,
  DETAIL.o_src_Fri_Sales_PCT AS o_src_Fri_Sales_PCT,
  DETAIL.o_src_Sat_Sales_PCT AS o_src_Sat_Sales_PCT,
  DETAIL.o_src_Sun_Sales_PCT AS o_src_Sun_Sales_PCT,
  DETAIL.o_src_Mon_Margin_PCT AS o_src_Mon_Margin_PCT,
  DETAIL.o_src_Tue_Margin_PCT AS o_src_Tue_Margin_PCT,
  DETAIL.o_src_Wed_Margin_PCT AS o_src_Wed_Margin_PCT,
  DETAIL.o_src_Thur_Margin_PCT AS o_src_Thur_Margin_PCT,
  DETAIL.o_src_Fri_Margin_PCT AS o_src_Fri_Margin_PCT,
  DETAIL.o_src_Sat_Margin_PCT AS o_src_Sat_Margin_PCT,
  DETAIL.o_src_Sun_Margin_PCT AS o_src_Sun_Margin_PCT,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  MASTER.FISCAL_YR AS lkp_FISCAL_YR1,
  MASTER.DIGITAL_CHANNEL AS lkp_DIGITAL_CHANNEL,
  MASTER.MON_SALES_PCT AS lkp_MON_SALES_PCT,
  MASTER.TUE_SALES_PCT AS lkp_TUE_SALES_PCT,
  MASTER.WED_SALES_PCT AS lkp_WED_SALES_PCT,
  MASTER.THU_SALES_PCT AS lkp_THU_SALES_PCT,
  MASTER.FRI_SALES_PCT AS lkp_FRI_SALES_PCT,
  MASTER.SAT_SALES_PCT AS lkp_SAT_SALES_PCT,
  MASTER.SUN_SALES_PCT AS lkp_SUN_SALES_PCT,
  MASTER.MON_MARGIN_PCT AS lkp_MON_MARGIN_PCT,
  MASTER.TUE_MARGIN_PCT AS lkp_TUE_MARGIN_PCT,
  MASTER.WED_MARGIN_PCT AS lkp_WED_MARGIN_PCT,
  MASTER.THU_MARGIN_PCT AS lkp_THU_MARGIN_PCT,
  MASTER.FRI_MARGIN_PCT AS lkp_FRI_MARGIN_PCT,
  MASTER.SAT_MARGIN_PCT AS lkp_SAT_MARGIN_PCT,
  MASTER.SUN_MARGIN_PCT AS lkp_SUN_MARGIN_PCT,
  MASTER.MON_ORDER_PCT AS lkp_MON_ORDER_PCT,
  MASTER.TUE_ORDER_PCT AS lkp_TUE_ORDER_PCT,
  MASTER.WED_ORDER_PCT AS lkp_WED_ORDER_PCT,
  MASTER.THU_ORDER_PCT AS lkp_THU_ORDER_PCT,
  MASTER.FRI_ORDER_PCT AS lkp_FRI_ORDER_PCT,
  MASTER.SAT_ORDER_PCT AS lkp_SAT_ORDER_PCT,
  MASTER.SUN_ORDER_PCT AS lkp_SUN_ORDER_PCT,
  MASTER.UPDATE_TSTMP AS lkp_UPDATE_TSTMP,
  MASTER.LOAD_TSTMP AS lkp_LOAD_TSTMP1,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DIGITAL_PLAN_FORECAST_DOW_REF_6 MASTER
  RIGHT JOIN AGG_METRICS_YR_DCG_27 DETAIL ON MASTER.FISCAL_YR = DETAIL.FISCAL_YR
  AND MASTER.DIGITAL_CHANNEL = DETAIL.DIGITAL_CHANNEL_GROUP"""

df_28 = spark.sql(query_28)

df_28.createOrReplaceTempView("JNR_DOW_REF_28")

# COMMAND ----------
# DBTITLE 1, EXP_FLAG_29


query_29 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_src_Mon_Ord_PCT AS o_src_Mon_Ord_PCT,
  o_src_Tue_Ord_PCT AS o_src_Tue_Ord_PCT,
  o_src_Wed_Ord_PCT AS o_src_Wed_Ord_PCT,
  o_src_Thu_Ord_PCT AS o_src_Thu_Ord_PCT,
  o_src_Fri_Ord_PCT AS o_src_Fri_Ord_PCT,
  o_src_Sat_Ord_PCT AS o_src_Sat_Ord_PCT,
  o_src_Sun_Ord_PCT AS o_src_Sun_Ord_PCT,
  o_src_Mon_Sales_PCT AS o_src_Mon_Sales_PCT,
  o_src_Tue_Sales_PCT AS o_src_Tue_Sales_PCT,
  o_src_Wed_Sales_PCT AS o_src_Wed_Sales_PCT,
  o_src_Thu_Sales_PCT AS o_src_Thu_Sales_PCT,
  o_src_Fri_Sales_PCT AS o_src_Fri_Sales_PCT,
  o_src_Sat_Sales_PCT AS o_src_Sat_Sales_PCT,
  o_src_Sun_Sales_PCT AS o_src_Sun_Sales_PCT,
  o_src_Mon_Margin_PCT AS o_src_Mon_Margin_PCT,
  o_src_Tue_Margin_PCT AS o_src_Tue_Margin_PCT,
  o_src_Wed_Margin_PCT AS o_src_Wed_Margin_PCT,
  o_src_Thur_Margin_PCT AS o_src_Thur_Margin_PCT,
  o_src_Fri_Margin_PCT AS o_src_Fri_Margin_PCT,
  o_src_Sat_Margin_PCT AS o_src_Sat_Margin_PCT,
  o_src_Sun_Margin_PCT AS o_src_Sun_Margin_PCT,
  LOAD_TSTMP AS LOAD_TSTMP,
  lkp_FISCAL_YR1 AS lkp_FISCAL_YR,
  lkp_DIGITAL_CHANNEL AS lkp_DIGITAL_CHANNEL_GROUP,
  lkp_MON_SALES_PCT AS lkp_MON_SALES_PCT,
  lkp_TUE_SALES_PCT AS lkp_TUE_SALES_PCT,
  lkp_WED_SALES_PCT AS lkp_WED_SALES_PCT,
  lkp_THU_SALES_PCT AS lkp_THU_SALES_PCT,
  lkp_FRI_SALES_PCT AS lkp_FRI_SALES_PCT,
  lkp_SAT_SALES_PCT AS lkp_SAT_SALES_PCT,
  lkp_SUN_SALES_PCT AS lkp_SUN_SALES_PCT,
  lkp_MON_MARGIN_PCT AS lkp_MON_MARGIN_PCT,
  lkp_TUE_MARGIN_PCT AS lkp_TUE_MARGIN_PCT,
  lkp_WED_MARGIN_PCT AS lkp_WED_MARGIN_PCT,
  lkp_THU_MARGIN_PCT AS lkp_THU_MARGIN_PCT,
  lkp_FRI_MARGIN_PCT AS lkp_FRI_MARGIN_PCT,
  lkp_SAT_MARGIN_PCT AS lkp_SAT_MARGIN_PCT,
  lkp_SUN_MARGIN_PCT AS lkp_SUN_MARGIN_PCT,
  lkp_MON_ORDER_PCT AS lkp_MON_ORDER_PCT,
  lkp_TUE_ORDER_PCT AS lkp_TUE_ORDER_PCT,
  lkp_WED_ORDER_PCT AS lkp_WED_ORDER_PCT,
  lkp_THU_ORDER_PCT AS lkp_THU_ORDER_PCT,
  lkp_FRI_ORDER_PCT AS lkp_FRI_ORDER_PCT,
  lkp_SAT_ORDER_PCT AS lkp_SAT_ORDER_PCT,
  lkp_SUN_ORDER_PCT AS lkp_SUN_ORDER_PCT,
  lkp_UPDATE_TSTMP AS lkp_UPDATE_TSTMP,
  lkp_LOAD_TSTMP1 AS lkp_LOAD_TSTMP,
  IFF(ISNULL(lkp_LOAD_TSTMP1), now(), lkp_LOAD_TSTMP1) AS o_LOAD_TSTMP,
  now() AS o_UPDATE_TSTMP,
  IFF(
    (
      ISNULL(lkp_FISCAL_YR1)
      OR ISNULL(lkp_DIGITAL_CHANNEL)
    ),
    1,
    (
      IFF (
        not (
          ISNULL(lkp_FISCAL_YR1)
          OR ISNULL(lkp_DIGITAL_CHANNEL)
        )
        AND (
          TO_CHAR(o_src_Mon_Sales_PCT) <> TO_CHAR(lkp_MON_SALES_PCT)
          OR TO_CHAR(o_src_Tue_Sales_PCT) <> TO_CHAR(lkp_TUE_SALES_PCT)
          OR TO_CHAR(o_src_Wed_Sales_PCT) <> TO_CHAR(lkp_WED_SALES_PCT)
          OR TO_CHAR(o_src_Thu_Sales_PCT) <> TO_CHAR(lkp_THU_SALES_PCT)
          OR TO_CHAR(o_src_Fri_Sales_PCT) <> TO_CHAR(lkp_FRI_SALES_PCT)
          OR TO_CHAR(o_src_Sat_Sales_PCT) <> TO_CHAR(lkp_SAT_SALES_PCT)
          OR TO_CHAR(o_src_Sun_Sales_PCT) <> TO_CHAR(lkp_SUN_SALES_PCT)
          OR TO_CHAR(o_src_Mon_Margin_PCT) <> TO_CHAR(lkp_MON_MARGIN_PCT)
          OR TO_CHAR(o_src_Tue_Margin_PCT) <> TO_CHAR(lkp_TUE_MARGIN_PCT)
          OR TO_CHAR(o_src_Wed_Margin_PCT) <> TO_CHAR(lkp_WED_MARGIN_PCT)
          OR TO_CHAR(o_src_Thur_Margin_PCT) <> TO_CHAR(lkp_THU_MARGIN_PCT)
          OR TO_CHAR(o_src_Fri_Margin_PCT) <> TO_CHAR(lkp_FRI_MARGIN_PCT)
          OR TO_CHAR(o_src_Sat_Margin_PCT) <> TO_CHAR(lkp_SAT_MARGIN_PCT)
          OR TO_CHAR(o_src_Sun_Margin_PCT) <> TO_CHAR(lkp_SUN_MARGIN_PCT)
          OR TO_CHAR(o_src_Mon_Ord_PCT) <> TO_CHAR(lkp_MON_ORDER_PCT)
          OR TO_CHAR(o_src_Tue_Ord_PCT) <> TO_CHAR(lkp_TUE_ORDER_PCT)
          OR TO_CHAR(o_src_Wed_Ord_PCT) <> TO_CHAR(lkp_WED_ORDER_PCT)
          OR TO_CHAR(o_src_Thu_Ord_PCT) <> TO_CHAR(lkp_THU_ORDER_PCT)
          OR TO_CHAR(o_src_Fri_Ord_PCT) <> TO_CHAR(lkp_FRI_ORDER_PCT)
          OR TO_CHAR(o_src_Sat_Ord_PCT) <> TO_CHAR(lkp_SAT_ORDER_PCT)
          OR TO_CHAR(o_src_Sun_Ord_PCT) <> TO_CHAR(lkp_SUN_ORDER_PCT)
        ),
        2
      )
    )
  ) AS o_VALID_UPDATOR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_DOW_REF_28"""

df_29 = spark.sql(query_29)

df_29.createOrReplaceTempView("EXP_FLAG_29")

# COMMAND ----------
# DBTITLE 1, FIL_FLAG_30


query_30 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_src_Mon_Sales_PCT AS o_src_Mon_Sales_PCT,
  o_src_Tue_Sales_PCT AS o_src_Tue_Sales_PCT,
  o_src_Wed_Sales_PCT AS o_src_Wed_Sales_PCT,
  o_src_Thu_Sales_PCT AS o_src_Thu_Sales_PCT,
  o_src_Fri_Sales_PCT AS o_src_Fri_Sales_PCT,
  o_src_Sat_Sales_PCT AS o_src_Sat_Sales_PCT,
  o_src_Sun_Sales_PCT AS o_src_Sun_Sales_PCT,
  o_src_Mon_Margin_PCT AS o_src_Mon_Margin_PCT,
  o_src_Tue_Margin_PCT AS o_src_Tue_Margin_PCT,
  o_src_Wed_Margin_PCT AS o_src_Wed_Margin_PCT,
  o_src_Thur_Margin_PCT AS o_src_Thur_Margin_PCT,
  o_src_Fri_Margin_PCT AS o_src_Fri_Margin_PCT,
  o_src_Sat_Margin_PCT AS o_src_Sat_Margin_PCT,
  o_src_Sun_Margin_PCT AS o_src_Sun_Margin_PCT,
  o_src_Mon_Ord_PCT AS o_src_Mon_Ord_PCT,
  o_src_Tue_Ord_PCT AS o_src_Tue_Ord_PCT,
  o_src_Wed_Ord_PCT AS o_src_Wed_Ord_PCT,
  o_src_Thu_Ord_PCT AS o_src_Thu_Ord_PCT,
  o_src_Fri_Ord_PCT AS o_src_Fri_Ord_PCT,
  o_src_Sat_Ord_PCT AS o_src_Sat_Ord_PCT,
  o_src_Sun_Ord_PCT AS o_src_Sun_Ord_PCT,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_VALID_UPDATOR AS o_VALID_UPDATOR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_FLAG_29
WHERE
  IN(o_VALID_UPDATOR, 1, 2)"""

df_30 = spark.sql(query_30)

df_30.createOrReplaceTempView("FIL_FLAG_30")

# COMMAND ----------
# DBTITLE 1, UPD_INS_UPD_31


query_31 = f"""SELECT
  FISCAL_YR AS FISCAL_YR,
  DIGITAL_CHANNEL_GROUP AS DIGITAL_CHANNEL_GROUP,
  o_src_Mon_Sales_PCT AS o_src_Mon_Sales_PCT,
  o_src_Tue_Sales_PCT AS o_src_Tue_Sales_PCT,
  o_src_Wed_Sales_PCT AS o_src_Wed_Sales_PCT,
  o_src_Thu_Sales_PCT AS o_src_Thu_Sales_PCT,
  o_src_Fri_Sales_PCT AS o_src_Fri_Sales_PCT,
  o_src_Sat_Sales_PCT AS o_src_Sat_Sales_PCT,
  o_src_Sun_Sales_PCT AS o_src_Sun_Sales_PCT,
  o_src_Mon_Margin_PCT AS o_src_Mon_Margin_PCT,
  o_src_Tue_Margin_PCT AS o_src_Tue_Margin_PCT,
  o_src_Wed_Margin_PCT AS o_src_Wed_Margin_PCT,
  o_src_Thur_Margin_PCT AS o_src_Thur_Margin_PCT,
  o_src_Fri_Margin_PCT AS o_src_Fri_Margin_PCT,
  o_src_Sat_Margin_PCT AS o_src_Sat_Margin_PCT,
  o_src_Sun_Margin_PCT AS o_src_Sun_Margin_PCT,
  o_src_Mon_Ord_PCT AS o_src_Mon_Ord_PCT,
  o_src_Tue_Ord_PCT AS o_src_Tue_Ord_PCT,
  o_src_Wed_Ord_PCT AS o_src_Wed_Ord_PCT,
  o_src_Thu_Ord_PCT AS o_src_Thu_Ord_PCT,
  o_src_Fri_Ord_PCT AS o_src_Fri_Ord_PCT,
  o_src_Sat_Ord_PCT AS o_src_Sat_Ord_PCT,
  o_src_Sun_Ord_PCT AS o_src_Sun_Ord_PCT,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_VALID_UPDATOR AS o_VALID_UPDATOR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(o_VALID_UPDATOR, 1, 'DD_INSERT', 2, 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  FIL_FLAG_30"""

df_31 = spark.sql(query_31)

df_31.createOrReplaceTempView("UPD_INS_UPD_31")

# COMMAND ----------
# DBTITLE 1, DIGITAL_PLAN_FORECAST_DOW_REF


spark.sql("""MERGE INTO DIGITAL_PLAN_FORECAST_DOW_REF AS TARGET
USING
  UPD_INS_UPD_31 AS SOURCE ON TARGET.DIGITAL_CHANNEL = SOURCE.DIGITAL_CHANNEL_GROUP
  AND TARGET.FISCAL_YR = SOURCE.FISCAL_YR
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.FISCAL_YR = SOURCE.FISCAL_YR,
  TARGET.DIGITAL_CHANNEL = SOURCE.DIGITAL_CHANNEL_GROUP,
  TARGET.MON_SALES_PCT = SOURCE.o_src_Mon_Sales_PCT,
  TARGET.TUE_SALES_PCT = SOURCE.o_src_Tue_Sales_PCT,
  TARGET.WED_SALES_PCT = SOURCE.o_src_Wed_Sales_PCT,
  TARGET.THU_SALES_PCT = SOURCE.o_src_Thu_Sales_PCT,
  TARGET.FRI_SALES_PCT = SOURCE.o_src_Fri_Sales_PCT,
  TARGET.SAT_SALES_PCT = SOURCE.o_src_Sat_Sales_PCT,
  TARGET.SUN_SALES_PCT = SOURCE.o_src_Sun_Sales_PCT,
  TARGET.MON_MARGIN_PCT = SOURCE.o_src_Mon_Margin_PCT,
  TARGET.TUE_MARGIN_PCT = SOURCE.o_src_Tue_Margin_PCT,
  TARGET.WED_MARGIN_PCT = SOURCE.o_src_Wed_Margin_PCT,
  TARGET.THU_MARGIN_PCT = SOURCE.o_src_Thur_Margin_PCT,
  TARGET.FRI_MARGIN_PCT = SOURCE.o_src_Fri_Margin_PCT,
  TARGET.SAT_MARGIN_PCT = SOURCE.o_src_Sat_Margin_PCT,
  TARGET.SUN_MARGIN_PCT = SOURCE.o_src_Sun_Margin_PCT,
  TARGET.MON_ORDER_PCT = SOURCE.o_src_Mon_Ord_PCT,
  TARGET.TUE_ORDER_PCT = SOURCE.o_src_Tue_Ord_PCT,
  TARGET.WED_ORDER_PCT = SOURCE.o_src_Wed_Ord_PCT,
  TARGET.THU_ORDER_PCT = SOURCE.o_src_Thu_Ord_PCT,
  TARGET.FRI_ORDER_PCT = SOURCE.o_src_Fri_Ord_PCT,
  TARGET.SAT_ORDER_PCT = SOURCE.o_src_Sat_Ord_PCT,
  TARGET.SUN_ORDER_PCT = SOURCE.o_src_Sun_Ord_PCT,
  TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.MON_SALES_PCT = SOURCE.o_src_Mon_Sales_PCT
  AND TARGET.TUE_SALES_PCT = SOURCE.o_src_Tue_Sales_PCT
  AND TARGET.WED_SALES_PCT = SOURCE.o_src_Wed_Sales_PCT
  AND TARGET.THU_SALES_PCT = SOURCE.o_src_Thu_Sales_PCT
  AND TARGET.FRI_SALES_PCT = SOURCE.o_src_Fri_Sales_PCT
  AND TARGET.SAT_SALES_PCT = SOURCE.o_src_Sat_Sales_PCT
  AND TARGET.SUN_SALES_PCT = SOURCE.o_src_Sun_Sales_PCT
  AND TARGET.MON_MARGIN_PCT = SOURCE.o_src_Mon_Margin_PCT
  AND TARGET.TUE_MARGIN_PCT = SOURCE.o_src_Tue_Margin_PCT
  AND TARGET.WED_MARGIN_PCT = SOURCE.o_src_Wed_Margin_PCT
  AND TARGET.THU_MARGIN_PCT = SOURCE.o_src_Thur_Margin_PCT
  AND TARGET.FRI_MARGIN_PCT = SOURCE.o_src_Fri_Margin_PCT
  AND TARGET.SAT_MARGIN_PCT = SOURCE.o_src_Sat_Margin_PCT
  AND TARGET.SUN_MARGIN_PCT = SOURCE.o_src_Sun_Margin_PCT
  AND TARGET.MON_ORDER_PCT = SOURCE.o_src_Mon_Ord_PCT
  AND TARGET.TUE_ORDER_PCT = SOURCE.o_src_Tue_Ord_PCT
  AND TARGET.WED_ORDER_PCT = SOURCE.o_src_Wed_Ord_PCT
  AND TARGET.THU_ORDER_PCT = SOURCE.o_src_Thu_Ord_PCT
  AND TARGET.FRI_ORDER_PCT = SOURCE.o_src_Fri_Ord_PCT
  AND TARGET.SAT_ORDER_PCT = SOURCE.o_src_Sat_Ord_PCT
  AND TARGET.SUN_ORDER_PCT = SOURCE.o_src_Sun_Ord_PCT
  AND TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.FISCAL_YR,
    TARGET.DIGITAL_CHANNEL,
    TARGET.MON_SALES_PCT,
    TARGET.TUE_SALES_PCT,
    TARGET.WED_SALES_PCT,
    TARGET.THU_SALES_PCT,
    TARGET.FRI_SALES_PCT,
    TARGET.SAT_SALES_PCT,
    TARGET.SUN_SALES_PCT,
    TARGET.MON_MARGIN_PCT,
    TARGET.TUE_MARGIN_PCT,
    TARGET.WED_MARGIN_PCT,
    TARGET.THU_MARGIN_PCT,
    TARGET.FRI_MARGIN_PCT,
    TARGET.SAT_MARGIN_PCT,
    TARGET.SUN_MARGIN_PCT,
    TARGET.MON_ORDER_PCT,
    TARGET.TUE_ORDER_PCT,
    TARGET.WED_ORDER_PCT,
    TARGET.THU_ORDER_PCT,
    TARGET.FRI_ORDER_PCT,
    TARGET.SAT_ORDER_PCT,
    TARGET.SUN_ORDER_PCT,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.FISCAL_YR,
    SOURCE.DIGITAL_CHANNEL_GROUP,
    SOURCE.o_src_Mon_Sales_PCT,
    SOURCE.o_src_Tue_Sales_PCT,
    SOURCE.o_src_Wed_Sales_PCT,
    SOURCE.o_src_Thu_Sales_PCT,
    SOURCE.o_src_Fri_Sales_PCT,
    SOURCE.o_src_Sat_Sales_PCT,
    SOURCE.o_src_Sun_Sales_PCT,
    SOURCE.o_src_Mon_Margin_PCT,
    SOURCE.o_src_Tue_Margin_PCT,
    SOURCE.o_src_Wed_Margin_PCT,
    SOURCE.o_src_Thur_Margin_PCT,
    SOURCE.o_src_Fri_Margin_PCT,
    SOURCE.o_src_Sat_Margin_PCT,
    SOURCE.o_src_Sun_Margin_PCT,
    SOURCE.o_src_Mon_Ord_PCT,
    SOURCE.o_src_Tue_Ord_PCT,
    SOURCE.o_src_Wed_Ord_PCT,
    SOURCE.o_src_Thu_Ord_PCT,
    SOURCE.o_src_Fri_Ord_PCT,
    SOURCE.o_src_Sat_Ord_PCT,
    SOURCE.o_src_Sun_Ord_PCT,
    SOURCE.o_UPDATE_TSTMP,
    SOURCE.o_LOAD_TSTMP
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_Digital_Plan_Forecast_DOW_Ref")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_Digital_Plan_Forecast_DOW_Ref", mainWorkflowId, parentName)
