# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_OMS_Invoice")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_OMS_Invoice", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_EDW_LOAD_CTRL_PRE_0


query_0 = f"""SELECT
  OMS_PURCHASE_ORDERS_ID AS OMS_PURCHASE_ORDERS_ID,
  OMS_PURCHASE_ORDERS_LINE_ITEM_ID AS OMS_PURCHASE_ORDERS_LINE_ITEM_ID,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  ORDER_NBR AS ORDER_NBR,
  OMS_TC_PURCHASE_ORDERS_ID AS OMS_TC_PURCHASE_ORDERS_ID,
  OMS_TC_PO_LINE_ID AS OMS_TC_PO_LINE_ID,
  OMS_ORDER_FULFILLMENT_OPTION AS OMS_ORDER_FULFILLMENT_OPTION,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_ENTERED_BY AS OMS_ENTERED_BY,
  OMS_ROLE_NAME AS OMS_ROLE_NAME,
  PO_OMS_CREATED_TSTMP AS PO_OMS_CREATED_TSTMP,
  PO_OMS_LAST_UPDATED_DTTM AS PO_OMS_LAST_UPDATED_DTTM,
  POL_OMS_CREATED_TSTMP AS POL_OMS_CREATED_TSTMP,
  POL_OMS_LAST_UPDATED_TSTMP AS POL_OMS_LAST_UPDATED_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_EDW_LOAD_CTRL_PRE"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_OMS_EDW_LOAD_CTRL_PRE_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_EDW_LOAD_CTRL_PRE_1


query_1 = f"""SELECT
  DISTINCT OMS_PURCHASE_ORDERS_ID AS OMS_PURCHASE_ORDERS_ID,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_EDW_LOAD_CTRL_PRE_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_OMS_EDW_LOAD_CTRL_PRE_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_INVOICE_2


query_2 = f"""SELECT
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_ENTITY_TYPE AS OMS_ENTITY_TYPE,
  OMS_ENTITY_ID AS OMS_ENTITY_ID,
  OMS_ENTITY_NBR AS OMS_ENTITY_NBR,
  OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE,
  OMS_INVOICE_CREATION_TSTMP AS OMS_INVOICE_CREATION_TSTMP,
  OMS_INVOICE_STATUS_ID AS OMS_INVOICE_STATUS_ID,
  PARTIALLY_SETTLED_FLAG AS PARTIALLY_SETTLED_FLAG,
  COLLECTED_EXTERNALLY_FLAG AS COLLECTED_EXTERNALLY_FLAG,
  OMS_FACILITY_ID AS OMS_FACILITY_ID,
  OMS_SHIPMENT_NBR AS OMS_SHIPMENT_NBR,
  PUBLISHED_FLAG AS PUBLISHED_FLAG,
  C_INITIAL_PUBLISHED_FLAG AS C_INITIAL_PUBLISHED_FLAG,
  OMS_RETURN_ORDER_ID AS OMS_RETURN_ORDER_ID,
  OMS_RETURN_ORDER_NBR AS OMS_RETURN_ORDER_NBR,
  CURRENCY_CD AS CURRENCY_CD,
  HEADER_TAX_AMT AS HEADER_TAX_AMT,
  HEADER_CHARGE_AMT AS HEADER_CHARGE_AMT,
  HEADER_DISCOUNT_AMT AS HEADER_DISCOUNT_AMT,
  INVOICE_AMT AS INVOICE_AMT,
  INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  OMS_LAST_UPDATED_SOURCE AS OMS_LAST_UPDATED_SOURCE,
  OMS_LAST_UPDATED_SOURCE_TYPE_ID AS OMS_LAST_UPDATED_SOURCE_TYPE_ID,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_INVOICE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_A_INVOICE_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_A_INVOICE_3


query_3 = f"""SELECT
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_ENTITY_TYPE AS OMS_ENTITY_TYPE,
  OMS_ENTITY_ID AS OMS_ENTITY_ID,
  OMS_ENTITY_NBR AS OMS_ENTITY_NBR,
  OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE,
  OMS_INVOICE_CREATION_TSTMP AS OMS_INVOICE_CREATION_TSTMP,
  OMS_INVOICE_STATUS_ID AS OMS_INVOICE_STATUS_ID,
  PARTIALLY_SETTLED_FLAG AS PARTIALLY_SETTLED_FLAG,
  COLLECTED_EXTERNALLY_FLAG AS COLLECTED_EXTERNALLY_FLAG,
  OMS_FACILITY_ID AS OMS_FACILITY_ID,
  OMS_SHIPMENT_NBR AS OMS_SHIPMENT_NBR,
  PUBLISHED_FLAG AS PUBLISHED_FLAG,
  C_INITIAL_PUBLISHED_FLAG AS C_INITIAL_PUBLISHED_FLAG,
  OMS_RETURN_ORDER_ID AS OMS_RETURN_ORDER_ID,
  OMS_RETURN_ORDER_NBR AS OMS_RETURN_ORDER_NBR,
  CURRENCY_CD AS CURRENCY_CD,
  HEADER_TAX_AMT AS HEADER_TAX_AMT,
  HEADER_CHARGE_AMT AS HEADER_CHARGE_AMT,
  HEADER_DISCOUNT_AMT AS HEADER_DISCOUNT_AMT,
  INVOICE_AMT AS INVOICE_AMT,
  INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  OMS_LAST_UPDATED_SOURCE AS OMS_LAST_UPDATED_SOURCE,
  OMS_LAST_UPDATED_SOURCE_TYPE_ID AS OMS_LAST_UPDATED_SOURCE_TYPE_ID,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_A_INVOICE_2
WHERE
  UPDATE_TSTMP > (CURRENT_DATE)"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_OMS_A_INVOICE_3")

# COMMAND ----------
# DBTITLE 1, JNR_MASTER_ORDER_4


query_4 = f"""SELECT
  DETAIL.OMS_INVOICE_ID AS OMS_INVOICE_ID,
  DETAIL.OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  DETAIL.OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  DETAIL.OMS_ENTITY_ID AS OMS_ENTITY_ID,
  DETAIL.OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE,
  DETAIL.OMS_INVOICE_CREATION_TSTMP AS OMS_INVOICE_CREATION_TSTMP,
  DETAIL.OMS_INVOICE_STATUS_ID AS OMS_INVOICE_STATUS_ID,
  DETAIL.PUBLISHED_FLAG AS PUBLISHED_FLAG,
  DETAIL.CURRENCY_CD AS CURRENCY_CD,
  DETAIL.HEADER_TAX_AMT AS HEADER_TAX_AMT,
  DETAIL.HEADER_CHARGE_AMT AS HEADER_CHARGE_AMT,
  DETAIL.HEADER_DISCOUNT_AMT AS HEADER_DISCOUNT_AMT,
  DETAIL.INVOICE_AMT AS INVOICE_AMT,
  DETAIL.INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  DETAIL.OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  DETAIL.OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  DETAIL.OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  MASTER.OMS_PURCHASE_ORDERS_ID AS OMS_PURCHASE_ORDERS_ID,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_EDW_LOAD_CTRL_PRE_1 MASTER
  INNER JOIN SQ_Shortcut_to_OMS_A_INVOICE_3 DETAIL ON MASTER.OMS_PURCHASE_ORDERS_ID = DETAIL.OMS_ENTITY_ID"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("JNR_MASTER_ORDER_4")

# COMMAND ----------
# DBTITLE 1, EXP_PRE_5


query_5 = f"""SELECT
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_ENTITY_ID AS OMS_ENTITY_ID,
  OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE,
  OMS_INVOICE_CREATION_TSTMP AS OMS_INVOICE_CREATION_TSTMP,
  OMS_INVOICE_STATUS_ID AS OMS_INVOICE_STATUS_ID,
  PUBLISHED_FLAG AS PUBLISHED_FLAG,
  CURRENCY_CD AS CURRENCY_CD,
  HEADER_TAX_AMT AS HEADER_TAX_AMT,
  HEADER_CHARGE_AMT AS HEADER_CHARGE_AMT,
  HEADER_DISCOUNT_AMT AS HEADER_DISCOUNT_AMT,
  INVOICE_AMT AS INVOICE_AMT,
  INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  IFF(
    ISNULL(OMS_LAST_UPDATED_TSTMP),
    TRUNC(OMS_INVOICE_CREATION_TSTMP),
    TRUNC(OMS_LAST_UPDATED_TSTMP)
  ) AS o_lkp_DATE,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_MASTER_ORDER_4"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("EXP_PRE_5")

# COMMAND ----------
# DBTITLE 1, LKP_CURRENCY_DAY_6


query_6 = f"""SELECT
  CD.EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  EP5.OMS_INVOICE_ID AS OMS_INVOICE_ID,
  EP5.OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  EP5.OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  EP5.OMS_ENTITY_ID AS OMS_ENTITY_ID,
  EP5.OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE,
  EP5.OMS_INVOICE_CREATION_TSTMP AS OMS_INVOICE_CREATION_TSTMP,
  EP5.OMS_INVOICE_STATUS_ID AS OMS_INVOICE_STATUS_ID,
  EP5.PUBLISHED_FLAG AS PUBLISHED_FLAG,
  EP5.CURRENCY_CD AS CURRENCY_CD,
  EP5.HEADER_TAX_AMT AS HEADER_TAX_AMT,
  EP5.HEADER_CHARGE_AMT AS HEADER_CHARGE_AMT,
  EP5.HEADER_DISCOUNT_AMT AS HEADER_DISCOUNT_AMT,
  EP5.INVOICE_AMT AS INVOICE_AMT,
  EP5.INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  EP5.OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  EP5.OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  EP5.OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  EP5.UPDATE_TSTMP AS UPDATE_TSTMP,
  EP5.o_lkp_DATE AS o_lkp_DATE,
  EP5.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_PRE_5 EP5
  LEFT JOIN CURRENCY_DAY CD ON CD.DAY_DT = EP5.o_lkp_DATE"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("LKP_CURRENCY_DAY_6")

# COMMAND ----------
# DBTITLE 1, EXP_EXCHANGE_RATE_PCNT_7


query_7 = f"""SELECT
  TO_BIGINT(OMS_INVOICE_ID) AS o_OMS_INVOICE_ID,
  OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_ENTITY_ID AS OMS_ENTITY_ID,
  OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE,
  OMS_INVOICE_CREATION_TSTMP AS OMS_INVOICE_CREATION_TSTMP,
  OMS_INVOICE_STATUS_ID AS OMS_INVOICE_STATUS_ID,
  PUBLISHED_FLAG AS PUBLISHED_FLAG,
  CURRENCY_CD AS CURRENCY_CD,
  HEADER_TAX_AMT AS HEADER_TAX_AMT,
  HEADER_CHARGE_AMT AS HEADER_CHARGE_AMT,
  HEADER_DISCOUNT_AMT AS HEADER_DISCOUNT_AMT,
  INVOICE_AMT AS INVOICE_AMT,
  INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  IFF(CURRENCY_CD <> 'USD', EXCHANGE_RATE_PCNT, 1) AS o_EXCHANGE_RATE_PCNT,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  LKP_CURRENCY_DAY_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("EXP_EXCHANGE_RATE_PCNT_7")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_INVOICE_8


query_8 = f"""SELECT
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  OMS_INVOICE_TYPE_ID AS OMS_INVOICE_TYPE_ID,
  INVOICE_CREATE_TSTMP AS INVOICE_CREATE_TSTMP,
  INVOICE_LAST_UPD_TSTMP AS INVOICE_LAST_UPD_TSTMP,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_SOURCE AS CREATED_SOURCE,
  INVOICE_STATUS_ID AS INVOICE_STATUS_ID,
  INVOICE_PUBLISHED_FLAG AS INVOICE_PUBLISHED_FLAG,
  INVOICE_TAX_AMT AS INVOICE_TAX_AMT,
  INVOICE_CHARGE_AMT AS INVOICE_CHARGE_AMT,
  INVOICE_DISC_AMT AS INVOICE_DISC_AMT,
  INVOICE_TOTAL_AMT AS INVOICE_TOTAL_AMT,
  INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  CURRENCY_CD AS CURRENCY_CD,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_INVOICE"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("Shortcut_to_OMS_INVOICE_8")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_INVOICE_9


query_9 = f"""SELECT
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  OMS_INVOICE_TYPE_ID AS OMS_INVOICE_TYPE_ID,
  INVOICE_CREATE_TSTMP AS INVOICE_CREATE_TSTMP,
  INVOICE_LAST_UPD_TSTMP AS INVOICE_LAST_UPD_TSTMP,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_SOURCE AS CREATED_SOURCE,
  INVOICE_STATUS_ID AS INVOICE_STATUS_ID,
  INVOICE_PUBLISHED_FLAG AS INVOICE_PUBLISHED_FLAG,
  INVOICE_TAX_AMT AS INVOICE_TAX_AMT,
  INVOICE_CHARGE_AMT AS INVOICE_CHARGE_AMT,
  INVOICE_DISC_AMT AS INVOICE_DISC_AMT,
  INVOICE_TOTAL_AMT AS INVOICE_TOTAL_AMT,
  INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  CURRENCY_CD AS CURRENCY_CD,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_INVOICE_8"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("SQ_Shortcut_to_OMS_INVOICE_9")

# COMMAND ----------
# DBTITLE 1, JNR_OMS_INVOICE_10


query_10 = f"""SELECT
  DETAIL.o_OMS_INVOICE_ID AS src_OMS_INVOICE_ID,
  DETAIL.OMS_INVOICE_NBR AS src_OMS_INVOICE_NBR,
  DETAIL.OMS_TC_COMPANY_ID AS src_OMS_TC_COMPANY_ID,
  DETAIL.OMS_ENTITY_ID AS src_OMS_ENTITY_ID,
  DETAIL.OMS_INVOICE_TYPE AS src_OMS_INVOICE_TYPE,
  DETAIL.OMS_INVOICE_CREATION_TSTMP AS src_OMS_INVOICE_CREATION_TSTMP,
  DETAIL.OMS_INVOICE_STATUS_ID AS src_OMS_INVOICE_STATUS_ID,
  DETAIL.PUBLISHED_FLAG AS src_PUBLISHED_FLAG,
  DETAIL.CURRENCY_CD AS src_CURRENCY_CD,
  DETAIL.HEADER_TAX_AMT AS src_HEADER_TAX_AMT,
  DETAIL.HEADER_CHARGE_AMT AS src_HEADER_CHARGE_AMT,
  DETAIL.HEADER_DISCOUNT_AMT AS src_HEADER_DISCOUNT_AMT,
  DETAIL.INVOICE_AMT AS src_INVOICE_AMT,
  DETAIL.INVOICE_AMT_PROCESSED AS src_INVOICE_AMT_PROCESSED,
  DETAIL.OMS_CREATED_SOURCE AS src_OMS_CREATED_SOURCE,
  DETAIL.OMS_CREATED_SOURCE_TYPE_ID AS src_OMS_CREATED_SOURCE_TYPE_ID,
  DETAIL.OMS_LAST_UPDATED_TSTMP AS src_OMS_LAST_UPDATED_TSTMP,
  DETAIL.o_EXCHANGE_RATE_PCNT AS src_EXCHANGE_RATE_PCNT,
  MASTER.OMS_INVOICE_ID AS lkp_OMS_INVOICE_ID,
  MASTER.OMS_INVOICE_NBR AS lkp_OMS_INVOICE_NBR,
  MASTER.OMS_ORDER_ID AS lkp_OMS_ORDER_ID,
  MASTER.OMS_COMPANY_ID AS lkp_OMS_COMPANY_ID,
  MASTER.OMS_INVOICE_TYPE_ID AS lkp_OMS_INVOICE_TYPE_ID,
  MASTER.INVOICE_CREATE_TSTMP AS lkp_INVOICE_CREATE_TSTMP,
  MASTER.INVOICE_LAST_UPD_TSTMP AS lkp_INVOICE_LAST_UPD_TSTMP,
  MASTER.CREATED_SOURCE_TYPE AS lkp_CREATED_SOURCE_TYPE,
  MASTER.CREATED_SOURCE AS lkp_CREATED_SOURCE,
  MASTER.INVOICE_STATUS_ID AS lkp_INVOICE_STATUS_ID,
  MASTER.INVOICE_PUBLISHED_FLAG AS lkp_INVOICE_PUBLISHED_FLAG,
  MASTER.INVOICE_TAX_AMT AS lkp_INVOICE_TAX_AMT,
  MASTER.INVOICE_CHARGE_AMT AS lkp_INVOICE_CHARGE_AMT,
  MASTER.INVOICE_DISC_AMT AS lkp_INVOICE_DISC_AMT,
  MASTER.INVOICE_TOTAL_AMT AS lkp_INVOICE_TOTAL_AMT,
  MASTER.INVOICE_AMT_PROCESSED AS lkp_INVOICE_AMT_PROCESSED,
  MASTER.CURRENCY_CD AS lkp_CURRENCY_CD,
  MASTER.EXCHANGE_RATE_PCNT AS lkp_EXCHANGE_RATE_PCNT,
  MASTER.LOAD_TSTMP AS lkp_LOAD_TSTMP,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_INVOICE_9 MASTER
  RIGHT JOIN EXP_EXCHANGE_RATE_PCNT_7 DETAIL ON MASTER.OMS_INVOICE_ID = DETAIL.o_OMS_INVOICE_ID"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("JNR_OMS_INVOICE_10")

# COMMAND ----------
# DBTITLE 1, FIL_UNCHANGED_RECORDS_11


query_11 = f"""SELECT
  src_OMS_INVOICE_ID AS src_OMS_INVOICE_ID,
  src_OMS_INVOICE_NBR AS src_OMS_INVOICE_NBR,
  src_OMS_TC_COMPANY_ID AS src_OMS_TC_COMPANY_ID,
  src_OMS_ENTITY_ID AS src_OMS_ENTITY_ID,
  src_OMS_INVOICE_TYPE AS src_OMS_INVOICE_TYPE,
  src_OMS_INVOICE_CREATION_TSTMP AS src_OMS_INVOICE_CREATION_TSTMP,
  src_OMS_INVOICE_STATUS_ID AS src_OMS_INVOICE_STATUS_ID,
  src_PUBLISHED_FLAG AS src_PUBLISHED_FLAG,
  src_CURRENCY_CD AS src_CURRENCY_CD,
  src_HEADER_TAX_AMT AS src_HEADER_TAX_AMT,
  src_HEADER_CHARGE_AMT AS src_HEADER_CHARGE_AMT,
  src_HEADER_DISCOUNT_AMT AS src_HEADER_DISCOUNT_AMT,
  src_INVOICE_AMT AS src_INVOICE_AMT,
  src_INVOICE_AMT_PROCESSED AS src_INVOICE_AMT_PROCESSED,
  src_OMS_CREATED_SOURCE AS src_OMS_CREATED_SOURCE,
  src_OMS_CREATED_SOURCE_TYPE_ID AS src_OMS_CREATED_SOURCE_TYPE_ID,
  src_OMS_LAST_UPDATED_TSTMP AS src_OMS_LAST_UPDATED_TSTMP,
  src_EXCHANGE_RATE_PCNT AS src_EXCHANGE_RATE_PCNT,
  lkp_OMS_INVOICE_ID AS lkp_OMS_INVOICE_ID,
  lkp_OMS_INVOICE_NBR AS lkp_OMS_INVOICE_NBR,
  lkp_OMS_ORDER_ID AS lkp_OMS_ORDER_ID,
  lkp_OMS_COMPANY_ID AS lkp_OMS_COMPANY_ID,
  lkp_OMS_INVOICE_TYPE_ID AS lkp_OMS_INVOICE_TYPE_ID,
  lkp_INVOICE_CREATE_TSTMP AS lkp_INVOICE_CREATE_TSTMP,
  lkp_INVOICE_LAST_UPD_TSTMP AS lkp_INVOICE_LAST_UPD_TSTMP,
  lkp_CREATED_SOURCE_TYPE AS lkp_CREATED_SOURCE_TYPE,
  lkp_CREATED_SOURCE AS lkp_CREATED_SOURCE,
  lkp_INVOICE_STATUS_ID AS lkp_INVOICE_STATUS_ID,
  lkp_INVOICE_PUBLISHED_FLAG AS lkp_INVOICE_PUBLISHED_FLAG,
  lkp_INVOICE_TAX_AMT AS lkp_INVOICE_TAX_AMT,
  lkp_INVOICE_CHARGE_AMT AS lkp_INVOICE_CHARGE_AMT,
  lkp_INVOICE_DISC_AMT AS lkp_INVOICE_DISC_AMT,
  lkp_INVOICE_TOTAL_AMT AS lkp_INVOICE_TOTAL_AMT,
  lkp_INVOICE_AMT_PROCESSED AS lkp_INVOICE_AMT_PROCESSED,
  lkp_CURRENCY_CD AS lkp_CURRENCY_CD,
  lkp_EXCHANGE_RATE_PCNT AS lkp_EXCHANGE_RATE_PCNT,
  lkp_LOAD_TSTMP AS lkp_LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_OMS_INVOICE_10
WHERE
  ISNULL(lkp_OMS_INVOICE_ID)
  OR (
    NOT ISNULL(lkp_OMS_INVOICE_ID)
    AND (
      src_OMS_INVOICE_NBR <> lkp_OMS_INVOICE_NBR
      OR src_OMS_TC_COMPANY_ID <> lkp_OMS_COMPANY_ID
      OR src_OMS_ENTITY_ID <> lkp_OMS_ORDER_ID
      OR src_OMS_INVOICE_TYPE <> lkp_OMS_INVOICE_TYPE_ID
      OR src_OMS_INVOICE_CREATION_TSTMP <> lkp_INVOICE_CREATE_TSTMP
      OR src_OMS_LAST_UPDATED_TSTMP <> lkp_INVOICE_LAST_UPD_TSTMP
      OR src_OMS_CREATED_SOURCE <> lkp_CREATED_SOURCE
      OR src_OMS_CREATED_SOURCE_TYPE_ID <> lkp_CREATED_SOURCE_TYPE
      OR src_OMS_INVOICE_STATUS_ID <> lkp_INVOICE_STATUS_ID
      OR src_PUBLISHED_FLAG <> lkp_INVOICE_PUBLISHED_FLAG
      OR src_HEADER_TAX_AMT <> lkp_INVOICE_TAX_AMT
      OR src_HEADER_CHARGE_AMT <> lkp_INVOICE_CHARGE_AMT
      OR src_HEADER_DISCOUNT_AMT <> lkp_INVOICE_DISC_AMT
      OR src_INVOICE_AMT <> lkp_INVOICE_TOTAL_AMT
      OR src_INVOICE_AMT_PROCESSED <> lkp_INVOICE_AMT_PROCESSED
      OR src_CURRENCY_CD <> lkp_CURRENCY_CD
      OR src_EXCHANGE_RATE_PCNT <> lkp_EXCHANGE_RATE_PCNT
    )
  )"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("FIL_UNCHANGED_RECORDS_11")

# COMMAND ----------
# DBTITLE 1, EXP_UPDATE_FLAG_12


query_12 = f"""SELECT
  src_OMS_INVOICE_ID AS src_OMS_INVOICE_ID,
  src_OMS_INVOICE_NBR AS src_OMS_INVOICE_NBR,
  src_OMS_TC_COMPANY_ID AS src_OMS_TC_COMPANY_ID,
  src_OMS_ENTITY_ID AS src_OMS_ENTITY_ID,
  src_OMS_INVOICE_TYPE AS src_OMS_INVOICE_TYPE,
  src_OMS_INVOICE_CREATION_TSTMP AS src_OMS_INVOICE_CREATION_TSTMP,
  src_OMS_INVOICE_STATUS_ID AS src_OMS_INVOICE_STATUS_ID,
  src_PUBLISHED_FLAG AS src_PUBLISHED_FLAG,
  src_CURRENCY_CD AS src_CURRENCY_CD,
  src_HEADER_TAX_AMT AS src_HEADER_TAX_AMT,
  src_HEADER_CHARGE_AMT AS src_HEADER_CHARGE_AMT,
  src_HEADER_DISCOUNT_AMT AS src_HEADER_DISCOUNT_AMT,
  src_INVOICE_AMT AS src_INVOICE_AMT,
  src_INVOICE_AMT_PROCESSED AS src_INVOICE_AMT_PROCESSED,
  src_OMS_CREATED_SOURCE AS src_OMS_CREATED_SOURCE,
  src_OMS_CREATED_SOURCE_TYPE_ID AS src_OMS_CREATED_SOURCE_TYPE_ID,
  src_OMS_LAST_UPDATED_TSTMP AS src_OMS_LAST_UPDATED_TSTMP,
  src_EXCHANGE_RATE_PCNT AS src_EXCHANGE_RATE_PCNT,
  now() AS o_UPDATE_TSTMP,
  IFF(ISNULL(lkp_LOAD_TSTMP), now(), lkp_LOAD_TSTMP) AS o_LOAD_TSTMP,
  IFF(ISNULL(lkp_OMS_INVOICE_ID), 1, 2) AS o_UPDATE_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FIL_UNCHANGED_RECORDS_11"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("EXP_UPDATE_FLAG_12")

# COMMAND ----------
# DBTITLE 1, UPD_INSERT_UPDATE_13


query_13 = f"""SELECT
  src_OMS_INVOICE_ID AS src_OMS_INVOICE_ID,
  src_OMS_INVOICE_NBR AS src_OMS_INVOICE_NBR,
  src_OMS_TC_COMPANY_ID AS src_OMS_TC_COMPANY_ID,
  src_OMS_ENTITY_ID AS src_OMS_ENTITY_ID,
  src_OMS_INVOICE_TYPE AS src_OMS_INVOICE_TYPE,
  src_OMS_INVOICE_CREATION_TSTMP AS src_OMS_INVOICE_CREATION_TSTMP,
  src_OMS_INVOICE_STATUS_ID AS src_OMS_INVOICE_STATUS_ID,
  src_PUBLISHED_FLAG AS src_PUBLISHED_FLAG,
  src_CURRENCY_CD AS src_CURRENCY_CD,
  src_HEADER_TAX_AMT AS src_HEADER_TAX_AMT,
  src_HEADER_CHARGE_AMT AS src_HEADER_CHARGE_AMT,
  src_HEADER_DISCOUNT_AMT AS src_HEADER_DISCOUNT_AMT,
  src_INVOICE_AMT AS src_INVOICE_AMT,
  src_INVOICE_AMT_PROCESSED AS src_INVOICE_AMT_PROCESSED,
  src_OMS_CREATED_SOURCE AS src_OMS_CREATED_SOURCE,
  src_OMS_CREATED_SOURCE_TYPE_ID AS src_OMS_CREATED_SOURCE_TYPE_ID,
  src_OMS_LAST_UPDATED_TSTMP AS src_OMS_LAST_UPDATED_TSTMP,
  src_EXCHANGE_RATE_PCNT AS src_EXCHANGE_RATE_PCNT,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  o_UPDATE_FLAG AS o_UPDATE_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(o_UPDATE_FLAG, 1, 'DD_INSERT', 2, 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  EXP_UPDATE_FLAG_12"""

df_13 = spark.sql(query_13)

df_13.createOrReplaceTempView("UPD_INSERT_UPDATE_13")

# COMMAND ----------
# DBTITLE 1, OMS_INVOICE


spark.sql("""MERGE INTO OMS_INVOICE AS TARGET
USING
  UPD_INSERT_UPDATE_13 AS SOURCE ON TARGET.OMS_INVOICE_ID = SOURCE.src_OMS_INVOICE_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.OMS_INVOICE_ID = SOURCE.src_OMS_INVOICE_ID,
  TARGET.OMS_INVOICE_NBR = SOURCE.src_OMS_INVOICE_NBR,
  TARGET.OMS_ORDER_ID = SOURCE.src_OMS_ENTITY_ID,
  TARGET.OMS_COMPANY_ID = SOURCE.src_OMS_TC_COMPANY_ID,
  TARGET.OMS_INVOICE_TYPE_ID = SOURCE.src_OMS_INVOICE_TYPE,
  TARGET.INVOICE_CREATE_TSTMP = SOURCE.src_OMS_INVOICE_CREATION_TSTMP,
  TARGET.INVOICE_LAST_UPD_TSTMP = SOURCE.src_OMS_LAST_UPDATED_TSTMP,
  TARGET.CREATED_SOURCE_TYPE = SOURCE.src_OMS_CREATED_SOURCE_TYPE_ID,
  TARGET.CREATED_SOURCE = SOURCE.src_OMS_CREATED_SOURCE,
  TARGET.INVOICE_STATUS_ID = SOURCE.src_OMS_INVOICE_STATUS_ID,
  TARGET.INVOICE_PUBLISHED_FLAG = SOURCE.src_PUBLISHED_FLAG,
  TARGET.INVOICE_TAX_AMT = SOURCE.src_HEADER_TAX_AMT,
  TARGET.INVOICE_CHARGE_AMT = SOURCE.src_HEADER_CHARGE_AMT,
  TARGET.INVOICE_DISC_AMT = SOURCE.src_HEADER_DISCOUNT_AMT,
  TARGET.INVOICE_TOTAL_AMT = SOURCE.src_INVOICE_AMT,
  TARGET.INVOICE_AMT_PROCESSED = SOURCE.src_INVOICE_AMT_PROCESSED,
  TARGET.CURRENCY_CD = SOURCE.src_CURRENCY_CD,
  TARGET.EXCHANGE_RATE_PCNT = SOURCE.src_EXCHANGE_RATE_PCNT,
  TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.OMS_INVOICE_NBR = SOURCE.src_OMS_INVOICE_NBR
  AND TARGET.OMS_ORDER_ID = SOURCE.src_OMS_ENTITY_ID
  AND TARGET.OMS_COMPANY_ID = SOURCE.src_OMS_TC_COMPANY_ID
  AND TARGET.OMS_INVOICE_TYPE_ID = SOURCE.src_OMS_INVOICE_TYPE
  AND TARGET.INVOICE_CREATE_TSTMP = SOURCE.src_OMS_INVOICE_CREATION_TSTMP
  AND TARGET.INVOICE_LAST_UPD_TSTMP = SOURCE.src_OMS_LAST_UPDATED_TSTMP
  AND TARGET.CREATED_SOURCE_TYPE = SOURCE.src_OMS_CREATED_SOURCE_TYPE_ID
  AND TARGET.CREATED_SOURCE = SOURCE.src_OMS_CREATED_SOURCE
  AND TARGET.INVOICE_STATUS_ID = SOURCE.src_OMS_INVOICE_STATUS_ID
  AND TARGET.INVOICE_PUBLISHED_FLAG = SOURCE.src_PUBLISHED_FLAG
  AND TARGET.INVOICE_TAX_AMT = SOURCE.src_HEADER_TAX_AMT
  AND TARGET.INVOICE_CHARGE_AMT = SOURCE.src_HEADER_CHARGE_AMT
  AND TARGET.INVOICE_DISC_AMT = SOURCE.src_HEADER_DISCOUNT_AMT
  AND TARGET.INVOICE_TOTAL_AMT = SOURCE.src_INVOICE_AMT
  AND TARGET.INVOICE_AMT_PROCESSED = SOURCE.src_INVOICE_AMT_PROCESSED
  AND TARGET.CURRENCY_CD = SOURCE.src_CURRENCY_CD
  AND TARGET.EXCHANGE_RATE_PCNT = SOURCE.src_EXCHANGE_RATE_PCNT
  AND TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.OMS_INVOICE_ID,
    TARGET.OMS_INVOICE_NBR,
    TARGET.OMS_ORDER_ID,
    TARGET.OMS_COMPANY_ID,
    TARGET.OMS_INVOICE_TYPE_ID,
    TARGET.INVOICE_CREATE_TSTMP,
    TARGET.INVOICE_LAST_UPD_TSTMP,
    TARGET.CREATED_SOURCE_TYPE,
    TARGET.CREATED_SOURCE,
    TARGET.INVOICE_STATUS_ID,
    TARGET.INVOICE_PUBLISHED_FLAG,
    TARGET.INVOICE_TAX_AMT,
    TARGET.INVOICE_CHARGE_AMT,
    TARGET.INVOICE_DISC_AMT,
    TARGET.INVOICE_TOTAL_AMT,
    TARGET.INVOICE_AMT_PROCESSED,
    TARGET.CURRENCY_CD,
    TARGET.EXCHANGE_RATE_PCNT,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.src_OMS_INVOICE_ID,
    SOURCE.src_OMS_INVOICE_NBR,
    SOURCE.src_OMS_ENTITY_ID,
    SOURCE.src_OMS_TC_COMPANY_ID,
    SOURCE.src_OMS_INVOICE_TYPE,
    SOURCE.src_OMS_INVOICE_CREATION_TSTMP,
    SOURCE.src_OMS_LAST_UPDATED_TSTMP,
    SOURCE.src_OMS_CREATED_SOURCE_TYPE_ID,
    SOURCE.src_OMS_CREATED_SOURCE,
    SOURCE.src_OMS_INVOICE_STATUS_ID,
    SOURCE.src_PUBLISHED_FLAG,
    SOURCE.src_HEADER_TAX_AMT,
    SOURCE.src_HEADER_CHARGE_AMT,
    SOURCE.src_HEADER_DISCOUNT_AMT,
    SOURCE.src_INVOICE_AMT,
    SOURCE.src_INVOICE_AMT_PROCESSED,
    SOURCE.src_CURRENCY_CD,
    SOURCE.src_EXCHANGE_RATE_PCNT,
    SOURCE.o_UPDATE_TSTMP,
    SOURCE.o_LOAD_TSTMP
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_OMS_Invoice")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_OMS_Invoice", mainWorkflowId, parentName)
