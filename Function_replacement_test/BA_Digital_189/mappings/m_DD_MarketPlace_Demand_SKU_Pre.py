# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DD_MarketPlace_Demand_SKU_Pre")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_DD_MarketPlace_Demand_SKU_Pre", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DD_Petsmart_Market_Demand_SKU_FF_0


query_0 = f"""SELECT
  DELIVERY_CREATED_DATE_UTC AS DELIVERY_CREATED_DATE_UTC,
  DELIVERY_CREATED_TIMESTAMP_UTC AS DELIVERY_CREATED_TIMESTAMP_UTC,
  STORE_TRANSACTION_DATE_UTC AS STORE_TRANSACTION_DATE_UTC,
  STORE_TRANSACTION_TIMESTAMP_UTC AS STORE_TRANSACTION_TIMESTAMP_UTC,
  DELIVERY_UUID AS DELIVERY_UUID,
  MERCHANT_STORE_ID AS MERCHANT_STORE_ID,
  STORE_NAME AS STORE_NAME,
  BUSINESS_NAME AS BUSINESS_NAME,
  ITEM_MERCHANT_SUPPLIED_ID AS ITEM_MERCHANT_SUPPLIED_ID,
  ITEM_NAME AS ITEM_NAME,
  ITEM_CATEGORY AS ITEM_CATEGORY,
  ITEM_PRICE AS ITEM_PRICE,
  ITEM_QUANTITY AS ITEM_QUANTITY,
  TOTAL_ITEM_PRICE AS TOTAL_ITEM_PRICE,
  ITEM_TAX_AMOUNT AS ITEM_TAX_AMOUNT,
  IS_DELIVERED AS IS_DELIVERED
FROM
  DD_Petsmart_Market_Demand_SKU_FF"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_DD_Petsmart_Market_Demand_SKU_FF_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DD_Petsmart_Market_Demand_SKU_FF_1


query_1 = f"""SELECT
  DELIVERY_CREATED_DATE_UTC AS DELIVERY_CREATED_DATE_UTC,
  DELIVERY_CREATED_TIMESTAMP_UTC AS DELIVERY_CREATED_TIMESTAMP_UTC,
  STORE_TRANSACTION_DATE_UTC AS STORE_TRANSACTION_DATE_UTC,
  STORE_TRANSACTION_TIMESTAMP_UTC AS STORE_TRANSACTION_TIMESTAMP_UTC,
  DELIVERY_UUID AS DELIVERY_UUID,
  MERCHANT_STORE_ID AS MERCHANT_STORE_ID,
  STORE_NAME AS STORE_NAME,
  BUSINESS_NAME AS BUSINESS_NAME,
  ITEM_MERCHANT_SUPPLIED_ID AS ITEM_MERCHANT_SUPPLIED_ID,
  ITEM_NAME AS ITEM_NAME,
  ITEM_CATEGORY AS ITEM_CATEGORY,
  ITEM_PRICE AS ITEM_PRICE,
  ITEM_QUANTITY AS ITEM_QUANTITY,
  TOTAL_ITEM_PRICE AS TOTAL_ITEM_PRICE,
  ITEM_TAX_AMOUNT AS ITEM_TAX_AMOUNT,
  IS_DELIVERED AS IS_DELIVERED,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DD_Petsmart_Market_Demand_SKU_FF_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_DD_Petsmart_Market_Demand_SKU_FF_1")

# COMMAND ----------
# DBTITLE 1, exp_Target_2


query_2 = f"""SELECT
  IFF(
    IS_DATE(DELIVERY_CREATED_DATE_UTC, {DT_FRMT}),
    TO_DATE(DELIVERY_CREATED_DATE_UTC, 'MM/DD/YYYY'),
    NULL
  ) AS o_DELIVERY_CREATED_DATE_UTC,
  IFF(
    IS_DATE(DELIVERY_CREATED_TIMESTAMP_UTC, {DTTSMP_FRMT}),
    TO_DATE(
      DELIVERY_CREATED_TIMESTAMP_UTC,
      'YYYY-MM-DD HH24:MI:SS'
    ),
    (
      IFF(
        IS_DATE(DELIVERY_CREATED_TIMESTAMP_UTC, {DTTSMP_FRMT}1),
        TO_DATE(
          DELIVERY_CREATED_TIMESTAMP_UTC,
          'YYYY-MM-DD HH24:MI:SS.US'
        ),
        NULL
      )
    )
  ) AS o_DELIVERY_CREATED_TIMESTAMP_UTC1,
  IFF(
    IS_DATE(STORE_TRANSACTION_DATE_UTC, {DT_FRMT}),
    TO_DATE(STORE_TRANSACTION_DATE_UTC, 'MM/DD/YYYY'),
    NULL
  ) AS o_STORE_TRANSACTION_DATE_UTC,
  IFF(
    IS_DATE(STORE_TRANSACTION_TIMESTAMP_UTC, {DTTSMP_FRMT}),
    TO_DATE(
      STORE_TRANSACTION_TIMESTAMP_UTC,
      'YYYY-MM-DD HH24:MI:SS'
    ),
    (
      IFF(
        IS_DATE(STORE_TRANSACTION_TIMESTAMP_UTC, {DTTSMP_FRMT}1),
        TO_DATE(
          STORE_TRANSACTION_TIMESTAMP_UTC,
          'YYYY-MM-DD HH24:MI:SS.US'
        ),
        NULL
      )
    )
  ) AS o_STORE_TRANSACTION_TIMESTAMP_UTC1,
  LTRIM(RTRIM(DELIVERY_UUID)) AS o_DELIVERY_UUID,
  MERCHANT_STORE_ID AS MERCHANT_STORE_ID,
  LTRIM(RTRIM(STORE_NAME)) AS o_STORE_NAME,
  LTRIM(RTRIM(BUSINESS_NAME)) AS o_BUSINESS_NAME,
  ITEM_MERCHANT_SUPPLIED_ID AS ITEM_MERCHANT_SUPPLIED_ID,
  LTRIM(RTRIM(ITEM_NAME)) AS o_ITEM_NAME,
  LTRIM(RTRIM(ITEM_CATEGORY)) AS o_ITEM_CATEGORY,
  TO_DECIMAL(ITEM_PRICE) AS o_ITEM_PRICE,
  ITEM_QUANTITY AS ITEM_QUANTITY,
  TO_DECIMAL(TOTAL_ITEM_PRICE) AS o_TOTAL_ITEM_PRICE,
  TO_DECIMAL(ITEM_TAX_AMOUNT) AS o_ITEM_TAX_AMOUNT,
  LTRIM(RTRIM(IS_DELIVERED)) AS o_FINAL_STATUS,
  'NA' AS o_CURRENCY_CD,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DD_Petsmart_Market_Demand_SKU_FF_1"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("exp_Target_2")

# COMMAND ----------
# DBTITLE 1, DD_MARKETPLACE_DEMAND_SKU_PRE


spark.sql("""INSERT INTO
  DD_MARKETPLACE_DEMAND_SKU_PRE
SELECT
  o_DELIVERY_UUID AS DD_DELIVERY_UUID,
  MERCHANT_STORE_ID AS MERCHANT_STORE_ID,
  ITEM_MERCHANT_SUPPLIED_ID AS ITEM_MERCHANT_SUPPLIED_ID,
  o_STORE_NAME AS STORE_NAME,
  o_BUSINESS_NAME AS BUSINESS_NAME,
  o_ITEM_NAME AS ITEM_NAME,
  o_ITEM_CATEGORY AS ITEM_CATEGORY,
  o_ITEM_PRICE AS ITEM_PRICE,
  ITEM_QUANTITY AS ITEM_QUANTITY,
  o_TOTAL_ITEM_PRICE AS TOTAL_ITEM_PRICE,
  o_ITEM_TAX_AMOUNT AS ITEM_TAX_AMOUNT,
  o_FINAL_STATUS AS FINAL_STATUS,
  o_CURRENCY_CD AS CURRENCY_CD,
  NULL AS DASHPASS_FLAG,
  o_DELIVERY_CREATED_DATE_UTC AS DELIVERY_CREATED_DATE_UTC,
  o_DELIVERY_CREATED_TIMESTAMP_UTC1 AS DELIVERY_CREATED_TIMESTAMP_UTC,
  o_STORE_TRANSACTION_DATE_UTC AS STORE_TRANSACTION_DATE_UTC,
  o_STORE_TRANSACTION_TIMESTAMP_UTC1 AS STORE_TRANSACTION_TIMESTAMP_UTC,
  NULL AS LOAD_TSTMP
FROM
  exp_Target_2""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DD_MarketPlace_Demand_SKU_Pre")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_DD_MarketPlace_Demand_SKU_Pre", mainWorkflowId, parentName)
