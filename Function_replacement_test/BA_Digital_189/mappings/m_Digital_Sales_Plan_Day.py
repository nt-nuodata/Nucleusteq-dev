# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_Digital_Sales_Plan_Day")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_Digital_Sales_Plan_Day", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DIGITAL_SALES_PLAN_DAY1_0


query_0 = f"""SELECT
  DAY_DT AS DAY_DT,
  FISCAL_WK AS FISCAL_WK,
  COUNTRY_CD AS COUNTRY_CD,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  DIGITAL_PLAN_GROUP AS DIGITAL_PLAN_GROUP,
  PLAN_SALES_AMT AS PLAN_SALES_AMT,
  PLAN_MARGIN_AMT AS PLAN_MARGIN_AMT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  DIGITAL_SALES_PLAN_DAY"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_DIGITAL_SALES_PLAN_DAY1_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DIGITAL_SALES_PLAN_DAY_1


query_1 = f"""SELECT
  DAY_DT AS DAY_DT,
  FISCAL_WK AS FISCAL_WK,
  COUNTRY_CD AS COUNTRY_CD,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  DIGITAL_PLAN_GROUP AS DIGITAL_PLAN_GROUP,
  PLAN_SALES_AMT AS PLAN_SALES_AMT,
  PLAN_MARGIN_AMT AS PLAN_MARGIN_AMT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DIGITAL_SALES_PLAN_DAY1_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_DIGITAL_SALES_PLAN_DAY_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DIGITAL_NON_EP_PLAN_DAY_PRE_2


query_2 = f"""SELECT
  DAY_DT AS DAY_DT,
  FISCAL_WK AS FISCAL_WK,
  DAY_OF_WEEK AS DAY_OF_WEEK,
  US_STH_SALES_AMT AS US_STH_SALES_AMT,
  US_STH_MARGIN_AMT AS US_STH_MARGIN_AMT,
  US_RX_SALES_AMT AS US_RX_SALES_AMT,
  US_RX_MARGIN_AMT AS US_RX_MARGIN_AMT,
  US_AUTOSHIP_SALES_AMT AS US_AUTOSHIP_SALES_AMT,
  US_AUTOSHIP_MARGIN_AMT AS US_AUTOSHIP_MARGIN_AMT,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  DIGITAL_NON_EP_PLAN_DAY_PRE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_DIGITAL_NON_EP_PLAN_DAY_PRE_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DIGITAL_NON_EP_PLAN_DAY_PRE_3


query_3 = f"""SELECT
  DAY_DT AS DAY_DT,
  FISCAL_WK AS FISCAL_WK,
  DAY_OF_WEEK AS DAY_OF_WEEK,
  US_STH_SALES_AMT AS US_STH_SALES_AMT,
  US_STH_MARGIN_AMT AS US_STH_MARGIN_AMT,
  US_RX_SALES_AMT AS US_RX_SALES_AMT,
  US_RX_MARGIN_AMT AS US_RX_MARGIN_AMT,
  US_AUTOSHIP_SALES_AMT AS US_AUTOSHIP_SALES_AMT,
  US_AUTOSHIP_MARGIN_AMT AS US_AUTOSHIP_MARGIN_AMT,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DIGITAL_NON_EP_PLAN_DAY_PRE_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_DIGITAL_NON_EP_PLAN_DAY_PRE_3")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DIGITAL_EP_PLAN_DAY_PRE_4


query_4 = f"""SELECT
  DAY_DT AS DAY_DT,
  FISCAL_WK AS FISCAL_WK,
  DAY_OF_WEEK AS DAY_OF_WEEK,
  US_MARKETPLACE_SALES_AMT AS US_MARKETPLACE_SALES_AMT,
  US_MARKETPLACE_MARGIN_AMT AS US_MARKETPLACE_MARGIN_AMT,
  CA_MARKETPLACE_SALES_AMT AS CA_MARKETPLACE_SALES_AMT,
  CA_MARKETPLACE_MARGIN_AMT AS CA_MARKETPLACE_MARGIN_AMT,
  US_BOPIS_SALES_AMT AS US_BOPIS_SALES_AMT,
  US_BOPIS_MARGIN_AMT AS US_BOPIS_MARGIN_AMT,
  CA_BOPIS_SALES_AMT AS CA_BOPIS_SALES_AMT,
  CA_BOPIS_MARGIN_AMT AS CA_BOPIS_MARGIN_AMT,
  US_DOORDASH_SALES_AMT AS US_DOORDASH_SALES_AMT,
  US_DOORDASH_MARGIN_AMT AS US_DOORDASH_MARGIN_AMT,
  CA_DOORDASH_SALES_AMT AS CA_DOORDASH_SALES_AMT,
  CA_DOORDASH_MARGIN_AMT AS CA_DOORDASH_MARGIN_AMT,
  CA_SFS_SALES_AMT AS CA_SFS_SALES_AMT,
  CA_SFS_MARGIN_AMT AS CA_SFS_MARGIN_AMT,
  CA_AUTOSHIP_SALES_AMT AS CA_AUTOSHIP_SALES_AMT,
  CA_AUTOSHIP_MARGIN_AMT AS CA_AUTOSHIP_MARGIN_AMT,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  DIGITAL_EP_PLAN_DAY_PRE"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("Shortcut_to_DIGITAL_EP_PLAN_DAY_PRE_4")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DIGITAL_EP_PLAN_DAY_PRE_5


query_5 = f"""SELECT
  DAY_DT AS DAY_DT,
  FISCAL_WK AS FISCAL_WK,
  DAY_OF_WEEK AS DAY_OF_WEEK,
  US_MARKETPLACE_SALES_AMT AS US_MARKETPLACE_SALES_AMT,
  US_MARKETPLACE_MARGIN_AMT AS US_MARKETPLACE_MARGIN_AMT,
  CA_MARKETPLACE_SALES_AMT AS CA_MARKETPLACE_SALES_AMT,
  CA_MARKETPLACE_MARGIN_AMT AS CA_MARKETPLACE_MARGIN_AMT,
  US_BOPIS_SALES_AMT AS US_BOPIS_SALES_AMT,
  US_BOPIS_MARGIN_AMT AS US_BOPIS_MARGIN_AMT,
  CA_BOPIS_SALES_AMT AS CA_BOPIS_SALES_AMT,
  CA_BOPIS_MARGIN_AMT AS CA_BOPIS_MARGIN_AMT,
  US_DOORDASH_SALES_AMT AS US_DOORDASH_SALES_AMT,
  US_DOORDASH_MARGIN_AMT AS US_DOORDASH_MARGIN_AMT,
  CA_DOORDASH_SALES_AMT AS CA_DOORDASH_SALES_AMT,
  CA_DOORDASH_MARGIN_AMT AS CA_DOORDASH_MARGIN_AMT,
  CA_SFS_SALES_AMT AS CA_SFS_SALES_AMT,
  CA_SFS_MARGIN_AMT AS CA_SFS_MARGIN_AMT,
  CA_AUTOSHIP_SALES_AMT AS CA_AUTOSHIP_SALES_AMT,
  CA_AUTOSHIP_MARGIN_AMT AS CA_AUTOSHIP_MARGIN_AMT,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DIGITAL_EP_PLAN_DAY_PRE_4"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("SQ_Shortcut_to_DIGITAL_EP_PLAN_DAY_PRE_5")

# COMMAND ----------
# DBTITLE 1, JNR_EP_NonEP_DAY_DT_FISCAL_WK_6


query_6 = f"""SELECT
  DETAIL.DAY_DT AS DAY_DT,
  DETAIL.FISCAL_WK AS FISCAL_WK,
  DETAIL.DAY_OF_WEEK AS DAY_OF_WEEK,
  DETAIL.US_MARKETPLACE_SALES_AMT AS US_MARKETPLACE_SALES_AMT,
  DETAIL.US_MARKETPLACE_MARGIN_AMT AS US_MARKETPLACE_MARGIN_AMT,
  DETAIL.CA_MARKETPLACE_SALES_AMT AS CA_MARKETPLACE_SALES_AMT,
  DETAIL.CA_MARKETPLACE_MARGIN_AMT AS CA_MARKETPLACE_MARGIN_AMT,
  DETAIL.US_BOPIS_SALES_AMT AS US_BOPIS_SALES_AMT,
  DETAIL.US_BOPIS_MARGIN_AMT AS US_BOPIS_MARGIN_AMT,
  DETAIL.CA_BOPIS_SALES_AMT AS CA_BOPIS_SALES_AMT,
  DETAIL.CA_BOPIS_MARGIN_AMT AS CA_BOPIS_MARGIN_AMT,
  DETAIL.US_DOORDASH_SALES_AMT AS US_DOORDASH_SALES_AMT,
  DETAIL.US_DOORDASH_MARGIN_AMT AS US_DOORDASH_MARGIN_AMT,
  DETAIL.CA_DOORDASH_SALES_AMT AS CA_DOORDASH_SALES_AMT,
  DETAIL.CA_DOORDASH_MARGIN_AMT AS CA_DOORDASH_MARGIN_AMT,
  DETAIL.CA_SFS_SALES_AMT AS CA_SFS_SALES_AMT,
  DETAIL.CA_SFS_MARGIN_AMT AS CA_SFS_MARGIN_AMT,
  DETAIL.CA_AUTOSHIP_SALES_AMT AS CA_AUTOSHIP_SALES_AMT,
  DETAIL.CA_AUTOSHIP_MARGIN_AMT AS CA_AUTOSHIP_MARGIN_AMT,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  MASTER.DAY_DT AS DAY_DT1,
  MASTER.FISCAL_WK AS FISCAL_WK1,
  MASTER.DAY_OF_WEEK AS DAY_OF_WEEK1,
  MASTER.US_STH_SALES_AMT AS US_STH_SALES_AMT,
  MASTER.US_STH_MARGIN_AMT AS US_STH_MARGIN_AMT,
  MASTER.US_RX_SALES_AMT AS US_RX_SALES_AMT,
  MASTER.US_RX_MARGIN_AMT AS US_RX_MARGIN_AMT,
  MASTER.US_AUTOSHIP_SALES_AMT AS US_AUTOSHIP_SALES_AMT,
  MASTER.US_AUTOSHIP_MARGIN_AMT AS US_AUTOSHIP_MARGIN_AMT,
  MASTER.LOAD_TSTMP AS LOAD_TSTMP1,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DIGITAL_NON_EP_PLAN_DAY_PRE_3 MASTER
  INNER JOIN SQ_Shortcut_to_DIGITAL_EP_PLAN_DAY_PRE_5 DETAIL ON MASTER.DAY_DT = DETAIL.DAY_DT
  AND MASTER.FISCAL_WK = DETAIL.FISCAL_WK"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("JNR_EP_NonEP_DAY_DT_FISCAL_WK_6")

# COMMAND ----------
# DBTITLE 1, EXP_DAY_DT_To_Char_7


query_7 = f"""SELECT
  DAY_DT AS DAY_DT,
  LPAD(GET_DATE_PART(DAY_DT, 'MM'), 2, 0) || '/' || LPAD(GET_DATE_PART(DAY_DT, 'DD'), 2, 0) || '/' || GET_DATE_PART(DAY_DT, 'YYYY') AS O_DAY_DT,
  FISCAL_WK AS FISCAL_WK,
  US_MARKETPLACE_SALES_AMT AS US_MARKETPLACE_SALES_AMT,
  CA_MARKETPLACE_SALES_AMT AS CA_MARKETPLACE_SALES_AMT,
  US_BOPIS_SALES_AMT AS US_BOPIS_SALES_AMT,
  CA_BOPIS_SALES_AMT AS CA_BOPIS_SALES_AMT,
  US_DOORDASH_SALES_AMT AS US_DOORDASH_SALES_AMT,
  CA_DOORDASH_SALES_AMT AS CA_DOORDASH_SALES_AMT,
  CA_SFS_SALES_AMT AS CA_SFS_SALES_AMT,
  CA_AUTOSHIP_SALES_AMT AS CA_AUTOSHIP_SALES_AMT,
  US_STH_SALES_AMT AS US_STH_SALES_AMT,
  US_RX_SALES_AMT AS US_RX_SALES_AMT,
  US_AUTOSHIP_SALES_AMT AS US_AUTOSHIP_SALES_AMT,
  US_MARKETPLACE_MARGIN_AMT AS US_MARKETPLACE_MARGIN_AMT,
  CA_MARKETPLACE_MARGIN_AMT AS CA_MARKETPLACE_MARGIN_AMT,
  US_BOPIS_MARGIN_AMT AS US_BOPIS_MARGIN_AMT,
  CA_BOPIS_MARGIN_AMT AS CA_BOPIS_MARGIN_AMT,
  US_DOORDASH_MARGIN_AMT AS US_DOORDASH_MARGIN_AMT,
  CA_DOORDASH_MARGIN_AMT AS CA_DOORDASH_MARGIN_AMT,
  CA_SFS_MARGIN_AMT AS CA_SFS_MARGIN_AMT,
  CA_AUTOSHIP_MARGIN_AMT AS CA_AUTOSHIP_MARGIN_AMT,
  US_STH_MARGIN_AMT AS US_STH_MARGIN_AMT,
  US_RX_MARGIN_AMT AS US_RX_MARGIN_AMT,
  US_AUTOSHIP_MARGIN_AMT AS US_AUTOSHIP_MARGIN_AMT,
  LOAD_TSTMP1 AS LOAD_TSTMP1,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_EP_NonEP_DAY_DT_FISCAL_WK_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("EXP_DAY_DT_To_Char_7")

# COMMAND ----------
# DBTITLE 1, NRM_SALES_AMT_MARGIN_AMT


Normalizer Transformation not supported

# COMMAND ----------
# DBTITLE 1, EXP_NORMALIZATION_CONDITION_8


query_8 = f"""SELECT
  TO_DATE(SUBSTR(DAY_DT, 1, 10), 'MM/DD/YYYY') AS o_DAY_DT,
  FISCAL_WK AS FISCAL_WK,
  SALES_AMT AS PLAN_SALES_AMT,
  MARGIN_AMT AS PLAN_MARGIN_AMT,
  GK_SALES_AMT AS GK_PLAN_SALES_AMT,
  GCID_SALES_AMT AS GCID_SALES_AMT,
  GCID_MARGIN_AMT AS GCID_MARGIN_AMT,
  IFF(
    GCID_SALES_AMT = 1
    OR GCID_SALES_AMT = 3
    OR GCID_SALES_AMT = 5
    OR GCID_SALES_AMT = 9
    OR GCID_SALES_AMT = 10
    OR GCID_SALES_AMT = 11
    OR GCID_MARGIN_AMT = 1
    OR GCID_MARGIN_AMT = 3
    OR GCID_MARGIN_AMT = 5
    OR GCID_MARGIN_AMT = 9
    OR GCID_MARGIN_AMT = 10
    OR GCID_MARGIN_AMT = 11,
    'US',
    IFF(
      GCID_SALES_AMT = 2
      OR GCID_SALES_AMT = 4
      OR GCID_SALES_AMT = 6
      OR GCID_SALES_AMT = 7
      OR GCID_SALES_AMT = 8
      OR GCID_MARGIN_AMT = 2
      OR GCID_MARGIN_AMT = 4
      OR GCID_MARGIN_AMT = 6
      OR GCID_MARGIN_AMT = 7
      OR GCID_MARGIN_AMT = 8,
      'CA'
    )
  ) AS V_COUNTRY_CD,
  IFF(
    GCID_SALES_AMT = 9
    OR GCID_MARGIN_AMT = 9
    OR GCID_SALES_AMT = 10
    OR GCID_MARGIN_AMT = 10
    OR GCID_SALES_AMT = 11
    OR GCID_MARGIN_AMT = 11
    OR GCID_SALES_AMT = 8
    OR GCID_MARGIN_AMT = 8,
    'WEB',
    IFF(
      GCID_SALES_AMT = 3
      OR GCID_MARGIN_AMT = 3
      OR GCID_SALES_AMT = 4
      OR GCID_MARGIN_AMT = 4
      OR GCID_SALES_AMT = 5
      OR GCID_MARGIN_AMT = 5
      OR GCID_SALES_AMT = 6
      OR GCID_MARGIN_AMT = 6,
      'ISPU',
      IFF(
        GCID_SALES_AMT = 1
        OR GCID_MARGIN_AMT = 1
        OR GCID_SALES_AMT = 2
        OR GCID_MARGIN_AMT = 2,
        'STR',
        IFF(
          GCID_SALES_AMT = 7
          OR GCID_MARGIN_AMT = 7,
          'SFS'
        )
      )
    )
  ) AS V_ORDER_CHANNEL,
  IFF(
    GCID_SALES_AMT = 9
    OR GCID_MARGIN_AMT = 9,
    'STH',
    IFF(
      GCID_SALES_AMT = 10
      OR GCID_MARGIN_AMT = 10,
      'RX',
      IFF(
        GCID_SALES_AMT = 11
        OR GCID_MARGIN_AMT = 11
        OR GCID_SALES_AMT = 8
        OR GCID_MARGIN_AMT = 8,
        'AUTOSHIP',
        IFF(
          GCID_SALES_AMT = 3
          OR GCID_MARGIN_AMT = 3
          OR GCID_SALES_AMT = 4
          OR GCID_MARGIN_AMT = 4,
          'BOPIS',
          IFF(
            GCID_SALES_AMT = 5
            OR GCID_MARGIN_AMT = 5
            OR GCID_SALES_AMT = 6
            OR GCID_MARGIN_AMT = 6,
            'SCHED DELIV',
            IFF(
              GCID_SALES_AMT = 1
              OR GCID_MARGIN_AMT = 1
              OR GCID_SALES_AMT = 2
              OR GCID_MARGIN_AMT = 2,
              'SHOP ASSIST',
              IFF(
                GCID_SALES_AMT = 7
                OR GCID_MARGIN_AMT = 7,
                'SFS'
              )
            )
          )
        )
      )
    )
  ) AS V_DIGITAL_PLAN_GROUP,
  IFF(
    GCID_SALES_AMT = 1
    OR GCID_SALES_AMT = 3
    OR GCID_SALES_AMT = 5
    OR GCID_SALES_AMT = 9
    OR GCID_SALES_AMT = 10
    OR GCID_SALES_AMT = 11
    OR GCID_MARGIN_AMT = 1
    OR GCID_MARGIN_AMT = 3
    OR GCID_MARGIN_AMT = 5
    OR GCID_MARGIN_AMT = 9
    OR GCID_MARGIN_AMT = 10
    OR GCID_MARGIN_AMT = 11,
    'US',
    IFF(
      GCID_SALES_AMT = 2
      OR GCID_SALES_AMT = 4
      OR GCID_SALES_AMT = 6
      OR GCID_SALES_AMT = 7
      OR GCID_SALES_AMT = 8
      OR GCID_MARGIN_AMT = 2
      OR GCID_MARGIN_AMT = 4
      OR GCID_MARGIN_AMT = 6
      OR GCID_MARGIN_AMT = 7
      OR GCID_MARGIN_AMT = 8,
      'CA'
    )
  ) AS COUNTRY_CD,
  IFF(
    GCID_SALES_AMT = 9
    OR GCID_MARGIN_AMT = 9
    OR GCID_SALES_AMT = 10
    OR GCID_MARGIN_AMT = 10
    OR GCID_SALES_AMT = 11
    OR GCID_MARGIN_AMT = 11
    OR GCID_SALES_AMT = 8
    OR GCID_MARGIN_AMT = 8,
    'WEB',
    IFF(
      GCID_SALES_AMT = 3
      OR GCID_MARGIN_AMT = 3
      OR GCID_SALES_AMT = 4
      OR GCID_MARGIN_AMT = 4
      OR GCID_SALES_AMT = 5
      OR GCID_MARGIN_AMT = 5
      OR GCID_SALES_AMT = 6
      OR GCID_MARGIN_AMT = 6,
      'ISPU',
      IFF(
        GCID_SALES_AMT = 1
        OR GCID_MARGIN_AMT = 1
        OR GCID_SALES_AMT = 2
        OR GCID_MARGIN_AMT = 2,
        'STR',
        IFF(
          GCID_SALES_AMT = 7
          OR GCID_MARGIN_AMT = 7,
          'SFS'
        )
      )
    )
  ) AS ORDER_CHANNEL,
  IFF(
    GCID_SALES_AMT = 9
    OR GCID_MARGIN_AMT = 9,
    'STH',
    IFF(
      GCID_SALES_AMT = 10
      OR GCID_MARGIN_AMT = 10,
      'RX',
      IFF(
        GCID_SALES_AMT = 11
        OR GCID_MARGIN_AMT = 11
        OR GCID_SALES_AMT = 8
        OR GCID_MARGIN_AMT = 8,
        'AUTOSHIP',
        IFF(
          GCID_SALES_AMT = 3
          OR GCID_MARGIN_AMT = 3
          OR GCID_SALES_AMT = 4
          OR GCID_MARGIN_AMT = 4,
          'BOPIS',
          IFF(
            GCID_SALES_AMT = 5
            OR GCID_MARGIN_AMT = 5
            OR GCID_SALES_AMT = 6
            OR GCID_MARGIN_AMT = 6,
            'SCHED DELIV',
            IFF(
              GCID_SALES_AMT = 1
              OR GCID_MARGIN_AMT = 1
              OR GCID_SALES_AMT = 2
              OR GCID_MARGIN_AMT = 2,
              'SHOP ASSIST',
              IFF(
                GCID_SALES_AMT = 7
                OR GCID_MARGIN_AMT = 7,
                'SFS'
              )
            )
          )
        )
      )
    )
  ) AS DIGITAL_PLAN_GROUP,
  now() AS UPDATE_TSTMP,
  now() AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  null"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("EXP_NORMALIZATION_CONDITION_8")

# COMMAND ----------
# DBTITLE 1, JNR_DIGITAL_SALES_PLAN_DAY_9


query_9 = f"""SELECT
  DETAIL.o_DAY_DT AS o_DAY_DT,
  DETAIL.FISCAL_WK AS o_FISCAL_WK,
  DETAIL.COUNTRY_CD AS o_COUNTRY_CD,
  DETAIL.ORDER_CHANNEL AS o_ORDER_CHANNEL,
  DETAIL.DIGITAL_PLAN_GROUP AS o_DIGITAL_PLAN_GROUP,
  DETAIL.PLAN_SALES_AMT AS o_PLAN_SALES_AMT,
  DETAIL.PLAN_MARGIN_AMT AS o_PLAN_MARGIN_AMT,
  DETAIL.UPDATE_TSTMP AS o_UPDATE_TSTMP,
  DETAIL.LOAD_TSTMP AS o_LOAD_TSTMP,
  MASTER.DAY_DT AS lkp_DAY_DT,
  MASTER.DIGITAL_PLAN_GROUP AS lkp_DIGITAL_PLAN_GROUP,
  MASTER.COUNTRY_CD AS lkp_COUNTRY_CD,
  MASTER.ORDER_CHANNEL AS lkp_ORDER_CHANNEL,
  MASTER.PLAN_SALES_AMT AS lkp_PLAN_SALES_AMT,
  MASTER.PLAN_MARGIN_AMT AS lkp_PLAN_MARGIN_AMT,
  MASTER.LOAD_TSTMP AS lkp_LOAD_TSTMP,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DIGITAL_SALES_PLAN_DAY_1 MASTER
  RIGHT JOIN EXP_NORMALIZATION_CONDITION_8 DETAIL ON MASTER.DAY_DT = DETAIL.o_DAY_DT
  AND MASTER.COUNTRY_CD = DETAIL.COUNTRY_CD
  AND MASTER.DIGITAL_PLAN_GROUP = DETAIL.DIGITAL_PLAN_GROUP
  AND MASTER.ORDER_CHANNEL = DETAIL.ORDER_CHANNEL"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("JNR_DIGITAL_SALES_PLAN_DAY_9")

# COMMAND ----------
# DBTITLE 1, FLT_INS_UPD_RECORDS_10


query_10 = f"""SELECT
  o_DAY_DT AS o_DAY_DT,
  o_FISCAL_WK AS o_FISCAL_WK,
  o_COUNTRY_CD AS o_COUNTRY_CD,
  o_ORDER_CHANNEL AS o_ORDER_CHANNEL,
  o_DIGITAL_PLAN_GROUP AS o_DIGITAL_PLAN_GROUP,
  o_PLAN_SALES_AMT AS o_PLAN_SALES_AMT,
  o_PLAN_MARGIN_AMT AS o_PLAN_MARGIN_AMT,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  lkp_DAY_DT AS lkp_DAY_DT,
  lkp_DIGITAL_PLAN_GROUP AS lkp_DIGITAL_PLAN_GROUP,
  lkp_COUNTRY_CD AS lkp_COUNTRY_CD,
  lkp_ORDER_CHANNEL AS lkp_ORDER_CHANNEL,
  lkp_PLAN_SALES_AMT AS lkp_PLAN_SALES_AMT,
  lkp_PLAN_MARGIN_AMT AS lkp_PLAN_MARGIN_AMT,
  lkp_LOAD_TSTMP AS lkp_LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_DIGITAL_SALES_PLAN_DAY_9
WHERE
  (
    ISNULL(lkp_DIGITAL_PLAN_GROUP)
    OR ISNULL(lkp_DAY_DT)
    OR ISNULL(lkp_ORDER_CHANNEL)
    OR ISNULL(lkp_COUNTRY_CD)
  )
  OR (
    (
      NOT ISNULL(lkp_DIGITAL_PLAN_GROUP)
      AND NOT ISNULL(lkp_DAY_DT)
      AND NOT ISNULL(lkp_ORDER_CHANNEL)
      AND NOT ISNULL(lkp_COUNTRY_CD)
    )
    AND (
      IFF(
        ISNULL(o_PLAN_SALES_AMT),
        TO_INTEGER(0),
        o_PLAN_SALES_AMT
      ) <> IFF(
        ISNULL(lkp_PLAN_SALES_AMT),
        TO_INTEGER(0),
        lkp_PLAN_SALES_AMT
      )
      OR IFF(
        ISNULL(o_PLAN_MARGIN_AMT),
        TO_INTEGER(0),
        o_PLAN_MARGIN_AMT
      ) <> IFF(
        ISNULL(lkp_PLAN_MARGIN_AMT),
        TO_INTEGER(0),
        lkp_PLAN_MARGIN_AMT
      )
    )
  )"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("FLT_INS_UPD_RECORDS_10")

# COMMAND ----------
# DBTITLE 1, EXP_INS_UPD_FLG_11


query_11 = f"""SELECT
  o_DAY_DT AS o_DAY_DT,
  o_FISCAL_WK AS o_FISCAL_WK,
  o_COUNTRY_CD AS o_COUNTRY_CD,
  o_ORDER_CHANNEL AS o_ORDER_CHANNEL,
  o_DIGITAL_PLAN_GROUP AS o_DIGITAL_PLAN_GROUP,
  o_PLAN_SALES_AMT AS o_PLAN_SALES_AMT,
  o_PLAN_MARGIN_AMT AS o_PLAN_MARGIN_AMT,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  lkp_DAY_DT AS lkp_DAY_DT,
  lkp_DIGITAL_PLAN_GROUP AS lkp_DIGITAL_PLAN_GROUP,
  lkp_COUNTRY_CD AS lkp_COUNTRY_CD,
  lkp_ORDER_CHANNEL AS lkp_ORDER_CHANNEL,
  lkp_PLAN_SALES_AMT AS lkp_PLAN_SALES_AMT,
  lkp_PLAN_MARGIN_AMT AS lkp_PLAN_MARGIN_AMT,
  lkp_LOAD_TSTMP AS lkp_LOAD_TSTMP,
  IFF(
    (ISNULL(lkp_DIGITAL_PLAN_GROUP))
    OR (ISNULL(lkp_DAY_DT))
    OR (ISNULL(lkp_ORDER_CHANNEL))
    OR (ISNULL(lkp_COUNTRY_CD)),
    '1',
    '2'
  ) AS v_INS_UPD_FLG,
  IFF(
    (ISNULL(lkp_DIGITAL_PLAN_GROUP))
    OR (ISNULL(lkp_DAY_DT))
    OR (ISNULL(lkp_ORDER_CHANNEL))
    OR (ISNULL(lkp_COUNTRY_CD)),
    '1',
    '2'
  ) AS INS_UPD_FLG,
  IFF(ISNULL(lkp_LOAD_TSTMP), now(), o_LOAD_TSTMP) AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FLT_INS_UPD_RECORDS_10"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("EXP_INS_UPD_FLG_11")

# COMMAND ----------
# DBTITLE 1, UPD_Insert_Update_Records_12


query_12 = f"""SELECT
  o_DAY_DT AS o_DAY_DT,
  o_FISCAL_WK AS o_FISCAL_WK,
  o_COUNTRY_CD AS o_COUNTRY_CD,
  o_ORDER_CHANNEL AS o_ORDER_CHANNEL,
  o_DIGITAL_PLAN_GROUP AS o_DIGITAL_PLAN_GROUP,
  o_PLAN_SALES_AMT AS o_PLAN_SALES_AMT,
  o_PLAN_MARGIN_AMT AS o_PLAN_MARGIN_AMT,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  LOAD_TSTMP AS o_LOAD_TSTMP,
  INS_UPD_FLG AS INS_UPD_FLG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(INS_UPD_FLG, '1', 'DD_INSERT', '2', 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  EXP_INS_UPD_FLG_11"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("UPD_Insert_Update_Records_12")

# COMMAND ----------
# DBTITLE 1, DIGITAL_SALES_PLAN_DAY


spark.sql("""MERGE INTO DIGITAL_SALES_PLAN_DAY AS TARGET
USING
  UPD_Insert_Update_Records_12 AS SOURCE ON TARGET.DIGITAL_PLAN_GROUP = SOURCE.o_DIGITAL_PLAN_GROUP
  AND TARGET.ORDER_CHANNEL = SOURCE.o_ORDER_CHANNEL
  AND TARGET.COUNTRY_CD = SOURCE.o_COUNTRY_CD
  AND TARGET.DAY_DT = SOURCE.o_DAY_DT
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.DAY_DT = SOURCE.o_DAY_DT,
  TARGET.FISCAL_WK = SOURCE.o_FISCAL_WK,
  TARGET.COUNTRY_CD = SOURCE.o_COUNTRY_CD,
  TARGET.ORDER_CHANNEL = SOURCE.o_ORDER_CHANNEL,
  TARGET.DIGITAL_PLAN_GROUP = SOURCE.o_DIGITAL_PLAN_GROUP,
  TARGET.PLAN_SALES_AMT = SOURCE.o_PLAN_SALES_AMT,
  TARGET.PLAN_MARGIN_AMT = SOURCE.o_PLAN_MARGIN_AMT,
  TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.FISCAL_WK = SOURCE.o_FISCAL_WK
  AND TARGET.PLAN_SALES_AMT = SOURCE.o_PLAN_SALES_AMT
  AND TARGET.PLAN_MARGIN_AMT = SOURCE.o_PLAN_MARGIN_AMT
  AND TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.DAY_DT,
    TARGET.FISCAL_WK,
    TARGET.COUNTRY_CD,
    TARGET.ORDER_CHANNEL,
    TARGET.DIGITAL_PLAN_GROUP,
    TARGET.PLAN_SALES_AMT,
    TARGET.PLAN_MARGIN_AMT,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.o_DAY_DT,
    SOURCE.o_FISCAL_WK,
    SOURCE.o_COUNTRY_CD,
    SOURCE.o_ORDER_CHANNEL,
    SOURCE.o_DIGITAL_PLAN_GROUP,
    SOURCE.o_PLAN_SALES_AMT,
    SOURCE.o_PLAN_MARGIN_AMT,
    SOURCE.o_UPDATE_TSTMP,
    SOURCE.o_LOAD_TSTMP
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_Digital_Sales_Plan_Day")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_Digital_Sales_Plan_Day", mainWorkflowId, parentName)
