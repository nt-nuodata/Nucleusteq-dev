# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DD_Marketplace_Settled_Txn")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_DD_Marketplace_Settled_Txn", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DD_MARKETPLACE_SETTLED_TXN_0


query_0 = f"""SELECT
  TXN_DT AS TXN_DT,
  TXN_TSTMP AS TXN_TSTMP,
  TXN_TSTMP_UTC AS TXN_TSTMP_UTC,
  LOCATION_ID AS LOCATION_ID,
  DD_DELIVERY_UUID AS DD_DELIVERY_UUID,
  DASHPASS_ORDER_FLAG AS DASHPASS_ORDER_FLAG,
  TREATS_ID AS TREATS_ID,
  ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  APPROVAL_CD AS APPROVAL_CD,
  NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  TXN_AMT AS TXN_AMT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  DD_MARKETPLACE_SETTLED_TXN"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_DD_MARKETPLACE_SETTLED_TXN_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DD_MARKETPLACE_SETTLED_TXN_1


query_1 = f"""SELECT
  TXN_DT AS TXN_DT,
  TXN_TSTMP AS TXN_TSTMP,
  TXN_TSTMP_UTC AS TXN_TSTMP_UTC,
  LOCATION_ID AS LOCATION_ID,
  DD_DELIVERY_UUID AS DD_DELIVERY_UUID,
  DASHPASS_ORDER_FLAG AS DASHPASS_ORDER_FLAG,
  TREATS_ID AS TREATS_ID,
  ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  APPROVAL_CD AS APPROVAL_CD,
  NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  TXN_AMT AS TXN_AMT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DD_MARKETPLACE_SETTLED_TXN_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_DD_MARKETPLACE_SETTLED_TXN_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DD_MARKETPLACE_AUTH_PRE_2


query_2 = f"""SELECT
  TRANSACTION_TIMESTAMP_UTC AS TRANSACTION_TIMESTAMP_UTC,
  TRANSACTION_DATE_LOCAL AS TRANSACTION_DATE_LOCAL,
  TRANSACTION_TIMESTAMP_LOCAL AS TRANSACTION_TIMESTAMP_LOCAL,
  MERCHANT AS MERCHANT,
  EXTERNAL_STORE_NUMBER AS EXTERNAL_STORE_NUMBER,
  TRANSACTION_AMOUNT AS TRANSACTION_AMOUNT,
  ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  DOORDASH_DELIVERY_UUID AS DOORDASH_DELIVERY_UUID,
  DASHPASS_ORDER AS DASHPASS_ORDER,
  APPROVAL_CODE AS APPROVAL_CODE,
  NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  TREATS_ID AS TREATS_ID
FROM
  DD_MARKETPLACE_AUTH_PRE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_DD_MARKETPLACE_AUTH_PRE_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_DD_MARKETPLACE_AUTH_PRE_3


query_3 = f"""SELECT
  TRANSACTION_TIMESTAMP_UTC AS TRANSACTION_TIMESTAMP_UTC,
  TRANSACTION_DATE_LOCAL AS TRANSACTION_DATE_LOCAL,
  TRANSACTION_TIMESTAMP_LOCAL AS TRANSACTION_TIMESTAMP_LOCAL,
  MERCHANT AS MERCHANT,
  EXTERNAL_STORE_NUMBER AS EXTERNAL_STORE_NUMBER,
  TRANSACTION_AMOUNT AS TRANSACTION_AMOUNT,
  ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  DOORDASH_DELIVERY_UUID AS DOORDASH_DELIVERY_UUID,
  DASHPASS_ORDER AS DASHPASS_ORDER,
  APPROVAL_CODE AS APPROVAL_CODE,
  NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  TREATS_ID AS TREATS_ID,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_DD_MARKETPLACE_AUTH_PRE_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_DD_MARKETPLACE_AUTH_PRE_3")

# COMMAND ----------
# DBTITLE 1, EXP_Sources_4


query_4 = f"""SELECT
  IFF (
    IS_NUMBER(EXTERNAL_STORE_NUMBER),
    TO_INTEGER(EXTERNAL_STORE_NUMBER),
    0
  ) AS STORE_NBR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DD_MARKETPLACE_AUTH_PRE_3"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("EXP_Sources_4")

# COMMAND ----------
# DBTITLE 1, LKP_SITE_PROFILE_5


query_5 = f"""SELECT
  SP.LOCATION_ID AS LOCATION_ID,
  ES4.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_Sources_4 ES4
  LEFT JOIN SITE_PROFILE SP ON SP.STORE_NBR = ES4.STORE_NBR"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("LKP_SITE_PROFILE_5")

# COMMAND ----------
# DBTITLE 1, EXP_Output_6


query_6 = f"""SELECT
  IFF(
    IS_DATE(SStDMAP3.TRANSACTION_DATE_LOCAL, 'YYYY-MM-DD'),
    TO_DATE(SStDMAP3.TRANSACTION_DATE_LOCAL, 'YYYY-MM-DD'),
    NULL
  ) AS o_TXN_DT,
  IFF(
    IS_DATE(
      SStDMAP3.TRANSACTION_TIMESTAMP_LOCAL,
      'YYYY-MM-DD HH24:MI:SS'
    ),
    TO_DATE(
      SStDMAP3.TRANSACTION_TIMESTAMP_LOCAL,
      'YYYY-MM-DD HH24:MI:SS'
    ),
    NULL
  ) AS o_TXN_TSTMP,
  SUBSTR(TRANSACTION_TIMESTAMP_UTC, 1, 19) AS v_TRANSACTION_TIMESTAMP_UTC,
  IFF(
    IS_DATE(
      SUBSTR(SStDMAP3.TRANSACTION_TIMESTAMP_UTC, 1, 19),
      'YYYY-MM-DD HH24:MI:SS'
    ),
    TO_DATE(
      SUBSTR(SStDMAP3.TRANSACTION_TIMESTAMP_UTC, 1, 19),
      'YYYY-MM-DD HH24:MI:SS'
    ),
    NULL
  ) AS o_TXN_TSTMP_UTC,
  LSP5.LOCATION_ID AS LOCATION_ID,
  SStDMAP3.DOORDASH_DELIVERY_UUID AS DOORDASH_DELIVERY_UUID,
  SStDMAP3.DASHPASS_ORDER AS DASHPASS_ORDER,
  IFF(
    IS_NUMBER(SStDMAP3.TREATS_ID),
    TO_BIGINT(SStDMAP3.TREATS_ID),
    NULL
  ) AS o_TREATS_ID,
  SStDMAP3.ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  SStDMAP3.ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  SStDMAP3.APPROVAL_CODE AS APPROVAL_CODE,
  SStDMAP3.NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  SStDMAP3.TRANSACTION_AMOUNT AS TRANSACTION_AMOUNT,
  SStDMAP3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DD_MARKETPLACE_AUTH_PRE_3 SStDMAP3
  INNER JOIN LKP_SITE_PROFILE_5 LSP5 ON SStDMAP3.Monotonically_Increasing_Id = LSP5.Monotonically_Increasing_Id"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("EXP_Output_6")

# COMMAND ----------
# DBTITLE 1, JNR_Lookup_7


query_7 = f"""SELECT
  DETAIL.o_TXN_DT AS o_TXN_DT,
  DETAIL.o_TXN_TSTMP AS o_TXN_TSTMP,
  DETAIL.o_TXN_TSTMP_UTC AS o_TXN_TSTMP_UTC,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.DOORDASH_DELIVERY_UUID AS DOORDASH_DELIVERY_UUID,
  DETAIL.DASHPASS_ORDER AS DASHPASS_ORDER,
  DETAIL.o_TREATS_ID AS o_TREATS_ID,
  DETAIL.ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  DETAIL.ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  DETAIL.APPROVAL_CODE AS APPROVAL_CODE,
  DETAIL.NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  DETAIL.TRANSACTION_AMOUNT AS TRANSACTION_AMOUNT,
  MASTER.TXN_DT AS lkp_TXN_DT,
  MASTER.TXN_TSTMP AS lkp_TXN_TSTMP,
  MASTER.TXN_TSTMP_UTC AS lkp_TXN_TSTMP_UTC,
  MASTER.LOCATION_ID AS lkp_LOCATION_ID,
  MASTER.DD_DELIVERY_UUID AS lkp_DD_DELIVERY_UUID,
  MASTER.DASHPASS_ORDER_FLAG AS lkp_DASHPASS_ORDER_FLAG,
  MASTER.TREATS_ID AS lkp_TREATS_ID,
  MASTER.ACTING_CARD_FIRST_SIX AS lkp_ACTING_CARD_FIRST_SIX,
  MASTER.ACTING_CARD_LAST_FOUR AS lkp_ACTING_CARD_LAST_FOUR,
  MASTER.APPROVAL_CD AS lkp_APPROVAL_CD,
  MASTER.NETWORK_REFERENCE_ID AS lkp_NETWORK_REFERENCE_ID,
  MASTER.TXN_AMT AS lkp_TXN_AMT,
  MASTER.UPDATE_TSTMP AS lkp_UPDATE_TSTMP,
  MASTER.LOAD_TSTMP AS lkp_LOAD_TSTMP,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_DD_MARKETPLACE_SETTLED_TXN_1 MASTER
  RIGHT JOIN EXP_Output_6 DETAIL ON MASTER.TXN_DT = DETAIL.o_TXN_DT
  AND MASTER.LOCATION_ID = DETAIL.LOCATION_ID
  AND MASTER.DD_DELIVERY_UUID = DETAIL.DOORDASH_DELIVERY_UUID
  AND MASTER.APPROVAL_CD = DETAIL.APPROVAL_CODE"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("JNR_Lookup_7")

# COMMAND ----------
# DBTITLE 1, EXP_Target_8


query_8 = f"""SELECT
  o_TXN_DT AS o_TXN_DT,
  o_TXN_TSTMP AS o_TXN_TSTMP,
  o_TXN_TSTMP_UTC AS o_TXN_TSTMP_UTC,
  LOCATION_ID AS LOCATION_ID,
  DOORDASH_DELIVERY_UUID AS DOORDASH_DELIVERY_UUID,
  DASHPASS_ORDER AS DASHPASS_ORDER,
  o_TREATS_ID AS o_TREATS_ID,
  ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  APPROVAL_CODE AS APPROVAL_CODE,
  NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  TRANSACTION_AMOUNT AS TRANSACTION_AMOUNT,
  SESSSTARTTIME AS UPDATE_TSTMP,
  IFF(
    ISNULL(lkp_LOAD_TSTMP),
    SESSSTARTTIME,
    lkp_LOAD_TSTMP
  ) AS o_LOAD_TSTMP,
  IFF(
    ISNULL(lkp_TXN_DT),
    1,
    IFF (
      NOT ISNULL(lkp_TXN_DT)
      AND (
        IFF (ISNULL(o_TXN_TSTMP), now(), o_TXN_TSTMP) <> IFF (ISNULL(lkp_TXN_TSTMP), now(), lkp_TXN_TSTMP)
        OR IFF (ISNULL(o_TXN_TSTMP_UTC), now(), o_TXN_TSTMP_UTC) <> IFF (
          ISNULL(lkp_TXN_TSTMP_UTC),
          now(),
          lkp_TXN_TSTMP_UTC
        )
        OR IFF (
          ISNULL(DOORDASH_DELIVERY_UUID),
          ' ',
          DOORDASH_DELIVERY_UUID
        ) <> IFF (
          ISNULL(lkp_DD_DELIVERY_UUID),
          ' ',
          lkp_DD_DELIVERY_UUID
        )
        OR IFF (ISNULL(DASHPASS_ORDER), 9, DASHPASS_ORDER) <> IFF (
          ISNULL(lkp_DASHPASS_ORDER_FLAG),
          9,
          lkp_DASHPASS_ORDER_FLAG
        )
        OR IFF (ISNULL(o_TREATS_ID), 99999999999, o_TREATS_ID) <> IFF (ISNULL(lkp_TREATS_ID), 99999999999, lkp_TREATS_ID)
        OR IFF (
          ISNULL(ACTING_CARD_FIRST_SIX),
          ' ',
          ACTING_CARD_FIRST_SIX
        ) <> IFF (
          ISNULL(lkp_ACTING_CARD_FIRST_SIX),
          ' ',
          lkp_ACTING_CARD_FIRST_SIX
        )
        OR IFF (
          ISNULL(ACTING_CARD_LAST_FOUR),
          ' ',
          ACTING_CARD_LAST_FOUR
        ) <> IFF (
          ISNULL(lkp_ACTING_CARD_LAST_FOUR),
          ' ',
          lkp_ACTING_CARD_LAST_FOUR
        )
        OR IFF (
          ISNULL(NETWORK_REFERENCE_ID),
          ' ',
          NETWORK_REFERENCE_ID
        ) <> IFF (
          ISNULL(lkp_NETWORK_REFERENCE_ID),
          ' ',
          lkp_NETWORK_REFERENCE_ID
        )
        OR IFF (
          ISNULL(TRANSACTION_AMOUNT),
          99999999999.99,
          TRANSACTION_AMOUNT
        ) <> IFF (ISNULL(lkp_TXN_AMT), 99999999999.99, lkp_TXN_AMT)
      ),
      2,
      0
    )
  ) AS o_Flag,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_Lookup_7"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("EXP_Target_8")

# COMMAND ----------
# DBTITLE 1, FIL_Logic_9


query_9 = f"""SELECT
  o_TXN_DT AS o_TXN_DT,
  o_TXN_TSTMP AS o_TXN_TSTMP,
  o_TXN_TSTMP_UTC AS o_TXN_TSTMP_UTC,
  LOCATION_ID AS LOCATION_ID,
  DOORDASH_DELIVERY_UUID AS DOORDASH_DELIVERY_UUID,
  DASHPASS_ORDER AS DASHPASS_ORDER,
  o_TREATS_ID AS o_TREATS_ID,
  ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  APPROVAL_CODE AS APPROVAL_CODE,
  NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  TRANSACTION_AMOUNT AS TRANSACTION_AMOUNT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  o_Flag AS o_Flag,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_Target_8
WHERE
  o_Flag = 1
  OR o_Flag = 2"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("FIL_Logic_9")

# COMMAND ----------
# DBTITLE 1, UPD_Target_10


query_10 = f"""SELECT
  o_TXN_DT AS o_TXN_DT,
  o_TXN_TSTMP AS o_TXN_TSTMP,
  o_TXN_TSTMP_UTC AS o_TXN_TSTMP_UTC,
  LOCATION_ID AS LOCATION_ID,
  DOORDASH_DELIVERY_UUID AS DOORDASH_DELIVERY_UUID,
  DASHPASS_ORDER AS DASHPASS_ORDER,
  o_TREATS_ID AS o_TREATS_ID,
  ACTING_CARD_FIRST_SIX AS ACTING_CARD_FIRST_SIX,
  ACTING_CARD_LAST_FOUR AS ACTING_CARD_LAST_FOUR,
  APPROVAL_CODE AS APPROVAL_CODE,
  NETWORK_REFERENCE_ID AS NETWORK_REFERENCE_ID,
  TRANSACTION_AMOUNT AS TRANSACTION_AMOUNT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  o_Flag AS o_Flag,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(o_Flag, 1, 'DD_INSERT', 2, 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  FIL_Logic_9"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("UPD_Target_10")

# COMMAND ----------
# DBTITLE 1, DD_MARKETPLACE_SETTLED_TXN


spark.sql("""MERGE INTO DD_MARKETPLACE_SETTLED_TXN AS TARGET
USING
  UPD_Target_10 AS SOURCE ON TARGET.LOCATION_ID = SOURCE.LOCATION_ID
  AND TARGET.APPROVAL_CD = SOURCE.APPROVAL_CODE
  AND TARGET.TXN_DT = SOURCE.o_TXN_DT
  AND TARGET.DD_DELIVERY_UUID = SOURCE.DOORDASH_DELIVERY_UUID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.TXN_DT = SOURCE.o_TXN_DT,
  TARGET.TXN_TSTMP = SOURCE.o_TXN_TSTMP,
  TARGET.TXN_TSTMP_UTC = SOURCE.o_TXN_TSTMP_UTC,
  TARGET.LOCATION_ID = SOURCE.LOCATION_ID,
  TARGET.DD_DELIVERY_UUID = SOURCE.DOORDASH_DELIVERY_UUID,
  TARGET.DASHPASS_ORDER_FLAG = SOURCE.DASHPASS_ORDER,
  TARGET.TREATS_ID = SOURCE.o_TREATS_ID,
  TARGET.ACTING_CARD_FIRST_SIX = SOURCE.ACTING_CARD_FIRST_SIX,
  TARGET.ACTING_CARD_LAST_FOUR = SOURCE.ACTING_CARD_LAST_FOUR,
  TARGET.APPROVAL_CD = SOURCE.APPROVAL_CODE,
  TARGET.NETWORK_REFERENCE_ID = SOURCE.NETWORK_REFERENCE_ID,
  TARGET.TXN_AMT = SOURCE.TRANSACTION_AMOUNT,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.TXN_TSTMP = SOURCE.o_TXN_TSTMP
  AND TARGET.TXN_TSTMP_UTC = SOURCE.o_TXN_TSTMP_UTC
  AND TARGET.DASHPASS_ORDER_FLAG = SOURCE.DASHPASS_ORDER
  AND TARGET.TREATS_ID = SOURCE.o_TREATS_ID
  AND TARGET.ACTING_CARD_FIRST_SIX = SOURCE.ACTING_CARD_FIRST_SIX
  AND TARGET.ACTING_CARD_LAST_FOUR = SOURCE.ACTING_CARD_LAST_FOUR
  AND TARGET.NETWORK_REFERENCE_ID = SOURCE.NETWORK_REFERENCE_ID
  AND TARGET.TXN_AMT = SOURCE.TRANSACTION_AMOUNT
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.TXN_DT,
    TARGET.TXN_TSTMP,
    TARGET.TXN_TSTMP_UTC,
    TARGET.LOCATION_ID,
    TARGET.DD_DELIVERY_UUID,
    TARGET.DASHPASS_ORDER_FLAG,
    TARGET.TREATS_ID,
    TARGET.ACTING_CARD_FIRST_SIX,
    TARGET.ACTING_CARD_LAST_FOUR,
    TARGET.APPROVAL_CD,
    TARGET.NETWORK_REFERENCE_ID,
    TARGET.TXN_AMT,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.o_TXN_DT,
    SOURCE.o_TXN_TSTMP,
    SOURCE.o_TXN_TSTMP_UTC,
    SOURCE.LOCATION_ID,
    SOURCE.DOORDASH_DELIVERY_UUID,
    SOURCE.DASHPASS_ORDER,
    SOURCE.o_TREATS_ID,
    SOURCE.ACTING_CARD_FIRST_SIX,
    SOURCE.ACTING_CARD_LAST_FOUR,
    SOURCE.APPROVAL_CODE,
    SOURCE.NETWORK_REFERENCE_ID,
    SOURCE.TRANSACTION_AMOUNT,
    SOURCE.UPDATE_TSTMP,
    SOURCE.o_LOAD_TSTMP
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DD_Marketplace_Settled_Txn")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_DD_Marketplace_Settled_Txn", mainWorkflowId, parentName)
