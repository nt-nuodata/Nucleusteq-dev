# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_Site_Order_Channel_SLA_Day_Pre")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_Site_Order_Channel_SLA_Day_Pre", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_ORDER_CHANNEL_SLA_0


query_0 = f"""SELECT
  START_DT AS START_DT,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  RULE_NBR AS RULE_NBR,
  END_DT AS END_DT,
  RULE_DESC AS RULE_DESC,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  WEEKEND_FLAG AS WEEKEND_FLAG,
  CLOSE_FLAG AS CLOSE_FLAG,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  START_LOCATION_OPEN_TSTMP_FLAG AS START_LOCATION_OPEN_TSTMP_FLAG,
  START_LOCATION_CLOSE_TSTMP_FLAG AS START_LOCATION_CLOSE_TSTMP_FLAG,
  START_TSTMP_ADJ_HOUR AS START_TSTMP_ADJ_HOUR,
  END_LOCATION_OPEN_TSTMP_FLAG AS END_LOCATION_OPEN_TSTMP_FLAG,
  END_LOCATION_CLOSE_TSTMP_FLAG AS END_LOCATION_CLOSE_TSTMP_FLAG,
  END_TSTMP_ADJ_HOUR AS END_TSTMP_ADJ_HOUR,
  SLA_SAME_DAY_FLAG AS SLA_SAME_DAY_FLAG,
  SLA_NEXT_OPEN_DAY_FLAG AS SLA_NEXT_OPEN_DAY_FLAG,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  SLA_LOCATION_OPEN_TSTMP_FLAG AS SLA_LOCATION_OPEN_TSTMP_FLAG,
  SLA_TSTMP_ADJ_HOUR AS SLA_TSTMP_ADJ_HOUR,
  UPDATE_USER AS UPDATE_USER,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SITE_ORDER_CHANNEL_SLA"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_SITE_ORDER_CHANNEL_SLA_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_ORDER_CHANNEL_SLA_1


query_1 = f"""SELECT
  START_DT AS START_DT,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  RULE_NBR AS RULE_NBR,
  END_DT AS END_DT,
  RULE_DESC AS RULE_DESC,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  WEEKEND_FLAG AS WEEKEND_FLAG,
  CLOSE_FLAG AS CLOSE_FLAG,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  START_LOCATION_OPEN_TSTMP_FLAG AS START_LOCATION_OPEN_TSTMP_FLAG,
  START_LOCATION_CLOSE_TSTMP_FLAG AS START_LOCATION_CLOSE_TSTMP_FLAG,
  START_TSTMP_ADJ_HOUR AS START_TSTMP_ADJ_HOUR,
  END_LOCATION_OPEN_TSTMP_FLAG AS END_LOCATION_OPEN_TSTMP_FLAG,
  END_LOCATION_CLOSE_TSTMP_FLAG AS END_LOCATION_CLOSE_TSTMP_FLAG,
  END_TSTMP_ADJ_HOUR AS END_TSTMP_ADJ_HOUR,
  SLA_SAME_DAY_FLAG AS SLA_SAME_DAY_FLAG,
  SLA_NEXT_OPEN_DAY_FLAG AS SLA_NEXT_OPEN_DAY_FLAG,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  SLA_LOCATION_OPEN_TSTMP_FLAG AS SLA_LOCATION_OPEN_TSTMP_FLAG,
  SLA_TSTMP_ADJ_HOUR AS SLA_TSTMP_ADJ_HOUR,
  UPDATE_USER AS UPDATE_USER,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_ORDER_CHANNEL_SLA_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_SITE_ORDER_CHANNEL_SLA_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_HOURS_DAY_2


query_2 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SITE_HOURS_DAY"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_SITE_HOURS_DAY_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_HOURS_DAY3_3


query_3 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_HOURS_DAY_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_SITE_HOURS_DAY3_3")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_HOURS_DAY2_4


query_4 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SITE_HOURS_DAY"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("Shortcut_to_SITE_HOURS_DAY2_4")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_HOURS_DAY1_5


query_5 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_HOURS_DAY2_4"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("SQ_Shortcut_to_SITE_HOURS_DAY1_5")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_HOURS_DAY1_6


query_6 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SITE_HOURS_DAY"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("Shortcut_to_SITE_HOURS_DAY1_6")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_HOURS_DAY_7


query_7 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_HOURS_DAY1_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("SQ_Shortcut_to_SITE_HOURS_DAY_7")

# COMMAND ----------
# DBTITLE 1, Jnr_Site_Hours_Day_For_Next_Day_8


query_8 = f"""SELECT
  DETAIL.DAY_DT AS DAY_DT,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.BUSINESS_AREA AS BUSINESS_AREA,
  MASTER.DAY_DT AS DAY_DT1,
  MASTER.LOCATION_ID AS LOCATION_ID1,
  MASTER.BUSINESS_AREA AS BUSINESS_AREA1,
  MASTER.CLOSE_FLAG AS CLOSE_FLAG,
  MASTER.OPEN_TSTMP AS OPEN_TSTMP,
  MASTER.CLOSE_TSTMP AS CLOSE_TSTMP,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_SITE_HOURS_DAY1_5 MASTER
  INNER JOIN SQ_Shortcut_to_SITE_HOURS_DAY_7 DETAIL ON MASTER.LOCATION_ID = DETAIL.LOCATION_ID
  AND MASTER.BUSINESS_AREA = DETAIL.BUSINESS_AREA"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("Jnr_Site_Hours_Day_For_Next_Day_8")

# COMMAND ----------
# DBTITLE 1, Srt_Distinct_9


query_9 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  DAY_DT1 AS DAY_DT1,
  CLOSE_FLAG AS CLOSE_FLAG,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  BUSINESS_AREA1 AS BUSINESS_AREA1,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Jnr_Site_Hours_Day_For_Next_Day_8
ORDER BY
  DAY_DT ASC,
  LOCATION_ID ASC,
  BUSINESS_AREA ASC,
  DAY_DT1 ASC,
  CLOSE_FLAG ASC,
  OPEN_TSTMP ASC,
  CLOSE_TSTMP ASC,
  BUSINESS_AREA1 ASC,
  UPDATE_TSTMP ASC"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("Srt_Distinct_9")

# COMMAND ----------
# DBTITLE 1, Fil_Close_Flag_10


query_10 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  DAY_DT1 AS DAY_DT1,
  CLOSE_FLAG AS CLOSE_FLAG,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  BUSINESS_AREA AS BUSINESS_AREA,
  BUSINESS_AREA1 AS BUSINESS_AREA1,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Srt_Distinct_9
WHERE
  CLOSE_FLAG = 0
  and DAY_DT < DAY_DT1
  AND (
    DAY_DT >= ADD_TO_DATE(TRUNC(now()), 'DD', -1)
    OR UPDATE_TSTMP > ADD_TO_DATE(TRUNC(now()), 'DD', -1)
  )
  AND (
    BUSINESS_AREA = 'Store'
    OR BUSINESS_AREA = 'DC'
    OR BUSINESS_AREA = 'Vendor'
  )
  AND (
    BUSINESS_AREA1 = 'Store'
    OR BUSINESS_AREA1 = 'DC'
    OR BUSINESS_AREA1 = 'Vendor'
  )"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("Fil_Close_Flag_10")

# COMMAND ----------
# DBTITLE 1, Agg_Next_Day_11


query_11 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  MIN(DAY_DT1) AS Next_Day_DAY_DT,
  MIN(OPEN_TSTMP) AS Next_Day_OPEN_TSTMP,
  MIN(CLOSE_TSTMP) AS Next_day_CLOSE_TSTMP,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  Fil_Close_Flag_10
GROUP BY
  DAY_DT,
  LOCATION_ID"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("Agg_Next_Day_11")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_HOURS_DAY11_12


query_12 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SITE_HOURS_DAY"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("Shortcut_to_SITE_HOURS_DAY11_12")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_HOURS_DAY2_13


query_13 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_HOURS_DAY11_12"""

df_13 = spark.sql(query_13)

df_13.createOrReplaceTempView("SQ_Shortcut_to_SITE_HOURS_DAY2_13")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_HOURS_DAY21_14


query_14 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SITE_HOURS_DAY"""

df_14 = spark.sql(query_14)

df_14.createOrReplaceTempView("Shortcut_to_SITE_HOURS_DAY21_14")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_HOURS_DAY11_15


query_15 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_HOURS_DAY21_14"""

df_15 = spark.sql(query_15)

df_15.createOrReplaceTempView("SQ_Shortcut_to_SITE_HOURS_DAY11_15")

# COMMAND ----------
# DBTITLE 1, Shortcut_To_DAYS_16


query_16 = f"""SELECT
  DAY_DT AS DAY_DT,
  BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  DAY_OF_WK_NAME AS DAY_OF_WK_NAME,
  DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,
  CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,
  CAL_WK AS CAL_WK,
  CAL_WK_NBR AS CAL_WK_NBR,
  CAL_MO AS CAL_MO,
  CAL_MO_NBR AS CAL_MO_NBR,
  CAL_MO_NAME AS CAL_MO_NAME,
  CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,
  CAL_QTR AS CAL_QTR,
  CAL_QTR_NBR AS CAL_QTR_NBR,
  CAL_HALF AS CAL_HALF,
  CAL_YR AS CAL_YR,
  FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,
  FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,
  FISCAL_WK AS FISCAL_WK,
  FISCAL_WK_NBR AS FISCAL_WK_NBR,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_MO_NBR AS FISCAL_MO_NBR,
  FISCAL_MO_NAME AS FISCAL_MO_NAME,
  FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,
  FISCAL_QTR AS FISCAL_QTR,
  FISCAL_QTR_NBR AS FISCAL_QTR_NBR,
  FISCAL_HALF AS FISCAL_HALF,
  FISCAL_YR AS FISCAL_YR,
  LYR_WEEK_DT AS LYR_WEEK_DT,
  LWK_WEEK_DT AS LWK_WEEK_DT,
  WEEK_DT AS WEEK_DT,
  EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,
  EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,
  ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,
  ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,
  CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,
  CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,
  CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,
  CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,
  MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,
  MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,
  MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,
  MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,
  PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,
  PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS
FROM
  DAYS"""

df_16 = spark.sql(query_16)

df_16.createOrReplaceTempView("Shortcut_To_DAYS_16")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_To_DAYS_17


query_17 = f"""SELECT
  DAY_DT AS DAY_DT,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_To_DAYS_16"""

df_17 = spark.sql(query_17)

df_17.createOrReplaceTempView("SQ_Shortcut_To_DAYS_17")

# COMMAND ----------
# DBTITLE 1, EXP_Weekend_Flag_18


query_18 = f"""SELECT
  DAY_DT AS DAY_DT,
  IFF(
    DAY_OF_WK_NBR = 6
    OR DAY_OF_WK_NBR = 7,
    1,
    0
  ) AS WEEKEND_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_To_DAYS_17"""

df_18 = spark.sql(query_18)

df_18.createOrReplaceTempView("EXP_Weekend_Flag_18")

# COMMAND ----------
# DBTITLE 1, JNR_Weekend_Flag_19


query_19 = f"""SELECT
  DETAIL.DAY_DT AS DAY_DT,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.BUSINESS_AREA AS BUSINESS_AREA,
  DETAIL.CLOSE_FLAG AS CLOSE_FLAG,
  DETAIL.OPEN_TSTMP AS OPEN_TSTMP,
  DETAIL.CLOSE_TSTMP AS CLOSE_TSTMP,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  MASTER.DAY_DT AS days_DAY_DT,
  MASTER.WEEKEND_FLAG AS WEEKEND_FLAG,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_Weekend_Flag_18 MASTER
  RIGHT JOIN SQ_Shortcut_to_SITE_HOURS_DAY11_15 DETAIL ON MASTER.DAY_DT = DETAIL.DAY_DT"""

df_19 = spark.sql(query_19)

df_19.createOrReplaceTempView("JNR_Weekend_Flag_19")

# COMMAND ----------
# DBTITLE 1, Jnr_Site_Hours_Day_For_Next_Day_No_Weekend_20


query_20 = f"""SELECT
  DETAIL.DAY_DT AS DAY_DT,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.BUSINESS_AREA AS BUSINESS_AREA,
  MASTER.DAY_DT AS DAY_DT1,
  MASTER.LOCATION_ID AS LOCATION_ID1,
  MASTER.BUSINESS_AREA AS BUSINESS_AREA1,
  MASTER.CLOSE_FLAG AS CLOSE_FLAG,
  MASTER.WEEKEND_FLAG AS WEEKEND_FLAG,
  MASTER.OPEN_TSTMP AS OPEN_TSTMP,
  MASTER.CLOSE_TSTMP AS CLOSE_TSTMP,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_Weekend_Flag_19 MASTER
  INNER JOIN SQ_Shortcut_to_SITE_HOURS_DAY2_13 DETAIL ON MASTER.LOCATION_ID = DETAIL.LOCATION_ID
  AND MASTER.BUSINESS_AREA = DETAIL.BUSINESS_AREA"""

df_20 = spark.sql(query_20)

df_20.createOrReplaceTempView("Jnr_Site_Hours_Day_For_Next_Day_No_Weekend_20")

# COMMAND ----------
# DBTITLE 1, Srt_Distinct_No_Weekend_21


query_21 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  DAY_DT1 AS DAY_DT1,
  CLOSE_FLAG AS CLOSE_FLAG,
  WEEKEND_FLAG AS WEEKEND_FLAG,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  BUSINESS_AREA1 AS BUSINESS_AREA1,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Jnr_Site_Hours_Day_For_Next_Day_No_Weekend_20
ORDER BY
  DAY_DT ASC,
  LOCATION_ID ASC,
  BUSINESS_AREA ASC,
  DAY_DT1 ASC,
  CLOSE_FLAG ASC,
  WEEKEND_FLAG ASC,
  OPEN_TSTMP ASC,
  CLOSE_TSTMP ASC,
  BUSINESS_AREA1 ASC,
  UPDATE_TSTMP ASC"""

df_21 = spark.sql(query_21)

df_21.createOrReplaceTempView("Srt_Distinct_No_Weekend_21")

# COMMAND ----------
# DBTITLE 1, Fil_Close_Flag_Weekend_Flag_22


query_22 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  DAY_DT1 AS DAY_DT1,
  CLOSE_FLAG AS CLOSE_FLAG,
  WEEKEND_FLAG AS WEEKEND_FLAG,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  BUSINESS_AREA AS BUSINESS_AREA,
  BUSINESS_AREA1 AS BUSINESS_AREA1,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Srt_Distinct_No_Weekend_21
WHERE
  CLOSE_FLAG = 0
  AND WEEKEND_FLAG = 0
  and DAY_DT < DAY_DT1
  AND (
    DAY_DT >= ADD_TO_DATE(TRUNC(now()), 'DD', -1)
    OR UPDATE_TSTMP > ADD_TO_DATE(TRUNC(now()), 'DD', -1)
  )
  AND (
    BUSINESS_AREA = 'Store'
    OR BUSINESS_AREA = 'DC'
    OR BUSINESS_AREA = 'Vendor'
  )
  AND (
    BUSINESS_AREA1 = 'Store'
    OR BUSINESS_AREA1 = 'DC'
    OR BUSINESS_AREA1 = 'Vendor'
  )"""

df_22 = spark.sql(query_22)

df_22.createOrReplaceTempView("Fil_Close_Flag_Weekend_Flag_22")

# COMMAND ----------
# DBTITLE 1, Agg_Next_No_Weekend_Day_23


query_23 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  MIN(DAY_DT1) AS Next_No_Weekend_Day_DAY_DT,
  MIN(OPEN_TSTMP) AS Next_No_Weekend_Day_OPEN_TSTMP,
  MIN(CLOSE_TSTMP) AS Next_No_Weekend_Day_CLOSE_TSTMP,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  Fil_Close_Flag_Weekend_Flag_22
GROUP BY
  DAY_DT,
  LOCATION_ID"""

df_23 = spark.sql(query_23)

df_23.createOrReplaceTempView("Agg_Next_No_Weekend_Day_23")

# COMMAND ----------
# DBTITLE 1, JNR_Next_Day_Weekend_or_Close_24


query_24 = f"""SELECT
  DETAIL.DAY_DT AS DAY_DT,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.Next_Day_DAY_DT AS Next_Day_DAY_DT,
  DETAIL.Next_Day_OPEN_TSTMP AS Next_Day_OPEN_TSTMP,
  DETAIL.Next_day_CLOSE_TSTMP AS Next_day_CLOSE_TSTMP,
  MASTER.Next_No_Weekend_Day_DAY_DT AS Next_No_Weekend_Day_DAY_DT,
  MASTER.Next_No_Weekend_Day_OPEN_TSTMP AS Next_No_Weekend_Day_OPEN_TSTMP,
  MASTER.Next_No_Weekend_Day_CLOSE_TSTMP AS Next_No_Weekend_Day_CLOSE_TSTMP,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Agg_Next_No_Weekend_Day_23 MASTER
  INNER JOIN Agg_Next_Day_11 DETAIL ON MASTER.DAY_DT = DETAIL.DAY_DT
  AND MASTER.LOCATION_ID = DETAIL.LOCATION_ID"""

df_24 = spark.sql(query_24)

df_24.createOrReplaceTempView("JNR_Next_Day_Weekend_or_Close_24")

# COMMAND ----------
# DBTITLE 1, Shortcut_To_DAYS1_25


query_25 = f"""SELECT
  DAY_DT AS DAY_DT,
  BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  DAY_OF_WK_NAME AS DAY_OF_WK_NAME,
  DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,
  CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,
  CAL_WK AS CAL_WK,
  CAL_WK_NBR AS CAL_WK_NBR,
  CAL_MO AS CAL_MO,
  CAL_MO_NBR AS CAL_MO_NBR,
  CAL_MO_NAME AS CAL_MO_NAME,
  CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,
  CAL_QTR AS CAL_QTR,
  CAL_QTR_NBR AS CAL_QTR_NBR,
  CAL_HALF AS CAL_HALF,
  CAL_YR AS CAL_YR,
  FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,
  FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,
  FISCAL_WK AS FISCAL_WK,
  FISCAL_WK_NBR AS FISCAL_WK_NBR,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_MO_NBR AS FISCAL_MO_NBR,
  FISCAL_MO_NAME AS FISCAL_MO_NAME,
  FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,
  FISCAL_QTR AS FISCAL_QTR,
  FISCAL_QTR_NBR AS FISCAL_QTR_NBR,
  FISCAL_HALF AS FISCAL_HALF,
  FISCAL_YR AS FISCAL_YR,
  LYR_WEEK_DT AS LYR_WEEK_DT,
  LWK_WEEK_DT AS LWK_WEEK_DT,
  WEEK_DT AS WEEK_DT,
  EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,
  EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,
  ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,
  ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,
  CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,
  CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,
  CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,
  CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,
  MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,
  MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,
  MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,
  MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,
  PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,
  PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS
FROM
  DAYS"""

df_25 = spark.sql(query_25)

df_25.createOrReplaceTempView("Shortcut_To_DAYS1_25")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_To_DAYS1_26


query_26 = f"""SELECT
  DAY_DT AS DAY_DT,
  BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  DAY_OF_WK_NAME AS DAY_OF_WK_NAME,
  DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,
  CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,
  CAL_WK AS CAL_WK,
  CAL_WK_NBR AS CAL_WK_NBR,
  CAL_MO AS CAL_MO,
  CAL_MO_NBR AS CAL_MO_NBR,
  CAL_MO_NAME AS CAL_MO_NAME,
  CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,
  CAL_QTR AS CAL_QTR,
  CAL_QTR_NBR AS CAL_QTR_NBR,
  CAL_HALF AS CAL_HALF,
  CAL_YR AS CAL_YR,
  FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,
  FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,
  FISCAL_WK AS FISCAL_WK,
  FISCAL_WK_NBR AS FISCAL_WK_NBR,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_MO_NBR AS FISCAL_MO_NBR,
  FISCAL_MO_NAME AS FISCAL_MO_NAME,
  FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,
  FISCAL_QTR AS FISCAL_QTR,
  FISCAL_QTR_NBR AS FISCAL_QTR_NBR,
  FISCAL_HALF AS FISCAL_HALF,
  FISCAL_YR AS FISCAL_YR,
  LYR_WEEK_DT AS LYR_WEEK_DT,
  LWK_WEEK_DT AS LWK_WEEK_DT,
  WEEK_DT AS WEEK_DT,
  EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,
  EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,
  ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,
  ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,
  CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,
  CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,
  CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,
  CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,
  MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,
  MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,
  MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,
  MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,
  PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,
  PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_To_DAYS1_25"""

df_26 = spark.sql(query_26)

df_26.createOrReplaceTempView("SQ_Shortcut_To_DAYS1_26")

# COMMAND ----------
# DBTITLE 1, JNR_DAY_OF_WEEK_27


query_27 = f"""SELECT
  DETAIL.DAY_DT AS DAY_DT,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.BUSINESS_AREA AS BUSINESS_AREA,
  DETAIL.LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  DETAIL.STORE_NBR AS STORE_NBR,
  DETAIL.CLOSE_FLAG AS CLOSE_FLAG,
  DETAIL.OPEN_TSTMP AS OPEN_TSTMP,
  DETAIL.CLOSE_TSTMP AS CLOSE_TSTMP,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  MASTER.DAY_DT AS DAY_DT1,
  MASTER.DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_To_DAYS1_26 MASTER
  RIGHT JOIN SQ_Shortcut_to_SITE_HOURS_DAY3_3 DETAIL ON MASTER.DAY_DT = DETAIL.DAY_DT"""

df_27 = spark.sql(query_27)

df_27.createOrReplaceTempView("JNR_DAY_OF_WEEK_27")

# COMMAND ----------
# DBTITLE 1, EXP_Weekend_Flag1_28


query_28 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  IFF(
    DAY_OF_WK_NBR = 6
    OR DAY_OF_WK_NBR = 7,
    1,
    0
  ) AS WEEKEND_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_DAY_OF_WEEK_27"""

df_28 = spark.sql(query_28)

df_28.createOrReplaceTempView("EXP_Weekend_Flag1_28")

# COMMAND ----------
# DBTITLE 1, Jnr_Site_Order_SLA_Site_Hours_Day_29


query_29 = f"""SELECT
  DETAIL.START_DT AS START_DT,
  DETAIL.LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  DETAIL.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  DETAIL.RULE_NBR AS RULE_NBR,
  DETAIL.END_DT AS END_DT,
  DETAIL.RULE_DESC AS RULE_DESC,
  DETAIL.HOLIDAY_FLAG AS HOLIDAY_FLAG,
  DETAIL.WEEKEND_FLAG AS WEEKEND_FLAG,
  DETAIL.CLOSE_FLAG AS CLOSE_FLAG,
  DETAIL.START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  DETAIL.END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  DETAIL.START_LOCATION_OPEN_TSTMP_FLAG AS START_LOCATION_OPEN_TSTMP_FLAG,
  DETAIL.START_LOCATION_CLOSE_TSTMP_FLAG AS START_LOCATION_CLOSE_TSTMP_FLAG,
  DETAIL.START_TSTMP_ADJ_HOUR AS START_TSTMP_ADJ_HOUR,
  DETAIL.END_LOCATION_OPEN_TSTMP_FLAG AS END_LOCATION_OPEN_TSTMP_FLAG,
  DETAIL.END_LOCATION_CLOSE_TSTMP_FLAG AS END_LOCATION_CLOSE_TSTMP_FLAG,
  DETAIL.END_TSTMP_ADJ_HOUR AS END_TSTMP_ADJ_HOUR,
  DETAIL.SLA_SAME_DAY_FLAG AS SLA_SAME_DAY_FLAG,
  DETAIL.SLA_NEXT_OPEN_DAY_FLAG AS SLA_NEXT_OPEN_DAY_FLAG,
  DETAIL.SLA_TSTMP AS SLA_TSTMP,
  DETAIL.SLA_TIME_HOUR AS SLA_TIME_HOUR,
  DETAIL.SLA_LOCATION_OPEN_TSTMP_FLAG AS SLA_LOCATION_OPEN_TSTMP_FLAG,
  DETAIL.SLA_TSTMP_ADJ_HOUR AS SLA_TSTMP_ADJ_HOUR,
  DETAIL.UPDATE_USER AS UPDATE_USER,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  MASTER.DAY_DT AS DAY_DT1,
  MASTER.LOCATION_ID AS LOCATION_ID1,
  MASTER.STORE_NBR AS STORE_NBR,
  MASTER.OPEN_TSTMP AS OPEN_TSTMP1,
  MASTER.CLOSE_TSTMP AS CLOSE_TSTMP1,
  MASTER.LOCATION_TYPE_ID AS LOCATION_TYPE_ID1,
  MASTER.CLOSE_FLAG AS CLOSE_FLAG1,
  MASTER.BUSINESS_AREA AS BUSINESS_AREA,
  MASTER.UPDATE_TSTMP AS UPDATE_TSTMP1,
  MASTER.WEEKEND_FLAG AS WEEKEND_FLAG1,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_Weekend_Flag1_28 MASTER
  INNER JOIN SQ_Shortcut_to_SITE_ORDER_CHANNEL_SLA_1 DETAIL ON MASTER.LOCATION_TYPE_ID = DETAIL.LOCATION_TYPE_ID"""

df_29 = spark.sql(query_29)

df_29.createOrReplaceTempView("Jnr_Site_Order_SLA_Site_Hours_Day_29")

# COMMAND ----------
# DBTITLE 1, Fil_Site_Hours_Day_Site_Order_SLA_30


query_30 = f"""SELECT
  START_DT AS START_DT,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  RULE_NBR AS RULE_NBR,
  END_DT AS END_DT,
  RULE_DESC AS RULE_DESC,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  WEEKEND_FLAG AS WEEKEND_FLAG,
  CLOSE_FLAG AS CLOSE_FLAG,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  START_LOCATION_OPEN_TSTMP_FLAG AS START_LOCATION_OPEN_TSTMP_FLAG,
  START_LOCATION_CLOSE_TSTMP_FLAG AS START_LOCATION_CLOSE_TSTMP_FLAG,
  START_TSTMP_ADJ_HOUR AS START_TSTMP_ADJ_HOUR,
  END_LOCATION_OPEN_TSTMP_FLAG AS END_LOCATION_OPEN_TSTMP_FLAG,
  END_LOCATION_CLOSE_TSTMP_FLAG AS END_LOCATION_CLOSE_TSTMP_FLAG,
  END_TSTMP_ADJ_HOUR AS END_TSTMP_ADJ_HOUR,
  SLA_SAME_DAY_FLAG AS SLA_SAME_DAY_FLAG,
  SLA_NEXT_OPEN_DAY_FLAG AS SLA_NEXT_OPEN_DAY_FLAG,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  SLA_LOCATION_OPEN_TSTMP_FLAG AS SLA_LOCATION_OPEN_TSTMP_FLAG,
  SLA_TSTMP_ADJ_HOUR AS SLA_TSTMP_ADJ_HOUR,
  UPDATE_USER AS UPDATE_USER,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  DAY_DT1 AS DAY_DT1,
  LOCATION_ID1 AS LOCATION_ID1,
  STORE_NBR AS STORE_NBR,
  OPEN_TSTMP1 AS OPEN_TSTMP1,
  CLOSE_TSTMP1 AS CLOSE_TSTMP1,
  LOCATION_TYPE_ID1 AS LOCATION_TYPE_ID1,
  CLOSE_FLAG1 AS CLOSE_FLAG1,
  BUSINESS_AREA AS BUSINESS_AREA,
  UPDATE_TSTMP1 AS UPDATE_TSTMP1,
  WEEKEND_FLAG1 AS WEEKEND_FLAG1,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Jnr_Site_Order_SLA_Site_Hours_Day_29
WHERE
  (
    (
      DAY_DT1 >= START_DT
      AND DAY_DT1 <= END_DT
    )
    OR (
      UPDATE_TSTMP1 > ADD_TO_DATE(TRUNC(now()), 'DD', -1)
    )
  )
  AND (
    BUSINESS_AREA = 'Store'
    OR BUSINESS_AREA = 'DC'
    OR BUSINESS_AREA = 'Vendor'
  )
  AND (
    (
      WEEKEND_FLAG1 = 1
      AND WEEKEND_FLAG = WEEKEND_FLAG1
    )
    OR (
      WEEKEND_FLAG1 = 0
      AND CLOSE_FLAG = CLOSE_FLAG1
    )
  )"""

df_30 = spark.sql(query_30)

df_30.createOrReplaceTempView("Fil_Site_Hours_Day_Site_Order_SLA_30")

# COMMAND ----------
# DBTITLE 1, exp_PASS_THRU_31


query_31 = f"""SELECT
  START_DT AS DAY_DT2,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  RULE_NBR AS RULE_NBR,
  END_DT AS END_DT,
  RULE_DESC AS RULE_DESC,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  WEEKEND_FLAG AS WEEKEND_FLAG,
  CLOSE_FLAG AS CLOSE_FLAG,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  START_LOCATION_OPEN_TSTMP_FLAG AS START_LOCATION_OPEN_TSTMP_FLAG,
  START_LOCATION_CLOSE_TSTMP_FLAG AS START_LOCATION_CLOSE_TSTMP_FLAG,
  START_TSTMP_ADJ_HOUR AS START_TSTMP_ADJ_HOUR,
  END_LOCATION_OPEN_TSTMP_FLAG AS END_LOCATION_OPEN_TSTMP_FLAG,
  END_LOCATION_CLOSE_TSTMP_FLAG AS END_LOCATION_CLOSE_TSTMP_FLAG,
  END_TSTMP_ADJ_HOUR AS END_TSTMP_ADJ_HOUR,
  SLA_SAME_DAY_FLAG AS SLA_SAME_DAY_FLAG,
  SLA_NEXT_OPEN_DAY_FLAG AS SLA_NEXT_OPEN_DAY_FLAG,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  SLA_LOCATION_OPEN_TSTMP_FLAG AS SLA_LOCATION_OPEN_TSTMP_FLAG,
  SLA_TSTMP_ADJ_HOUR AS SLA_TSTMP_ADJ_HOUR,
  UPDATE_USER AS UPDATE_USER,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  DAY_DT1 AS DAY_DT1,
  LOCATION_ID1 AS LOCATION_ID,
  OPEN_TSTMP1 AS OPEN_TSTMP,
  CLOSE_TSTMP1 AS CLOSE_TSTMP,
  STORE_NBR AS STORE_NBR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Fil_Site_Hours_Day_Site_Order_SLA_30"""

df_31 = spark.sql(query_31)

df_31.createOrReplaceTempView("exp_PASS_THRU_31")

# COMMAND ----------
# DBTITLE 1, jnr_NEXT_OPEN_DATE_32


query_32 = f"""SELECT
  DETAIL.DAY_DT2 AS DAY_DT2,
  DETAIL.LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  DETAIL.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  DETAIL.RULE_NBR AS RULE_NBR,
  DETAIL.END_DT AS END_DT,
  DETAIL.RULE_DESC AS RULE_DESC,
  DETAIL.HOLIDAY_FLAG AS HOLIDAY_FLAG,
  DETAIL.WEEKEND_FLAG AS WEEKEND_FLAG,
  DETAIL.CLOSE_FLAG AS CLOSE_FLAG,
  DETAIL.START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  DETAIL.END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  DETAIL.START_LOCATION_OPEN_TSTMP_FLAG AS START_LOCATION_OPEN_TSTMP_FLAG,
  DETAIL.START_LOCATION_CLOSE_TSTMP_FLAG AS START_LOCATION_CLOSE_TSTMP_FLAG,
  DETAIL.START_TSTMP_ADJ_HOUR AS START_TSTMP_ADJ_HOUR,
  DETAIL.END_LOCATION_OPEN_TSTMP_FLAG AS END_LOCATION_OPEN_TSTMP_FLAG,
  DETAIL.END_LOCATION_CLOSE_TSTMP_FLAG AS END_LOCATION_CLOSE_TSTMP_FLAG,
  DETAIL.END_TSTMP_ADJ_HOUR AS END_TSTMP_ADJ_HOUR,
  DETAIL.SLA_SAME_DAY_FLAG AS SLA_SAME_DAY_FLAG,
  DETAIL.SLA_NEXT_OPEN_DAY_FLAG AS SLA_NEXT_OPEN_DAY_FLAG,
  DETAIL.SLA_TSTMP AS SLA_TSTMP,
  DETAIL.SLA_TIME_HOUR AS SLA_TIME_HOUR,
  DETAIL.SLA_LOCATION_OPEN_TSTMP_FLAG AS SLA_LOCATION_OPEN_TSTMP_FLAG,
  DETAIL.SLA_TSTMP_ADJ_HOUR AS SLA_TSTMP_ADJ_HOUR,
  DETAIL.UPDATE_USER AS UPDATE_USER,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  DETAIL.DAY_DT1 AS DAY_DT1,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.OPEN_TSTMP AS OPEN_TSTMP,
  DETAIL.CLOSE_TSTMP AS CLOSE_TSTMP,
  DETAIL.STORE_NBR AS STORE_NBR,
  MASTER.DAY_DT AS DAY_DT,
  MASTER.Next_Day_DAY_DT AS Next_No_Close_DAY_DT,
  MASTER.Next_Day_OPEN_TSTMP AS Next_No_Close_OPEN_TSTMP,
  MASTER.Next_day_CLOSE_TSTMP AS NExt_No_Close_CLOSE_TSTMP,
  MASTER.LOCATION_ID AS LOCATION_ID1,
  MASTER.Next_No_Weekend_Day_DAY_DT AS Next_No_Weekend_Day_DAY_DT,
  MASTER.Next_No_Weekend_Day_OPEN_TSTMP AS Next_No_Weekend_Day_OPEN_TSTMP,
  MASTER.Next_No_Weekend_Day_CLOSE_TSTMP AS Next_No_Weekend_Day_CLOSE_TSTMP,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_Next_Day_Weekend_or_Close_24 MASTER
  INNER JOIN exp_PASS_THRU_31 DETAIL ON MASTER.LOCATION_ID = DETAIL.LOCATION_ID
  AND MASTER.DAY_DT = DETAIL.DAY_DT1"""

df_32 = spark.sql(query_32)

df_32.createOrReplaceTempView("jnr_NEXT_OPEN_DATE_32")

# COMMAND ----------
# DBTITLE 1, exp_CALC_33


query_33 = f"""SELECT
  LOCATION_ID AS LOCATION_ID,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  DECODE(TRUE, LOCATION_TYPE_ID = 8, 1, LOCATION_TYPE_ID = 6, 2) AS v_LOCATION_TYPE_ID,
  OPEN_TSTMP AS OPEN_HOUR,
  CLOSE_TSTMP AS CLOSE_HOUR,
  DAY_DT1 AS DAY_DT,
  IFF(
    isnull(START_TSTMP_ADJ_HOUR),
    0,
    START_TSTMP_ADJ_HOUR
  ) AS v_START_TSTMP_ADJ_HOUR,
  IFF(isnull(END_TSTMP_ADJ_HOUR), 0, END_TSTMP_ADJ_HOUR) AS v_END_TSTMP_ADJ_HOUR,
  IFF(isnull(SLA_TSTMP_ADJ_HOUR), 0, SLA_TSTMP_ADJ_HOUR) AS v_SLA_TSTMP_ADJ_HOUR,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP_SRC,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP_SRC,
  Decode(
    TRUE,
    (START_LOCATION_OPEN_TSTMP_FLAG = 1),
    ADD_TO_DATE(
      OPEN_TSTMP,
      'HH',
      IFF(
        isnull(START_TSTMP_ADJ_HOUR),
        0,
        START_TSTMP_ADJ_HOUR
      )
    ),
    (START_LOCATION_CLOSE_TSTMP_FLAG = 1),
    ADD_TO_DATE(
      CLOSE_TSTMP,
      'HH',
      IFF(
        isnull(START_TSTMP_ADJ_HOUR),
        0,
        START_TSTMP_ADJ_HOUR
      )
    ),
    (NOT ISNULL(START_ORDER_CREATE_TSTMP)),
    to_date(
      to_char(DAY_DT1, 'yyyy-mm-dd') || ' ' || to_char(get_date_part(START_ORDER_CREATE_TSTMP, 'HH24')) || ':' || to_char(get_date_part(START_ORDER_CREATE_TSTMP, 'MI')) || ':' || to_char(get_date_part(START_ORDER_CREATE_TSTMP, 'SS')),
      'yyyy-mm-dd hh24:mi:ss'
    )
  ) AS START_ORDER_CREATE_TS,
  Decode(
    TRUE,
    (END_LOCATION_CLOSE_TSTMP_FLAG = 1),
    ADD_TO_DATE(
      ADD_TO_DATE(
        CLOSE_TSTMP,
        'SS',
        IFF(isnull(END_TSTMP_ADJ_HOUR), 0, END_TSTMP_ADJ_HOUR)
      ),
      'HH',
      IFF(isnull(END_TSTMP_ADJ_HOUR), 0, END_TSTMP_ADJ_HOUR)
    ),
    (NOT ISNULL (END_ORDER_CREATE_TSTMP)),
    to_date(
      to_char(DAY_DT1, 'yyyy-mm-dd') || ' ' || to_char(get_date_part(END_ORDER_CREATE_TSTMP, 'HH24')) || ':' || to_char(get_date_part(END_ORDER_CREATE_TSTMP, 'MI')) || ':' || to_char(get_date_part(END_ORDER_CREATE_TSTMP, 'SS')),
      'yyyy-mm-dd hh24:mi:ss'
    ),
    END_LOCATION_OPEN_TSTMP_FLAG = 1,
    ADD_TO_DATE(
      ADD_TO_DATE(
        OPEN_TSTMP,
        'SS',
        IFF(isnull(END_TSTMP_ADJ_HOUR), 0, END_TSTMP_ADJ_HOUR)
      ),
      'HH',
      IFF(isnull(END_TSTMP_ADJ_HOUR), 0, END_TSTMP_ADJ_HOUR)
    )
  ) AS END_ORDER_CREATE_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  IFF(
    ORDER_FULFILLMENT_CHANNEL = 'SFS',
    weekend_NEXT_OPEN_DT,
    close_flag_NEXT_OPEN_DT
  ) AS Next_DAY_OPEN_DT,
  IFF(
    ORDER_FULFILLMENT_CHANNEL = 'SFS',
    weekend_NEXT_OPEN_TSTMP,
    close_flag_NEXT_OPEN_TSTMP
  ) AS Next_DAY_OPEN_TSTMP,
  IFF(
    ORDER_FULFILLMENT_CHANNEL = 'SFS',
    weekend_NEXT_CLOSE_TSTMP,
    close_flag_NEXY_CLOSE_TSTMP
  ) AS Next_DAY_CLOSE_TSTMP,
  IFF(SLA_SAME_DAY_FLAG = 1, DAY_DT, Next_DAY_OPEN_DT) AS v_SLA_DAY_DT,
  TO_Date (
    TO_CHAR (
      IFF(
        SLA_SAME_DAY_FLAG = 1,
        DAY_DT1,
        IFF(
          ORDER_FULFILLMENT_CHANNEL = 'SFS',
          Next_No_Weekend_Day_DAY_DT,
          Next_No_Close_DAY_DT
        )
      ),
      'yyyy-mm-dd'
    ),
    'yyyy-mm-dd'
  ) AS SLA_DAY_DT,
  IFF(
    LOCATION_TYPE_ID = 8,
    Decode(
      TRUE,
      (
        SLA_SAME_DAY_FLAG = 1
        and SLA_LOCATION_OPEN_TSTMP_FLAG = 1
      ),
      ADD_TO_DATE(
        OPEN_TSTMP,
        'HH',
        IFF(isnull(SLA_TSTMP_ADJ_HOUR), 0, SLA_TSTMP_ADJ_HOUR)
      ),
      (
        SLA_NEXT_OPEN_DAY_FLAG = 1
        and SLA_LOCATION_OPEN_TSTMP_FLAG = 1
      ),
      to_date(
        to_char(
          IFF(
            ORDER_FULFILLMENT_CHANNEL = 'SFS',
            Next_No_Weekend_Day_DAY_DT,
            Next_No_Close_DAY_DT
          ),
          'yyyy-mm-dd'
        ) || ' ' || to_char(
          get_date_part(
            IFF(
              ORDER_FULFILLMENT_CHANNEL = 'SFS',
              Next_No_Weekend_Day_OPEN_TSTMP,
              Next_No_Close_OPEN_TSTMP
            ),
            'HH24'
          )
        ) || ':' || to_char(
          get_date_part(
            IFF(
              ORDER_FULFILLMENT_CHANNEL = 'SFS',
              Next_No_Weekend_Day_OPEN_TSTMP,
              Next_No_Close_OPEN_TSTMP
            ),
            'MI'
          )
        ) || ':' || to_char(
          get_date_part(
            IFF(
              ORDER_FULFILLMENT_CHANNEL = 'SFS',
              Next_No_Weekend_Day_OPEN_TSTMP,
              Next_No_Close_OPEN_TSTMP
            ),
            'SS'
          )
        ),
        'yyyy-mm-dd hh24:mi:ss'
      ),
      (
        NOT ISNULL(SLA_TSTMP)
        AND SLA_NEXT_OPEN_DAY_FLAG = 1
      ),
      to_date(
        to_char(
          IFF(
            ORDER_FULFILLMENT_CHANNEL = 'SFS',
            Next_No_Weekend_Day_DAY_DT,
            Next_No_Close_DAY_DT
          ),
          'yyyy-mm-dd'
        ) || ' ' || to_char(get_date_part(SLA_TSTMP, 'HH24')) || ':' || to_char(get_date_part(SLA_TSTMP, 'MI')) || ':' || to_char(get_date_part(SLA_TSTMP, 'SS')),
        'yyyy-mm-dd hh24:mi:ss'
      ),
      (
        NOT ISNULL(SLA_TSTMP)
        AND SLA_SAME_DAY_FLAG = 1
      ),
      to_date(
        to_char(DAY_DT1, 'yyyy-mm-dd') || ' ' || to_char(get_date_part(SLA_TSTMP, 'HH24')) || ':' || to_char(get_date_part(SLA_TSTMP, 'MI')) || ':' || to_char(get_date_part(SLA_TSTMP, 'SS')),
        'yyyy-mm-dd hh24:mi:ss'
      )
    ),
    IFF(
      LOCATION_TYPE_ID = 6,
      Decode(
        TRUE,
        NOT ISNULL(SLA_TSTMP)
        and SLA_SAME_DAY_FLAG = 1,
        to_date(
          to_char(DAY_DT1, 'yyyy-mm-dd') || ' ' || to_char(get_date_part(SLA_TSTMP, 'HH24')) || ':' || to_char(get_date_part(SLA_TSTMP, 'MI')) || ':' || to_char(get_date_part(SLA_TSTMP, 'SS')),
          'yyyy-mm-dd hh24:mi:ss'
        ),
        NOT ISNULL(SLA_TSTMP)
        and SLA_NEXT_OPEN_DAY_FLAG = 1,
        to_date(
          to_char(
            IFF(
              ORDER_FULFILLMENT_CHANNEL = 'SFS',
              Next_No_Weekend_Day_DAY_DT,
              Next_No_Close_DAY_DT
            ),
            'yyyy-mm-dd'
          ) || ' ' || to_char(get_date_part(SLA_TSTMP, 'HH24')) || ':' || to_char(get_date_part(SLA_TSTMP, 'MI')) || ':' || to_char(get_date_part(SLA_TSTMP, 'SS')),
          'yyyy-mm-dd hh24:mi:ss'
        )
      )
    )
  ) AS SLA_TSTMP,
  sysdate AS UPDATE_TSTMP,
  sysdate AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  jnr_NEXT_OPEN_DATE_32"""

df_33 = spark.sql(query_33)

df_33.createOrReplaceTempView("exp_CALC_33")

# COMMAND ----------
# DBTITLE 1, SITE_ORDER_CHANNEL_SLA_DAY_PRE


spark.sql("""INSERT INTO
  SITE_ORDER_CHANNEL_SLA_DAY_PRE
SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  START_ORDER_CREATE_TS AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  SLA_DAY_DT AS SLA_DAY_DT,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  exp_CALC_33""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_Site_Order_Channel_SLA_Day_Pre")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_Site_Order_Channel_SLA_Day_Pre", mainWorkflowId, parentName)
