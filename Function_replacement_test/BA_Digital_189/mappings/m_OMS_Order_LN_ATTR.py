# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_OMS_Order_LN_ATTR")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_OMS_Order_LN_ATTR", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_ORDER_LN_ATTR1_0


query_0 = f"""SELECT
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  ORDER_CAPTURE_CHANNEL AS ORDER_CAPTURE_CHANNEL,
  ORDER_CAPTURE_DEVICE AS ORDER_CAPTURE_DEVICE,
  ORDER_AUTO_SHIPMENT_FLAG AS ORDER_AUTO_SHIPMENT_FLAG,
  ORDER_AUTO_SHIPMENT_NBR AS ORDER_AUTO_SHIPMENT_NBR,
  ORDER_ITEM_DELIVERY_METHOD AS ORDER_ITEM_DELIVERY_METHOD,
  ORDER_ITEM_SCHED_DELIVERY_FLAG AS ORDER_ITEM_SCHED_DELIVERY_FLAG,
  ORDER_ITEM_ADD_ON_FLAG AS ORDER_ITEM_ADD_ON_FLAG,
  ORDER_ITEM_PRESCRIPTION_FLAG AS ORDER_ITEM_PRESCRIPTION_FLAG,
  ORDER_ITEM_GROUP AS ORDER_ITEM_GROUP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_ORDER_LN_ATTR"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_OMS_ORDER_LN_ATTR1_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_ORDER_LN_ATTR_1


query_1 = f"""SELECT
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  ORDER_CAPTURE_CHANNEL AS ORDER_CAPTURE_CHANNEL,
  ORDER_CAPTURE_DEVICE AS ORDER_CAPTURE_DEVICE,
  ORDER_AUTO_SHIPMENT_FLAG AS ORDER_AUTO_SHIPMENT_FLAG,
  ORDER_AUTO_SHIPMENT_NBR AS ORDER_AUTO_SHIPMENT_NBR,
  ORDER_ITEM_ADD_ON_FLAG AS ORDER_ITEM_ADD_ON_FLAG,
  ORDER_ITEM_PRESCRIPTION_FLAG AS ORDER_ITEM_PRESCRIPTION_FLAG,
  ORDER_ITEM_GROUP AS ORDER_ITEM_GROUP,
  LOAD_TSTMP AS LOAD_TSTMP,
  ORDER_ITEM_DELIVERY_METHOD AS ORDER_ITEM_DELIVERY_METHOD,
  ORDER_ITEM_SCHED_DELIVERY_FLAG AS ORDER_ITEM_SCHED_DELIVERY_FLAG,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_ORDER_LN_ATTR1_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_OMS_ORDER_LN_ATTR_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_DIST_ORDER_2


query_2 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_NBR AS OMS_DIST_ORDER_NBR,
  CREATION_TYPE_ID AS CREATION_TYPE_ID,
  ORIG_LOCATION_NBR AS ORIG_LOCATION_NBR,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  DEST_LOCATION_NBR AS DEST_LOCATION_NBR,
  DEST_LOCATION_ID AS DEST_LOCATION_ID,
  BILL_LOCATION_NBR AS BILL_LOCATION_NBR,
  BILL_LOCATION_ID AS BILL_LOCATION_ID,
  PICKUP_TZ AS PICKUP_TZ,
  DELIVERY_TZ AS DELIVERY_TZ,
  PICKUP_START_DT AS PICKUP_START_DT,
  PICKUP_END_DT AS PICKUP_END_DT,
  DELIVERY_START_DT AS DELIVERY_START_DT,
  DELIVERY_END_DT AS DELIVERY_END_DT,
  ORDER_DATE_DT AS ORDER_DATE_DT,
  ORDER_RECON_DT AS ORDER_RECON_DT,
  INBOUND_REGION_ID AS INBOUND_REGION_ID,
  OUTBOUND_REGION_ID AS OUTBOUND_REGION_ID,
  ALERTS_FLG AS ALERTS_FLG,
  SPLIT_FLG AS SPLIT_FLG,
  CANCELED_FLG AS CANCELED_FLG,
  PARTIALLY_PLANNED_FLG AS PARTIALLY_PLANNED_FLG,
  ACTUAL_COST_AMT AS ACTUAL_COST_AMT,
  BASELINE_COST_AMT AS BASELINE_COST_AMT,
  BILLING_METHOD AS BILLING_METHOD,
  DROPOFF_PICKUP AS DROPOFF_PICKUP,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  MONETARY_VALUE_AMT AS MONETARY_VALUE_AMT,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_SOURCE AS CREATED_SOURCE,
  OMS_DO_CREATED_TSTMP AS OMS_DO_CREATED_TSTMP,
  LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP,
  SHIPMENT_ID AS SHIPMENT_ID,
  OMS_DIST_ORDER_TRANS_STATUS_ID AS OMS_DIST_ORDER_TRANS_STATUS_ID,
  OMS_DIST_ORDER_STATUS_ID AS OMS_DIST_ORDER_STATUS_ID,
  OMS_DIST_ORDER_TYPE_ID AS OMS_DIST_ORDER_TYPE_ID,
  ACTUAL_SHIPPED_DT AS ACTUAL_SHIPPED_DT,
  SCHED_PICKUP_DT AS SCHED_PICKUP_DT,
  SCHED_DELIVERY_DT AS SCHED_DELIVERY_DT,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  PRTL_SHIP_CONF_FLG AS PRTL_SHIP_CONF_FLG,
  PRTL_SHIP_CONF_STATUS_ID AS PRTL_SHIP_CONF_STATUS_ID,
  OMS_DO_TYPE_ID AS OMS_DO_TYPE_ID,
  COMPLETED_ORDER_FLG AS COMPLETED_ORDER_FLG,
  ISPU_PXY_FIRST_NAME AS ISPU_PXY_FIRST_NAME,
  ISPU_PXY_LAST_NAME AS ISPU_PXY_LAST_NAME,
  ISPU_PXY_ADD_LINE1 AS ISPU_PXY_ADD_LINE1,
  ISPU_PXY_ADD_LINE2 AS ISPU_PXY_ADD_LINE2,
  ISPU_PXY_ADD_LINE3 AS ISPU_PXY_ADD_LINE3,
  ISPU_PXY_CITY AS ISPU_PXY_CITY,
  ISPU_PXY_STATE AS ISPU_PXY_STATE,
  ISPU_PXY_POSTAL_CD AS ISPU_PXY_POSTAL_CD,
  ISPU_PXY_COUNTRY AS ISPU_PXY_COUNTRY,
  ISPU_PXY_EMAIL AS ISPU_PXY_EMAIL,
  ISUP_PXY_PHONE AS ISUP_PXY_PHONE,
  OMS_ORDER_NBR AS OMS_ORDER_NBR,
  ORDER_NBR AS ORDER_NBR,
  OMS_ORDER_CREATED_TSTMP AS OMS_ORDER_CREATED_TSTMP,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  SUBSCRIPTION_ORDER_FLG AS SUBSCRIPTION_ORDER_FLG,
  CANCELED_DT AS CANCELED_DT,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  RX_ORDER_FLG AS RX_ORDER_FLG,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_DIST_ORDER"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_DIST_ORDER_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_DIST_ORDER_3


query_3 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_NBR AS OMS_DIST_ORDER_NBR,
  CREATION_TYPE_ID AS CREATION_TYPE_ID,
  ORIG_LOCATION_NBR AS ORIG_LOCATION_NBR,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  DEST_LOCATION_NBR AS DEST_LOCATION_NBR,
  DEST_LOCATION_ID AS DEST_LOCATION_ID,
  BILL_LOCATION_NBR AS BILL_LOCATION_NBR,
  BILL_LOCATION_ID AS BILL_LOCATION_ID,
  PICKUP_TZ AS PICKUP_TZ,
  DELIVERY_TZ AS DELIVERY_TZ,
  PICKUP_START_DT AS PICKUP_START_DT,
  PICKUP_END_DT AS PICKUP_END_DT,
  DELIVERY_START_DT AS DELIVERY_START_DT,
  DELIVERY_END_DT AS DELIVERY_END_DT,
  ORDER_DATE_DT AS ORDER_DATE_DT,
  ORDER_RECON_DT AS ORDER_RECON_DT,
  INBOUND_REGION_ID AS INBOUND_REGION_ID,
  OUTBOUND_REGION_ID AS OUTBOUND_REGION_ID,
  ALERTS_FLG AS ALERTS_FLG,
  SPLIT_FLG AS SPLIT_FLG,
  CANCELED_FLG AS CANCELED_FLG,
  PARTIALLY_PLANNED_FLG AS PARTIALLY_PLANNED_FLG,
  ACTUAL_COST_AMT AS ACTUAL_COST_AMT,
  BASELINE_COST_AMT AS BASELINE_COST_AMT,
  BILLING_METHOD AS BILLING_METHOD,
  DROPOFF_PICKUP AS DROPOFF_PICKUP,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  MONETARY_VALUE_AMT AS MONETARY_VALUE_AMT,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_SOURCE AS CREATED_SOURCE,
  OMS_DO_CREATED_TSTMP AS OMS_DO_CREATED_TSTMP,
  LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP,
  SHIPMENT_ID AS SHIPMENT_ID,
  OMS_DIST_ORDER_TRANS_STATUS_ID AS OMS_DIST_ORDER_TRANS_STATUS_ID,
  OMS_DIST_ORDER_STATUS_ID AS OMS_DIST_ORDER_STATUS_ID,
  OMS_DIST_ORDER_TYPE_ID AS OMS_DIST_ORDER_TYPE_ID,
  ACTUAL_SHIPPED_DT AS ACTUAL_SHIPPED_DT,
  SCHED_PICKUP_DT AS SCHED_PICKUP_DT,
  SCHED_DELIVERY_DT AS SCHED_DELIVERY_DT,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  PRTL_SHIP_CONF_FLG AS PRTL_SHIP_CONF_FLG,
  PRTL_SHIP_CONF_STATUS_ID AS PRTL_SHIP_CONF_STATUS_ID,
  OMS_DO_TYPE_ID AS OMS_DO_TYPE_ID,
  COMPLETED_ORDER_FLG AS COMPLETED_ORDER_FLG,
  ISPU_PXY_FIRST_NAME AS ISPU_PXY_FIRST_NAME,
  ISPU_PXY_LAST_NAME AS ISPU_PXY_LAST_NAME,
  ISPU_PXY_ADD_LINE1 AS ISPU_PXY_ADD_LINE1,
  ISPU_PXY_ADD_LINE2 AS ISPU_PXY_ADD_LINE2,
  ISPU_PXY_ADD_LINE3 AS ISPU_PXY_ADD_LINE3,
  ISPU_PXY_CITY AS ISPU_PXY_CITY,
  ISPU_PXY_STATE AS ISPU_PXY_STATE,
  ISPU_PXY_POSTAL_CD AS ISPU_PXY_POSTAL_CD,
  ISPU_PXY_COUNTRY AS ISPU_PXY_COUNTRY,
  ISPU_PXY_EMAIL AS ISPU_PXY_EMAIL,
  ISUP_PXY_PHONE AS ISUP_PXY_PHONE,
  OMS_ORDER_NBR AS OMS_ORDER_NBR,
  ORDER_NBR AS ORDER_NBR,
  OMS_ORDER_CREATED_TSTMP AS OMS_ORDER_CREATED_TSTMP,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  SUBSCRIPTION_ORDER_FLG AS SUBSCRIPTION_ORDER_FLG,
  CANCELED_DT AS CANCELED_DT,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  RX_ORDER_FLG AS RX_ORDER_FLG,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_DIST_ORDER_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_OMS_DIST_ORDER_3")

# COMMAND ----------
# DBTITLE 1, EXP_ORDER_TYP_SUBSCRIP_4


query_4 = f"""SELECT
  OMS_ORDER_ID AS PURCHASE_ORDER_ID,
  IFF(
    LTRIM(RTRIM(UPPER(OMS_DO_TYPE_ID))) <> 'SUBSCRIPTION',
    NULL,
    OMS_DO_TYPE_ID
  ) AS o_ORDER_TYPE,
  UPDATE_TSTMP AS UPDATE_TSTMP_DIST_ORDER,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_DIST_ORDER_3"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("EXP_ORDER_TYP_SUBSCRIP_4")

# COMMAND ----------
# DBTITLE 1, SRT_DISTINCT_5


query_5 = f"""SELECT
  PURCHASE_ORDER_ID AS PURCHASE_ORDER_ID,
  o_ORDER_TYPE AS o_ORDER_TYPE,
  UPDATE_TSTMP_DIST_ORDER AS UPDATE_TSTMP_DIST_ORDER,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_ORDER_TYP_SUBSCRIP_4
ORDER BY
  PURCHASE_ORDER_ID ASC,
  o_ORDER_TYPE ASC,
  UPDATE_TSTMP_DIST_ORDER ASC"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("SRT_DISTINCT_5")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_ORDER_LN_6


query_6 = f"""SELECT
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  ORIG_LOCATION_NBR AS ORIG_LOCATION_NBR,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  DEST_LOCATION_NBR AS DEST_LOCATION_NBR,
  DEST_LOCATION_ID AS DEST_LOCATION_ID,
  SHIP_NAME AS SHIP_NAME,
  SHIP_LAST_NAME AS SHIP_LAST_NAME,
  SHIP_ADDRESS AS SHIP_ADDRESS,
  SHIP_CITY AS SHIP_CITY,
  SHIP_STATE AS SHIP_STATE,
  SHIP_POSTAL_CD AS SHIP_POSTAL_CD,
  SHIP_COUNTRY_CD AS SHIP_COUNTRY_CD,
  SHIP_PHONE AS SHIP_PHONE,
  SHIP_EMAIL AS SHIP_EMAIL,
  BILL_LOCATION_NBR AS BILL_LOCATION_NBR,
  BILL_LOCATION_ID AS BILL_LOCATION_ID,
  STORE_LOCATION_NBR AS STORE_LOCATION_NBR,
  STORE_LOCATION_ID AS STORE_LOCATION_ID,
  PRODUCT_ID AS PRODUCT_ID,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  TOTAL_MONETARY_VALUE_AMT AS TOTAL_MONETARY_VALUE_AMT,
  UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  UNIT_TAX_AMOUNT_AMT AS UNIT_TAX_AMOUNT_AMT,
  PRODUCT_CLASS_ID AS PRODUCT_CLASS_ID,
  ALLOCATED_QTY AS ALLOCATED_QTY,
  RELEASED_QTY AS RELEASED_QTY,
  CANCELLED_QTY AS CANCELLED_QTY,
  PPACK_QTY AS PPACK_QTY,
  DELIVERY_TZ AS DELIVERY_TZ,
  PICKUP_TZ AS PICKUP_TZ,
  PICKUP_START_DT AS PICKUP_START_DT,
  PICKUP_END_DT AS PICKUP_END_DT,
  DELIVERY_START_DT AS DELIVERY_START_DT,
  DELIVERY_END_DT AS DELIVERY_END_DT,
  REQ_DLVR_DT AS REQ_DLVR_DT,
  MUST_DLVR_DT AS MUST_DLVR_DT,
  SHIP_BY_DT AS SHIP_BY_DT,
  READY_TO_SHIP_FLG AS READY_TO_SHIP_FLG,
  CANCELLED_FLG AS CANCELLED_FLG,
  CLOSED_FLG AS CLOSED_FLG,
  DELETED_FLG AS DELETED_FLG,
  SHIPPED_QTY AS SHIPPED_QTY,
  RECEIVED_QTY AS RECEIVED_QTY,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_SOURCE AS CREATED_SOURCE,
  CREATED_TSTMP AS CREATED_TSTMP,
  LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP,
  DSG_CARRIER_ID AS DSG_CARRIER_ID,
  OMS_ORDER_LN_STATUS_ID AS OMS_ORDER_LN_STATUS_ID,
  OMS_ORDER_LN_NBR AS OMS_ORDER_LN_NBR,
  ORDER_QTY AS ORDER_QTY,
  ALLOC_FINALIZER AS ALLOC_FINALIZER,
  DIST_ORDER_CREATED_FLG AS DIST_ORDER_CREATED_FLG,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  RETAIL_PRICE AS RETAIL_PRICE,
  DSG_SHIP_VIA AS DSG_SHIP_VIA,
  LINE_TOTAL AS LINE_TOTAL,
  REASON_ID AS REASON_ID,
  ORDER_FULFILLMENT_OPTION AS ORDER_FULFILLMENT_OPTION,
  PRICE_OVERRIDE_FLG AS PRICE_OVERRIDE_FLG,
  ORIGINAL_PRICE_AMT AS ORIGINAL_PRICE_AMT,
  REASON_CDS_GROUP_ID AS REASON_CDS_GROUP_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  ORDER_NBR AS ORDER_NBR,
  OMS_ORDER_CREATED_TSTMP AS OMS_ORDER_CREATED_TSTMP,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  SUBSCRIPTION_ORDER_FLG AS SUBSCRIPTION_ORDER_FLG,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  SHIP_CHARGE_NAME AS SHIP_CHARGE_NAME,
  SHIP_CHARGE_AMT AS SHIP_CHARGE_AMT,
  ORIG_SHIP_CHARGE_AMT AS ORIG_SHIP_CHARGE_AMT,
  SHIP_CHARGE_DESC AS SHIP_CHARGE_DESC,
  RETURN_REASON_ID AS RETURN_REASON_ID,
  RETURN_SHIP_HANDLING_AMT AS RETURN_SHIP_HANDLING_AMT,
  RETURN_TOTAL_FEE_AMT AS RETURN_TOTAL_FEE_AMT,
  RETURN_CODE_DESC AS RETURN_CODE_DESC,
  RETURN_SHORT_DESC AS RETURN_SHORT_DESC,
  CANCEL_REASON_DESC AS CANCEL_REASON_DESC,
  CANCELLED_TSTMP AS CANCELLED_TSTMP,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  TRACKING_NBR AS TRACKING_NBR,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_ORDER_LN"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("Shortcut_to_OMS_ORDER_LN_6")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_ORDER_LN_7


query_7 = f"""SELECT
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  ORIG_LOCATION_NBR AS ORIG_LOCATION_NBR,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  DEST_LOCATION_NBR AS DEST_LOCATION_NBR,
  DEST_LOCATION_ID AS DEST_LOCATION_ID,
  SHIP_NAME AS SHIP_NAME,
  SHIP_LAST_NAME AS SHIP_LAST_NAME,
  SHIP_ADDRESS AS SHIP_ADDRESS,
  SHIP_CITY AS SHIP_CITY,
  SHIP_STATE AS SHIP_STATE,
  SHIP_POSTAL_CD AS SHIP_POSTAL_CD,
  SHIP_COUNTRY_CD AS SHIP_COUNTRY_CD,
  SHIP_PHONE AS SHIP_PHONE,
  SHIP_EMAIL AS SHIP_EMAIL,
  BILL_LOCATION_NBR AS BILL_LOCATION_NBR,
  BILL_LOCATION_ID AS BILL_LOCATION_ID,
  STORE_LOCATION_NBR AS STORE_LOCATION_NBR,
  STORE_LOCATION_ID AS STORE_LOCATION_ID,
  PRODUCT_ID AS PRODUCT_ID,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  TOTAL_MONETARY_VALUE_AMT AS TOTAL_MONETARY_VALUE_AMT,
  UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  UNIT_TAX_AMOUNT_AMT AS UNIT_TAX_AMOUNT_AMT,
  PRODUCT_CLASS_ID AS PRODUCT_CLASS_ID,
  ALLOCATED_QTY AS ALLOCATED_QTY,
  RELEASED_QTY AS RELEASED_QTY,
  CANCELLED_QTY AS CANCELLED_QTY,
  PPACK_QTY AS PPACK_QTY,
  DELIVERY_TZ AS DELIVERY_TZ,
  PICKUP_TZ AS PICKUP_TZ,
  PICKUP_START_DT AS PICKUP_START_DT,
  PICKUP_END_DT AS PICKUP_END_DT,
  DELIVERY_START_DT AS DELIVERY_START_DT,
  DELIVERY_END_DT AS DELIVERY_END_DT,
  REQ_DLVR_DT AS REQ_DLVR_DT,
  MUST_DLVR_DT AS MUST_DLVR_DT,
  SHIP_BY_DT AS SHIP_BY_DT,
  READY_TO_SHIP_FLG AS READY_TO_SHIP_FLG,
  CANCELLED_FLG AS CANCELLED_FLG,
  CLOSED_FLG AS CLOSED_FLG,
  DELETED_FLG AS DELETED_FLG,
  SHIPPED_QTY AS SHIPPED_QTY,
  RECEIVED_QTY AS RECEIVED_QTY,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_SOURCE AS CREATED_SOURCE,
  CREATED_TSTMP AS CREATED_TSTMP,
  LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP,
  DSG_CARRIER_ID AS DSG_CARRIER_ID,
  OMS_ORDER_LN_STATUS_ID AS OMS_ORDER_LN_STATUS_ID,
  OMS_ORDER_LN_NBR AS OMS_ORDER_LN_NBR,
  ORDER_QTY AS ORDER_QTY,
  ALLOC_FINALIZER AS ALLOC_FINALIZER,
  DIST_ORDER_CREATED_FLG AS DIST_ORDER_CREATED_FLG,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  RETAIL_PRICE AS RETAIL_PRICE,
  DSG_SHIP_VIA AS DSG_SHIP_VIA,
  LINE_TOTAL AS LINE_TOTAL,
  REASON_ID AS REASON_ID,
  ORDER_FULFILLMENT_OPTION AS ORDER_FULFILLMENT_OPTION,
  PRICE_OVERRIDE_FLG AS PRICE_OVERRIDE_FLG,
  ORIGINAL_PRICE_AMT AS ORIGINAL_PRICE_AMT,
  REASON_CDS_GROUP_ID AS REASON_CDS_GROUP_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  ORDER_NBR AS ORDER_NBR,
  OMS_ORDER_CREATED_TSTMP AS OMS_ORDER_CREATED_TSTMP,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  SUBSCRIPTION_ORDER_FLG AS SUBSCRIPTION_ORDER_FLG,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  SHIP_CHARGE_NAME AS SHIP_CHARGE_NAME,
  SHIP_CHARGE_AMT AS SHIP_CHARGE_AMT,
  ORIG_SHIP_CHARGE_AMT AS ORIG_SHIP_CHARGE_AMT,
  SHIP_CHARGE_DESC AS SHIP_CHARGE_DESC,
  RETURN_REASON_ID AS RETURN_REASON_ID,
  RETURN_SHIP_HANDLING_AMT AS RETURN_SHIP_HANDLING_AMT,
  RETURN_TOTAL_FEE_AMT AS RETURN_TOTAL_FEE_AMT,
  RETURN_CODE_DESC AS RETURN_CODE_DESC,
  RETURN_SHORT_DESC AS RETURN_SHORT_DESC,
  CANCEL_REASON_DESC AS CANCEL_REASON_DESC,
  CANCELLED_TSTMP AS CANCELLED_TSTMP,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  TRACKING_NBR AS TRACKING_NBR,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_ORDER_LN_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("SQ_Shortcut_to_OMS_ORDER_LN_7")

# COMMAND ----------
# DBTITLE 1, JNR_PRE_JOIN_8


query_8 = f"""SELECT
  MASTER.PURCHASE_ORDER_ID AS PURCHASE_ORDER_ID,
  MASTER.o_ORDER_TYPE AS ORDER_TYPE,
  MASTER.UPDATE_TSTMP_DIST_ORDER AS UPDATE_TSTMP_DIST_ORDER,
  DETAIL.OMS_ORDER_ID AS PURCHASE_ORDERS_ID,
  DETAIL.OMS_ORDER_LN_ID AS PURCHASE_ORDERS_LN_ITEM_ID,
  DETAIL.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  DETAIL.ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  DETAIL.SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  DETAIL.ADD_ON_FLAG AS ADD_ON_FLAG,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP_ORDER_LN,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SRT_DISTINCT_5 MASTER
  RIGHT JOIN SQ_Shortcut_to_OMS_ORDER_LN_7 DETAIL ON MASTER.PURCHASE_ORDER_ID = DETAIL.OMS_ORDER_ID"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("JNR_PRE_JOIN_8")

# COMMAND ----------
# DBTITLE 1, FLT_UPDATE_TSTMP_9


query_9 = f"""SELECT
  UPDATE_TSTMP_DIST_ORDER AS UPDATE_TSTMP_DIST_ORDER,
  UPDATE_TSTMP_ORDER_LN AS UPDATE_TSTMP_ORDER_LN,
  PURCHASE_ORDERS_ID AS PURCHASE_ORDERS_ID,
  PURCHASE_ORDERS_LN_ITEM_ID AS PURCHASE_ORDERS_LN_ITEM_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  ORDER_TYPE AS ORDER_TYPE,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_PRE_JOIN_8
WHERE
  UPDATE_TSTMP_DIST_ORDER > TRUNC(now())
  OR UPDATE_TSTMP_ORDER_LN > TRUNC(now())"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("FLT_UPDATE_TSTMP_9")

# COMMAND ----------
# DBTITLE 1, AGG_10


query_10 = f"""SELECT
  PURCHASE_ORDERS_ID AS PURCHASE_ORDERS_ID,
  PURCHASE_ORDERS_LN_ITEM_ID AS PURCHASE_ORDERS_LN_ITEM_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  ORDER_TYPE AS ORDER_TYPE,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  FLT_UPDATE_TSTMP_9
GROUP BY
  PURCHASE_ORDERS_ID,
  PURCHASE_ORDERS_LN_ITEM_ID"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("AGG_10")

# COMMAND ----------
# DBTITLE 1, JNR_PRE_DW_tables_11


query_11 = f"""SELECT
  DETAIL.OMS_ORDER_ID AS OMS_ORDER_ID,
  DETAIL.OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  DETAIL.ORDER_CAPTURE_CHANNEL AS ORDER_CAPTURE_CHANNEL,
  DETAIL.ORDER_CAPTURE_DEVICE AS ORDER_CAPTURE_DEVICE,
  DETAIL.ORDER_AUTO_SHIPMENT_FLAG AS ORDER_AUTO_SHIPMENT_FLAG,
  DETAIL.ORDER_AUTO_SHIPMENT_NBR AS ORDER_AUTO_SHIPMENT_NBR,
  DETAIL.ORDER_ITEM_DELIVERY_METHOD AS ORDER_ITEM_DELIVERY_METHOD,
  DETAIL.ORDER_ITEM_ADD_ON_FLAG AS ORDER_ITEM_ADD_ON_FLAG,
  DETAIL.ORDER_ITEM_PRESCRIPTION_FLAG AS ORDER_ITEM_PRESCRIPTION_FLAG,
  DETAIL.ORDER_ITEM_GROUP AS ORDER_ITEM_GROUP,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  DETAIL.ORDER_ITEM_SCHED_DELIVERY_FLAG AS ORDER_ITEM_SCHED_DELIVERY_FLAG,
  MASTER.PURCHASE_ORDERS_ID AS PURCHASE_ORDERS_ID,
  MASTER.PURCHASE_ORDERS_LN_ITEM_ID AS PURCHASE_ORDERS_LN_ITEM_ID,
  MASTER.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  MASTER.ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  MASTER.ADD_ON_FLAG AS ADD_ON_FLAG,
  MASTER.SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  MASTER.ORDER_TYPE AS ORDER_TYPE,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  AGG_10 MASTER
  LEFT JOIN SQ_Shortcut_to_OMS_ORDER_LN_ATTR_1 DETAIL ON MASTER.PURCHASE_ORDERS_ID = DETAIL.OMS_ORDER_ID
  AND MASTER.PURCHASE_ORDERS_LN_ITEM_ID = DETAIL.OMS_ORDER_LN_ID"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("JNR_PRE_DW_tables_11")

# COMMAND ----------
# DBTITLE 1, EXP_CALC_12


query_12 = f"""SELECT
  PURCHASE_ORDERS_ID AS PURCHASE_ORDERS_ID,
  PURCHASE_ORDERS_LN_ITEM_ID AS PURCHASE_ORDERS_LN_ITEM_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  IFF(
    LTRIM(RTRIM(UPPER(ORDER_TYPE))) = 'SUBSCRIPTION',
    1,
    0
  ) AS o_ORDER_AUTO_SHIPMENT_FLAG,
  OMS_ORDER_ID AS lkp_OMS_ORDER_ID,
  ORDER_CAPTURE_CHANNEL AS lkp_ORDER_CAPTURE_CHANNEL,
  ORDER_CAPTURE_DEVICE AS lkp_ORDER_CAPTURE_DEVICE,
  ORDER_AUTO_SHIPMENT_FLAG AS lkp_ORDER_AUTO_SHIPMENT_FLAG,
  ORDER_AUTO_SHIPMENT_NBR AS lkp_ORDER_AUTO_SHIPMENT_NBR,
  ORDER_ITEM_DELIVERY_METHOD AS lkp_ORDER_ITEM_DELIVERY_METHOD,
  ORDER_ITEM_ADD_ON_FLAG AS lkp_ORDER_ITEM_ADD_ON_FLAG,
  ORDER_ITEM_PRESCRIPTION_FLAG AS lkp_ORDER_ITEM_PRESCRIPTION_FLAG,
  ORDER_ITEM_GROUP AS lkp_ORDER_ITEM_GROUP,
  LOAD_TSTMP AS lkp_LOAD_TSTMP,
  ORDER_ITEM_SCHED_DELIVERY_FLAG AS lkp_ORDER_ITEM_SCHED_DELIVERY_FLAG,
  now() AS o_UPDATE_TSTMP,
  IFF(ISNULL(LOAD_TSTMP), now(), LOAD_TSTMP) AS o_LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_PRE_DW_tables_11"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("EXP_CALC_12")

# COMMAND ----------
# DBTITLE 1, EXP_UPD_FLG_13


query_13 = f"""SELECT
  PURCHASE_ORDERS_ID AS PURCHASE_ORDERS_ID,
  PURCHASE_ORDERS_LN_ITEM_ID AS PURCHASE_ORDERS_LN_ITEM_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  o_ORDER_AUTO_SHIPMENT_FLAG AS ORDER_AUTO_SHIPMENT_FLAG,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  IFF(
    ISNULL(lkp_OMS_ORDER_ID),
    'I',
    IFF(
      (
        NOT ISNULL(lkp_OMS_ORDER_ID)
        AND IFF(
          ISNULL(ORDER_CREATION_CHANNEL),
          ' ',
          ORDER_CREATION_CHANNEL
        ) <> IFF(
          ISNULL(lkp_ORDER_CAPTURE_CHANNEL),
          ' ',
          lkp_ORDER_CAPTURE_CHANNEL
        )
        OR IFF(
          ISNULL(ORDER_FULFILLMENT_CHANNEL),
          ' ',
          ORDER_FULFILLMENT_CHANNEL
        ) <> IFF(
          ISNULL(lkp_ORDER_ITEM_DELIVERY_METHOD),
          ' ',
          lkp_ORDER_ITEM_DELIVERY_METHOD
        )
        OR IFF(
          ISNULL(o_ORDER_AUTO_SHIPMENT_FLAG),
          -1,
          o_ORDER_AUTO_SHIPMENT_FLAG
        ) <> IFF(
          ISNULL(lkp_ORDER_AUTO_SHIPMENT_FLAG),
          -1,
          lkp_ORDER_AUTO_SHIPMENT_FLAG
        )
        OR IFF(ISNULL(SCHED_DELIVERY_FLG), -1, SCHED_DELIVERY_FLG) <> IFF(
          ISNULL(lkp_ORDER_ITEM_SCHED_DELIVERY_FLAG),
          -1,
          lkp_ORDER_ITEM_SCHED_DELIVERY_FLAG
        )
        OR IFF(ISNULL(ADD_ON_FLAG), -1, ADD_ON_FLAG) <> IFF(
          ISNULL(lkp_ORDER_ITEM_ADD_ON_FLAG),
          -1,
          lkp_ORDER_ITEM_ADD_ON_FLAG
        )
      ),
      'U',
      'R'
    )
  ) AS UPD_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_CALC_12"""

df_13 = spark.sql(query_13)

df_13.createOrReplaceTempView("EXP_UPD_FLG_13")

# COMMAND ----------
# DBTITLE 1, FIL_LOGIC_14


query_14 = f"""SELECT
  PURCHASE_ORDERS_ID AS PURCHASE_ORDERS_ID1,
  PURCHASE_ORDERS_LN_ITEM_ID AS PURCHASE_ORDERS_LN_ITEM_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  ORDER_AUTO_SHIPMENT_FLAG AS ORDER_AUTO_SHIPMENT_FLAG,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  UPD_FLAG AS UPD_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_UPD_FLG_13
WHERE
  IN(UPD_FLAG, 'I', 'U')"""

df_14 = spark.sql(query_14)

df_14.createOrReplaceTempView("FIL_LOGIC_14")

# COMMAND ----------
# DBTITLE 1, UPD_FLAG_15


query_15 = f"""SELECT
  PURCHASE_ORDERS_ID1 AS PURCHASE_ORDERS_ID1,
  PURCHASE_ORDERS_LN_ITEM_ID AS PURCHASE_ORDERS_LN_ITEM_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  ORDER_AUTO_SHIPMENT_FLAG AS ORDER_AUTO_SHIPMENT_FLAG,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  UPD_FLAG AS UPD_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(UPD_FLAG = 'I', 'DD_INSERT', 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  FIL_LOGIC_14"""

df_15 = spark.sql(query_15)

df_15.createOrReplaceTempView("UPD_FLAG_15")

# COMMAND ----------
# DBTITLE 1, OMS_ORDER_LN_ATTR


spark.sql("""MERGE INTO OMS_ORDER_LN_ATTR AS TARGET
USING
  UPD_FLAG_15 AS SOURCE ON TARGET.OMS_ORDER_LN_ID = SOURCE.PURCHASE_ORDERS_LN_ITEM_ID
  AND TARGET.OMS_ORDER_ID = SOURCE.PURCHASE_ORDERS_ID1
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.OMS_ORDER_ID = SOURCE.PURCHASE_ORDERS_ID1,
  TARGET.OMS_ORDER_LN_ID = SOURCE.PURCHASE_ORDERS_LN_ITEM_ID,
  TARGET.ORDER_CAPTURE_CHANNEL = SOURCE.ORDER_CREATION_CHANNEL,
  TARGET.ORDER_AUTO_SHIPMENT_FLAG = SOURCE.ORDER_AUTO_SHIPMENT_FLAG,
  TARGET.ORDER_ITEM_DELIVERY_METHOD = SOURCE.ORDER_FULFILLMENT_CHANNEL,
  TARGET.ORDER_ITEM_SCHED_DELIVERY_FLAG = SOURCE.SCHED_DELIVERY_FLG,
  TARGET.ORDER_ITEM_ADD_ON_FLAG = SOURCE.ADD_ON_FLAG,
  TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.ORDER_CAPTURE_CHANNEL = SOURCE.ORDER_CREATION_CHANNEL
  AND TARGET.ORDER_AUTO_SHIPMENT_FLAG = SOURCE.ORDER_AUTO_SHIPMENT_FLAG
  AND TARGET.ORDER_ITEM_DELIVERY_METHOD = SOURCE.ORDER_FULFILLMENT_CHANNEL
  AND TARGET.ORDER_ITEM_SCHED_DELIVERY_FLAG = SOURCE.SCHED_DELIVERY_FLG
  AND TARGET.ORDER_ITEM_ADD_ON_FLAG = SOURCE.ADD_ON_FLAG
  AND TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.OMS_ORDER_ID,
    TARGET.OMS_ORDER_LN_ID,
    TARGET.ORDER_CAPTURE_CHANNEL,
    TARGET.ORDER_AUTO_SHIPMENT_FLAG,
    TARGET.ORDER_ITEM_DELIVERY_METHOD,
    TARGET.ORDER_ITEM_SCHED_DELIVERY_FLAG,
    TARGET.ORDER_ITEM_ADD_ON_FLAG,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.PURCHASE_ORDERS_ID1,
    SOURCE.PURCHASE_ORDERS_LN_ITEM_ID,
    SOURCE.ORDER_CREATION_CHANNEL,
    SOURCE.ORDER_AUTO_SHIPMENT_FLAG,
    SOURCE.ORDER_FULFILLMENT_CHANNEL,
    SOURCE.SCHED_DELIVERY_FLG,
    SOURCE.ADD_ON_FLAG,
    SOURCE.o_UPDATE_TSTMP,
    SOURCE.o_LOAD_TSTMP
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_OMS_Order_LN_ATTR")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_OMS_Order_LN_ATTR", mainWorkflowId, parentName)
