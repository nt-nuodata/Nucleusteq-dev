# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DDS_OMS_RLM_Return_Orders_Line_Item")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_DDS_OMS_RLM_Return_Orders_Line_Item", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_PRE_0


query_0 = f"""SELECT
  RETURN_ORDERS_LINE_ITEM_ID AS RETURN_ORDERS_LINE_ITEM_ID,
  RETURN_ORDERS_ID AS RETURN_ORDERS_ID,
  RETURN_REASON_ID AS RETURN_REASON_ID,
  RETURN_ACTION_ID AS RETURN_ACTION_ID,
  EXPECTED_RECEIVING_CONDITION AS EXPECTED_RECEIVING_CONDITION,
  IS_RECEIVABLE AS IS_RECEIVABLE,
  RECEIVING_VARIANCE_CODE AS RECEIVING_VARIANCE_CODE,
  UNIT_SHIPPING_HANDLING_CHARGE AS UNIT_SHIPPING_HANDLING_CHARGE,
  TOTAL_FEE AS TOTAL_FEE,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_RLM_RETURN_ORDERS_LINE_ITEM_PRE"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_PRE_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_PRE_1


query_1 = f"""SELECT
  RETURN_ORDERS_LINE_ITEM_ID AS RETURN_ORDERS_LINE_ITEM_ID,
  RETURN_ORDERS_ID AS RETURN_ORDERS_ID,
  RETURN_REASON_ID AS RETURN_REASON_ID,
  RETURN_ACTION_ID AS RETURN_ACTION_ID,
  EXPECTED_RECEIVING_CONDITION AS EXPECTED_RECEIVING_CONDITION,
  IS_RECEIVABLE AS IS_RECEIVABLE,
  RECEIVING_VARIANCE_CODE AS RECEIVING_VARIANCE_CODE,
  UNIT_SHIPPING_HANDLING_CHARGE AS UNIT_SHIPPING_HANDLING_CHARGE,
  TOTAL_FEE AS TOTAL_FEE,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_PRE_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_PRE_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_2


query_2 = f"""SELECT
  OMS_RETURN_ORDERS_LINE_ITEM_ID AS OMS_RETURN_ORDERS_LINE_ITEM_ID,
  OMS_RETURN_ORDERS_ID AS OMS_RETURN_ORDERS_ID,
  OMS_RETURN_REASON_ID AS OMS_RETURN_REASON_ID,
  OMS_RETURN_ACTION_ID AS OMS_RETURN_ACTION_ID,
  RECEIVABLE_FLAG AS RECEIVABLE_FLAG,
  EXPECTED_RECEIVING_CONDITION AS EXPECTED_RECEIVING_CONDITION,
  OMS_RECEIVING_VARIANCE_CD AS OMS_RECEIVING_VARIANCE_CD,
  UNIT_SHIPPING_HANDLING_CHARGE_AMT AS UNIT_SHIPPING_HANDLING_CHARGE_AMT,
  TOTAL_FEE AS TOTAL_FEE,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_RLM_RETURN_ORDERS_LINE_ITEM"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_3


query_3 = f"""SELECT
  OMS_RETURN_ORDERS_LINE_ITEM_ID AS OMS_RETURN_ORDERS_LINE_ITEM_ID,
  OMS_RETURN_ORDERS_ID AS OMS_RETURN_ORDERS_ID,
  OMS_RETURN_REASON_ID AS OMS_RETURN_REASON_ID,
  OMS_RETURN_ACTION_ID AS OMS_RETURN_ACTION_ID,
  RECEIVABLE_FLAG AS RECEIVABLE_FLAG,
  EXPECTED_RECEIVING_CONDITION AS EXPECTED_RECEIVING_CONDITION,
  OMS_RECEIVING_VARIANCE_CD AS OMS_RECEIVING_VARIANCE_CD,
  UNIT_SHIPPING_HANDLING_CHARGE_AMT AS UNIT_SHIPPING_HANDLING_CHARGE_AMT,
  TOTAL_FEE AS TOTAL_FEE,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_3")

# COMMAND ----------
# DBTITLE 1, JNR_OMS_RLM_RETURN_ORDERS_LINE_ITEM_4


query_4 = f"""SELECT
  DETAIL.RETURN_ORDERS_LINE_ITEM_ID AS RETURN_ORDERS_LINE_ITEM_ID,
  DETAIL.RETURN_ORDERS_ID AS RETURN_ORDERS_ID,
  DETAIL.RETURN_REASON_ID AS RETURN_REASON_ID,
  DETAIL.RETURN_ACTION_ID AS RETURN_ACTION_ID,
  DETAIL.EXPECTED_RECEIVING_CONDITION AS EXPECTED_RECEIVING_CONDITION,
  DETAIL.IS_RECEIVABLE AS IS_RECEIVABLE,
  DETAIL.RECEIVING_VARIANCE_CODE AS RECEIVING_VARIANCE_CODE,
  DETAIL.UNIT_SHIPPING_HANDLING_CHARGE AS UNIT_SHIPPING_HANDLING_CHARGE,
  DETAIL.TOTAL_FEE AS TOTAL_FEE,
  MASTER.OMS_RETURN_ORDERS_LINE_ITEM_ID AS lkp_OMS_RETURN_ORDERS_LINE_ITEM_ID,
  MASTER.OMS_RETURN_ORDERS_ID AS lkp_OMS_RETURN_ORDERS_ID,
  MASTER.OMS_RETURN_REASON_ID AS lkp_OMS_RETURN_REASON_ID,
  MASTER.OMS_RETURN_ACTION_ID AS lkp_OMS_RETURN_ACTION_ID,
  MASTER.RECEIVABLE_FLAG AS lkp_RECEIVABLE_FLAG,
  MASTER.EXPECTED_RECEIVING_CONDITION AS lkp_EXPECTED_RECEIVING_CONDITION1,
  MASTER.OMS_RECEIVING_VARIANCE_CD AS lkp_OMS_RECEIVING_VARIANCE_CD,
  MASTER.UNIT_SHIPPING_HANDLING_CHARGE_AMT AS lkp_UNIT_SHIPPING_HANDLING_CHARGE_AMT,
  MASTER.TOTAL_FEE AS lkp_TOTAL_FEE,
  MASTER.LOAD_TSTMP AS lkp_LOAD_TSTMP,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_3 MASTER
  RIGHT JOIN SQ_Shortcut_to_OMS_RLM_RETURN_ORDERS_LINE_ITEM_PRE_1 DETAIL ON MASTER.OMS_RETURN_ORDERS_LINE_ITEM_ID = DETAIL.RETURN_ORDERS_LINE_ITEM_ID"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("JNR_OMS_RLM_RETURN_ORDERS_LINE_ITEM_4")

# COMMAND ----------
# DBTITLE 1, FTR_UNCHANGED_REC_5


query_5 = f"""SELECT
  RETURN_ORDERS_LINE_ITEM_ID AS RETURN_ORDERS_LINE_ITEM_ID,
  RETURN_ORDERS_ID AS RETURN_ORDERS_ID,
  RETURN_REASON_ID AS RETURN_REASON_ID,
  RETURN_ACTION_ID AS RETURN_ACTION_ID,
  EXPECTED_RECEIVING_CONDITION AS EXPECTED_RECEIVING_CONDITION,
  IS_RECEIVABLE AS IS_RECEIVABLE,
  RECEIVING_VARIANCE_CODE AS RECEIVING_VARIANCE_CODE,
  UNIT_SHIPPING_HANDLING_CHARGE AS UNIT_SHIPPING_HANDLING_CHARGE,
  TOTAL_FEE AS TOTAL_FEE,
  lkp_OMS_RETURN_ORDERS_LINE_ITEM_ID AS lkp_OMS_RETURN_ORDERS_LINE_ITEM_ID,
  lkp_OMS_RETURN_ORDERS_ID AS lkp_OMS_RETURN_ORDERS_ID,
  lkp_OMS_RETURN_REASON_ID AS lkp_OMS_RETURN_REASON_ID,
  lkp_OMS_RETURN_ACTION_ID AS lkp_OMS_RETURN_ACTION_ID,
  lkp_RECEIVABLE_FLAG AS lkp_RECEIVABLE_FLAG,
  lkp_EXPECTED_RECEIVING_CONDITION1 AS lkp_EXPECTED_RECEIVING_CONDITION1,
  lkp_OMS_RECEIVING_VARIANCE_CD AS lkp_OMS_RECEIVING_VARIANCE_CD,
  lkp_UNIT_SHIPPING_HANDLING_CHARGE_AMT AS lkp_UNIT_SHIPPING_HANDLING_CHARGE_AMT,
  lkp_TOTAL_FEE AS lkp_TOTAL_FEE,
  lkp_LOAD_TSTMP AS lkp_LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_OMS_RLM_RETURN_ORDERS_LINE_ITEM_4
WHERE
  ISNULL(lkp_OMS_RETURN_ORDERS_LINE_ITEM_ID)
  OR (
    NOT ISNULL(lkp_OMS_RETURN_ORDERS_LINE_ITEM_ID)
    AND (
      IFF(
        ISNULL(RETURN_ORDERS_ID),
        TO_INTEGER(999999999),
        RETURN_ORDERS_ID
      ) <> IFF(
        ISNULL(lkp_OMS_RETURN_ORDERS_ID),
        TO_INTEGER(999999999),
        lkp_OMS_RETURN_ORDERS_ID
      )
      OR IFF(
        ISNULL(RETURN_ACTION_ID),
        TO_INTEGER(999999999),
        RETURN_ACTION_ID
      ) <> IFF(
        ISNULL(lkp_OMS_RETURN_ACTION_ID),
        TO_INTEGER(999999999),
        lkp_OMS_RETURN_ACTION_ID
      )
      OR IFF (
        ISNULL(LTRIM(RTRIM(RETURN_REASON_ID))),
        ' ',
        LTRIM(RTRIM(RETURN_REASON_ID))
      ) <> IFF(
        ISNULL(LTRIM(RTRIM(lkp_OMS_RETURN_REASON_ID))),
        ' ',
        LTRIM(RTRIM(lkp_OMS_RETURN_REASON_ID))
      )
      OR IFF (
        ISNULL(LTRIM(RTRIM(EXPECTED_RECEIVING_CONDITION))),
        ' ',
        LTRIM(RTRIM(EXPECTED_RECEIVING_CONDITION))
      ) <> IFF(
        ISNULL(LTRIM(RTRIM(lkp_EXPECTED_RECEIVING_CONDITION1))),
        ' ',
        LTRIM(RTRIM(lkp_EXPECTED_RECEIVING_CONDITION1))
      )
      OR IFF(
        ISNULL(lkp_RECEIVABLE_FLAG),
        TO_INTEGER(999999999),
        lkp_RECEIVABLE_FLAG
      ) <> IFF(
        ISNULL(IS_RECEIVABLE),
        TO_INTEGER(999999999),
        IS_RECEIVABLE
      )
      OR IFF(
        ISNULL(RECEIVING_VARIANCE_CODE),
        TO_INTEGER(999999999),
        RECEIVING_VARIANCE_CODE
      ) <> IFF(
        ISNULL(lkp_OMS_RECEIVING_VARIANCE_CD),
        TO_INTEGER(999999999),
        lkp_OMS_RECEIVING_VARIANCE_CD
      )
      OR IFF(
        ISNULL(UNIT_SHIPPING_HANDLING_CHARGE),
        TO_INTEGER(999999999),
        UNIT_SHIPPING_HANDLING_CHARGE
      ) <> IFF(
        ISNULL(lkp_UNIT_SHIPPING_HANDLING_CHARGE_AMT),
        TO_INTEGER(999999999),
        lkp_UNIT_SHIPPING_HANDLING_CHARGE_AMT
      )
      OR IFF(
        ISNULL(TOTAL_FEE),
        TO_INTEGER(999999999),
        TOTAL_FEE
      ) <> IFF(
        ISNULL(lkp_TOTAL_FEE),
        TO_INTEGER(999999999),
        lkp_TOTAL_FEE
      )
    )
  )"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("FTR_UNCHANGED_REC_5")

# COMMAND ----------
# DBTITLE 1, EXP_VALID_FLAG_6


query_6 = f"""SELECT
  RETURN_ORDERS_LINE_ITEM_ID AS RETURN_ORDERS_LINE_ITEM_ID,
  RETURN_ORDERS_ID AS RETURN_ORDERS_ID,
  RETURN_REASON_ID AS RETURN_REASON_ID,
  RETURN_ACTION_ID AS RETURN_ACTION_ID,
  EXPECTED_RECEIVING_CONDITION AS EXPECTED_RECEIVING_CONDITION,
  IS_RECEIVABLE AS IS_RECEIVABLE,
  RECEIVING_VARIANCE_CODE AS RECEIVING_VARIANCE_CODE,
  UNIT_SHIPPING_HANDLING_CHARGE AS UNIT_SHIPPING_HANDLING_CHARGE,
  TOTAL_FEE AS TOTAL_FEE,
  lkp_OMS_RETURN_ORDERS_LINE_ITEM_ID AS lkp_OMS_RETURN_ORDERS_LINE_ITEM_ID,
  lkp_LOAD_TSTMP AS lkp_LOAD_TSTMP,
  now() AS UPDATE_TSTMP,
  IFF(ISNULL(lkp_LOAD_TSTMP), now(), lkp_LOAD_TSTMP) AS LOAD_TSTMP_exp,
  IFF(ISNULL(lkp_OMS_RETURN_ORDERS_LINE_ITEM_ID), 1, 2) AS VALID_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FTR_UNCHANGED_REC_5"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("EXP_VALID_FLAG_6")

# COMMAND ----------
# DBTITLE 1, UPD_INS_UPD_7


query_7 = f"""SELECT
  RETURN_ORDERS_LINE_ITEM_ID AS RETURN_ORDERS_LINE_ITEM_ID,
  RETURN_ORDERS_ID AS RETURN_ORDERS_ID,
  RETURN_REASON_ID AS RETURN_REASON_ID,
  RETURN_ACTION_ID AS RETURN_ACTION_ID,
  IS_RECEIVABLE AS IS_RECEIVABLE,
  EXPECTED_RECEIVING_CONDITION AS EXPECTED_RECEIVING_CONDITION,
  RECEIVING_VARIANCE_CODE AS RECEIVING_VARIANCE_CODE,
  UNIT_SHIPPING_HANDLING_CHARGE AS UNIT_SHIPPING_HANDLING_CHARGE,
  TOTAL_FEE AS TOTAL_FEE,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP_exp AS LOAD_TSTMP_exp,
  VALID_FLAG AS VALID_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(VALID_FLAG, 1, 'DD_INSERT', 2, 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  EXP_VALID_FLAG_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("UPD_INS_UPD_7")

# COMMAND ----------
# DBTITLE 1, OMS_RLM_RETURN_ORDERS_LINE_ITEM


spark.sql("""MERGE INTO OMS_RLM_RETURN_ORDERS_LINE_ITEM AS TARGET
USING
  UPD_INS_UPD_7 AS SOURCE ON TARGET.OMS_RETURN_ORDERS_LINE_ITEM_ID = SOURCE.RETURN_ORDERS_LINE_ITEM_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.OMS_RETURN_ORDERS_LINE_ITEM_ID = SOURCE.RETURN_ORDERS_LINE_ITEM_ID,
  TARGET.OMS_RETURN_ORDERS_ID = SOURCE.RETURN_ORDERS_ID,
  TARGET.OMS_RETURN_REASON_ID = SOURCE.RETURN_REASON_ID,
  TARGET.OMS_RETURN_ACTION_ID = SOURCE.RETURN_ACTION_ID,
  TARGET.RECEIVABLE_FLAG = SOURCE.IS_RECEIVABLE,
  TARGET.EXPECTED_RECEIVING_CONDITION = SOURCE.EXPECTED_RECEIVING_CONDITION,
  TARGET.OMS_RECEIVING_VARIANCE_CD = SOURCE.RECEIVING_VARIANCE_CODE,
  TARGET.UNIT_SHIPPING_HANDLING_CHARGE_AMT = SOURCE.UNIT_SHIPPING_HANDLING_CHARGE,
  TARGET.TOTAL_FEE = SOURCE.TOTAL_FEE,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP_exp
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.OMS_RETURN_ORDERS_ID = SOURCE.RETURN_ORDERS_ID
  AND TARGET.OMS_RETURN_REASON_ID = SOURCE.RETURN_REASON_ID
  AND TARGET.OMS_RETURN_ACTION_ID = SOURCE.RETURN_ACTION_ID
  AND TARGET.RECEIVABLE_FLAG = SOURCE.IS_RECEIVABLE
  AND TARGET.EXPECTED_RECEIVING_CONDITION = SOURCE.EXPECTED_RECEIVING_CONDITION
  AND TARGET.OMS_RECEIVING_VARIANCE_CD = SOURCE.RECEIVING_VARIANCE_CODE
  AND TARGET.UNIT_SHIPPING_HANDLING_CHARGE_AMT = SOURCE.UNIT_SHIPPING_HANDLING_CHARGE
  AND TARGET.TOTAL_FEE = SOURCE.TOTAL_FEE
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP_exp THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.OMS_RETURN_ORDERS_LINE_ITEM_ID,
    TARGET.OMS_RETURN_ORDERS_ID,
    TARGET.OMS_RETURN_REASON_ID,
    TARGET.OMS_RETURN_ACTION_ID,
    TARGET.RECEIVABLE_FLAG,
    TARGET.EXPECTED_RECEIVING_CONDITION,
    TARGET.OMS_RECEIVING_VARIANCE_CD,
    TARGET.UNIT_SHIPPING_HANDLING_CHARGE_AMT,
    TARGET.TOTAL_FEE,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.RETURN_ORDERS_LINE_ITEM_ID,
    SOURCE.RETURN_ORDERS_ID,
    SOURCE.RETURN_REASON_ID,
    SOURCE.RETURN_ACTION_ID,
    SOURCE.IS_RECEIVABLE,
    SOURCE.EXPECTED_RECEIVING_CONDITION,
    SOURCE.RECEIVING_VARIANCE_CODE,
    SOURCE.UNIT_SHIPPING_HANDLING_CHARGE,
    SOURCE.TOTAL_FEE,
    SOURCE.UPDATE_TSTMP,
    SOURCE.LOAD_TSTMP_exp
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DDS_OMS_RLM_Return_Orders_Line_Item")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_DDS_OMS_RLM_Return_Orders_Line_Item", mainWorkflowId, parentName)
