# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_OMS_Dist_Order_LN_SLA_Channel")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_OMS_Dist_Order_LN_SLA_Channel", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_ORDER_CHANNEL_SLA_DAY_0


query_0 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  SLA_DAY_DT AS SLA_DAY_DT,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SITE_ORDER_CHANNEL_SLA_DAY"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_SITE_ORDER_CHANNEL_SLA_DAY_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_ORDER_CHANNEL_SLA_DAY_1


query_1 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  SLA_DAY_DT AS SLA_DAY_DT,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_ORDER_CHANNEL_SLA_DAY_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_SITE_ORDER_CHANNEL_SLA_DAY_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_SHIPMENT_2


query_2 = f"""SELECT
  SHIPMENT_ID AS SHIPMENT_ID,
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  TC_COMPANY_ID AS TC_COMPANY_ID,
  RS_AREA_ID AS RS_AREA_ID,
  TC_SHIPMENT_ID AS TC_SHIPMENT_ID,
  PP_SHIPMENT_ID AS PP_SHIPMENT_ID,
  SHIPMENT_STATUS AS SHIPMENT_STATUS,
  UPDATE_SENT AS UPDATE_SENT,
  BUSINESS_PROCESS AS BUSINESS_PROCESS,
  CREATION_TYPE AS CREATION_TYPE,
  CONS_RUN_ID AS CONS_RUN_ID,
  IS_CANCELLED AS IS_CANCELLED,
  RS_TYPE AS RS_TYPE,
  RS_CONFIG_ID AS RS_CONFIG_ID,
  RS_CONFIG_CYCLE_ID AS RS_CONFIG_CYCLE_ID,
  CONFIG_CYCLE_SEQ AS CONFIG_CYCLE_SEQ,
  CYCLE_DEADLINE_DT AS CYCLE_DEADLINE_DT,
  CYCLE_EXECUTION_DT AS CYCLE_EXECUTION_DT,
  LAST_RS_NOTIFICATION_DT AS LAST_RS_NOTIFICATION_DT,
  CFMF_STATUS AS CFMF_STATUS,
  AVAILABLE_DT AS AVAILABLE_DT,
  CMID AS CMID,
  CM_DISCOUNT AS CM_DISCOUNT,
  O_FACILITY_NBR AS O_FACILITY_NBR,
  O_FACILITY_ID AS O_FACILITY_ID,
  O_ADDRESS AS O_ADDRESS,
  O_CITY AS O_CITY,
  O_STATE_PROV AS O_STATE_PROV,
  O_POSTAL_CD AS O_POSTAL_CD,
  O_COUNTY AS O_COUNTY,
  O_COUNTRY_CD AS O_COUNTRY_CD,
  D_FACILITY_NBR AS D_FACILITY_NBR,
  D_FACILITY_ID AS D_FACILITY_ID,
  D_ADDRESS AS D_ADDRESS,
  D_CITY AS D_CITY,
  D_STATE_PROV AS D_STATE_PROV,
  D_POSTAL_CD AS D_POSTAL_CD,
  D_COUNTY AS D_COUNTY,
  D_COUNTRY_CD AS D_COUNTRY_CD,
  DISTANCE AS DISTANCE,
  DIRECT_DISTANCE AS DIRECT_DISTANCE,
  OUT_OF_ROUTE_DISTANCE AS OUT_OF_ROUTE_DISTANCE,
  DISTANCE_UOM AS DISTANCE_UOM,
  BUSINESS_PARTNER_ID AS BUSINESS_PARTNER_ID,
  COMMODITY_CLASS AS COMMODITY_CLASS,
  IS_HAZMAT AS IS_HAZMAT,
  IS_PERISHABLE AS IS_PERISHABLE,
  BILLING_METHOD AS BILLING_METHOD,
  DSG_CARRIER_CD AS DSG_CARRIER_CD,
  REC_CMID AS REC_CMID,
  REC_CM_SHIPMENT_ID AS REC_CM_SHIPMENT_ID,
  ASSIGNED_CARRIER_CD AS ASSIGNED_CARRIER_CD,
  SHIPMENT_REF_ID AS SHIPMENT_REF_ID,
  BILL_TO_CD AS BILL_TO_CD,
  BILL_TO_TITLE AS BILL_TO_TITLE,
  BILL_TO_NAME AS BILL_TO_NAME,
  BILL_TO_ADDRESS AS BILL_TO_ADDRESS,
  BILL_TO_CITY AS BILL_TO_CITY,
  BILL_TO_STATE_PROV AS BILL_TO_STATE_PROV,
  BILL_TO_POSTAL_CD AS BILL_TO_POSTAL_CD,
  BILL_TO_COUNTRY_CD AS BILL_TO_COUNTRY_CD,
  BILL_TO_PHONE_NBR AS BILL_TO_PHONE_NBR,
  PURCHASE_ORDER AS PURCHASE_ORDER,
  PRO_NBR AS PRO_NBR,
  TRANS_RESP_CD AS TRANS_RESP_CD,
  BASELINE_COST AS BASELINE_COST,
  ESTIMATED_COST AS ESTIMATED_COST,
  LINEHAUL_COST AS LINEHAUL_COST,
  ACCESSORIAL_COST AS ACCESSORIAL_COST,
  STOP_COST AS STOP_COST,
  ESTIMATED_SAVINGS AS ESTIMATED_SAVINGS,
  SPOT_CHARGE AS SPOT_CHARGE,
  CURRENCY_CD AS CURRENCY_CD,
  PICKUP_START_DT AS PICKUP_START_DT,
  PICKUP_END_DT AS PICKUP_END_DT,
  DELIVERY_START_DT AS DELIVERY_START_DT,
  DELIVERY_END_DT AS DELIVERY_END_DT,
  NUM_STOPS AS NUM_STOPS,
  NUM_DOCKS AS NUM_DOCKS,
  ON_TIME_INDICATOR AS ON_TIME_INDICATOR,
  HAS_NOTES AS HAS_NOTES,
  HAS_ALERTS AS HAS_ALERTS,
  HAS_IMPORT_ERROR AS HAS_IMPORT_ERROR,
  HAS_SOFT_CHECK_ERROR AS HAS_SOFT_CHECK_ERROR,
  HAS_TRACKING_MSG AS HAS_TRACKING_MSG,
  TRACKING_MSG_PROBLEM AS TRACKING_MSG_PROBLEM,
  REC_LINEHAUL_COST AS REC_LINEHAUL_COST,
  REC_ACCESSORIAL_COST AS REC_ACCESSORIAL_COST,
  REC_TOTAL_COST AS REC_TOTAL_COST,
  CYCLE_RESP_DEADLINE_TZ AS CYCLE_RESP_DEADLINE_TZ,
  TENDER_RESP_DEADLINE_TZ AS TENDER_RESP_DEADLINE_TZ,
  PICKUP_TZ AS PICKUP_TZ,
  DELIVERY_TZ AS DELIVERY_TZ,
  ASSIGNED_LANE_ID AS ASSIGNED_LANE_ID,
  ASSIGNED_LANE_DETAIL_ID AS ASSIGNED_LANE_DETAIL_ID,
  REC_SPOT_CHARGE AS REC_SPOT_CHARGE,
  REC_LANE_ID AS REC_LANE_ID,
  REC_LANE_DETAIL_ID AS REC_LANE_DETAIL_ID,
  TENDER_DT AS TENDER_DT,
  O_STOP_LOCATION_NAME AS O_STOP_LOCATION_NAME,
  D_STOP_LOCATION_NAME AS D_STOP_LOCATION_NAME,
  ASSIGNED_CM_SHIPMENT_ID AS ASSIGNED_CM_SHIPMENT_ID,
  REC_CM_DISCOUNT AS REC_CM_DISCOUNT,
  REC_STOP_COST AS REC_STOP_COST,
  LAST_SELECTOR_RUN_DT AS LAST_SELECTOR_RUN_DT,
  LAST_CM_OPTION_GEN_DT AS LAST_CM_OPTION_GEN_DT,
  IS_CM_OPTION_GEN_ACTIVE AS IS_CM_OPTION_GEN_ACTIVE,
  RS_CYCLE_REMAINING AS RS_CYCLE_REMAINING,
  IS_TIME_FEAS_D AS IS_TIME_FEAS_D,
  EXT_SYS_SHIPMENT_ID AS EXT_SYS_SHIPMENT_ID,
  EXTRACTION_DT AS EXTRACTION_DT,
  ASSIGNED_BROKER_CARRIER_CD AS ASSIGNED_BROKER_CARRIER_CD,
  USE_BROKER_AS_CARRIER AS USE_BROKER_AS_CARRIER,
  BROKER_REF AS BROKER_REF,
  RATING_QUALIFIER AS RATING_QUALIFIER,
  STATUS_CHANGE_DT AS STATUS_CHANGE_DT,
  BUDG_TOTAL_COST AS BUDG_TOTAL_COST,
  NORMALIZED_MARGIN AS NORMALIZED_MARGIN,
  NORMALIZED_TOTAL_COST AS NORMALIZED_TOTAL_COST,
  BUDG_NORMALIZED_TOTAL_COST AS BUDG_NORMALIZED_TOTAL_COST,
  REC_BUDG_LINEHAUL_COST AS REC_BUDG_LINEHAUL_COST,
  REC_BUDG_STOP_COST AS REC_BUDG_STOP_COST,
  REC_BUDG_CM_DISCOUNT AS REC_BUDG_CM_DISCOUNT,
  REC_BUDG_ACCESSORIAL_COST AS REC_BUDG_ACCESSORIAL_COST,
  REC_BUDG_TOTAL_COST AS REC_BUDG_TOTAL_COST,
  REC_MARGIN AS REC_MARGIN,
  REC_NORMALIZED_MARGIN AS REC_NORMALIZED_MARGIN,
  REC_NORMALIZED_TOTAL_COST AS REC_NORMALIZED_TOTAL_COST,
  REC_BUDG_NORMALIZED_TOTAL_COST AS REC_BUDG_NORMALIZED_TOTAL_COST,
  BUDG_CURRENCY_CD AS BUDG_CURRENCY_CD,
  SPOT_CHARGE_CURRENCY_CD AS SPOT_CHARGE_CURRENCY_CD,
  REC_CURRENCY_CD AS REC_CURRENCY_CD,
  REC_BUDG_CURRENCY_CD AS REC_BUDG_CURRENCY_CD,
  REC_SPOT_CHARGE_CURRENCY_CD AS REC_SPOT_CHARGE_CURRENCY_CD,
  RATING_LANE_ID AS RATING_LANE_ID,
  FRT_REV_RATING_LANE_ID AS FRT_REV_RATING_LANE_ID,
  REC_RATING_LANE_ID AS REC_RATING_LANE_ID,
  REC_BUDG_RATING_LANE_ID AS REC_BUDG_RATING_LANE_ID,
  RATING_LANE_DETAIL_ID AS RATING_LANE_DETAIL_ID,
  FRT_REV_RATING_LANE_DETAIL_ID AS FRT_REV_RATING_LANE_DETAIL_ID,
  REC_RATING_LANE_DETAIL_ID AS REC_RATING_LANE_DETAIL_ID,
  REC_BUDG_RATING_LANE_DETAIL_ID AS REC_BUDG_RATING_LANE_DETAIL_ID,
  BUDG_CM_DISCOUNT AS BUDG_CM_DISCOUNT,
  NORMALIZED_BASELINE_COST AS NORMALIZED_BASELINE_COST,
  BASELINE_COST_CURRENCY_CD AS BASELINE_COST_CURRENCY_CD,
  REPORTED_COST AS REPORTED_COST,
  TRACTOR_NBR AS TRACTOR_NBR,
  IS_AUTO_DELIVERED AS IS_AUTO_DELIVERED,
  SHIPMENT_TYPE AS SHIPMENT_TYPE,
  ORIG_BUDG_TOTAL_COST AS ORIG_BUDG_TOTAL_COST,
  ACCESSORIAL_COST_TO_CARRIER AS ACCESSORIAL_COST_TO_CARRIER,
  CARRIER_CHARGE AS CARRIER_CHARGE,
  ACTUAL_COST AS ACTUAL_COST,
  EARNED_INCOME AS EARNED_INCOME,
  SENT_TO_PKMS AS SENT_TO_PKMS,
  IS_SHIPMENT_RECONCILED AS IS_SHIPMENT_RECONCILED,
  DELIVERY_REQ AS DELIVERY_REQ,
  DROPOFF_PICKUP AS DROPOFF_PICKUP,
  PACKAGING AS PACKAGING,
  SENT_TO_PKMS_DT AS SENT_TO_PKMS_DT,
  WMS_STATUS_CD AS WMS_STATUS_CD,
  SPOT_CHARGE_AND_PAYEE_ACC AS SPOT_CHARGE_AND_PAYEE_ACC,
  SPOT_CHARGE_AND_PAYEE_ACC_CC AS SPOT_CHARGE_AND_PAYEE_ACC_CC,
  NORM_SPOT_CHARGE_AND_PAYEE_ACC AS NORM_SPOT_CHARGE_AND_PAYEE_ACC,
  FACILITY_SCHEDULE_ID AS FACILITY_SCHEDULE_ID,
  EARNED_INCOME_CURRENCY_CD AS EARNED_INCOME_CURRENCY_CD,
  ACTUAL_COST_CURRENCY_CD AS ACTUAL_COST_CURRENCY_CD,
  SHIPMENT_RECON_DT AS SHIPMENT_RECON_DT,
  PLN_RATING_LANE_ID AS PLN_RATING_LANE_ID,
  PLN_RATING_LANE_DETAIL_ID AS PLN_RATING_LANE_DETAIL_ID,
  PLN_TOTAL_COST AS PLN_TOTAL_COST,
  PLN_LINEHAUL_COST AS PLN_LINEHAUL_COST,
  PLN_TOTAL_ACCESSORIAL_COST AS PLN_TOTAL_ACCESSORIAL_COST,
  PLN_STOP_OFF_COST AS PLN_STOP_OFF_COST,
  PLN_NORMALIZED_TOTAL_COST AS PLN_NORMALIZED_TOTAL_COST,
  PLN_CURRENCY_CD AS PLN_CURRENCY_CD,
  PLN_ACCESSORL_COST_TO_CARRIER AS PLN_ACCESSORL_COST_TO_CARRIER,
  PLN_CARRIER_CHARGE AS PLN_CARRIER_CHARGE,
  WAYPOINT_TOTAL_COST AS WAYPOINT_TOTAL_COST,
  WAYPOINT_HANDLING_COST AS WAYPOINT_HANDLING_COST,
  GRS_OPERATION AS GRS_OPERATION,
  IS_GRS_OPT_CYCLE_RUNNING AS IS_GRS_OPT_CYCLE_RUNNING,
  IS_MANUAL_ASSIGN AS IS_MANUAL_ASSIGN,
  LAST_RUN_GRS_DT AS LAST_RUN_GRS_DT,
  GRS_MAX_SHIPMENT_STATUS AS GRS_MAX_SHIPMENT_STATUS,
  PRIORITY_TYPE AS PRIORITY_TYPE,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  PROD_SCHED_REF_NBR AS PROD_SCHED_REF_NBR,
  COMMODITY_CODE_ID AS COMMODITY_CODE_ID,
  UN_NUMERIC_ID AS UN_NUMERIC_ID,
  CONTRACT_NBR AS CONTRACT_NBR,
  BOOKING_REF_SHIPPER AS BOOKING_REF_SHIPPER,
  BOOKING_REF_CARRIER AS BOOKING_REF_CARRIER,
  BK_RESOURCE_REF_EXTERNAL AS BK_RESOURCE_REF_EXTERNAL,
  BK_RESOURCE_NAME_EXTERNAL AS BK_RESOURCE_NAME_EXTERNAL,
  BK_O_FACILITY_ID AS BK_O_FACILITY_ID,
  BK_D_FACILITY_ID AS BK_D_FACILITY_ID,
  BK_MASTER_AIRWAY_BILL AS BK_MASTER_AIRWAY_BILL,
  BK_FORWARDER_AIRWAY_BILL AS BK_FORWARDER_AIRWAY_BILL,
  ASSIGNED_SCNDR_CARRIER_CD AS ASSIGNED_SCNDR_CARRIER_CD,
  CUSTOMER_CREDIT_LIMIT_ID AS CUSTOMER_CREDIT_LIMIT_ID,
  SHIPMENT_LEG_TYPE AS SHIPMENT_LEG_TYPE,
  SHIPMENT_CLOSED_INDICATOR AS SHIPMENT_CLOSED_INDICATOR,
  OCEAN_ROUTING_STAGE AS OCEAN_ROUTING_STAGE,
  BK_DEPARTURE_DT AS BK_DEPARTURE_DT,
  BK_DEPARTURE_TZ AS BK_DEPARTURE_TZ,
  BK_ARRIVAL_DT AS BK_ARRIVAL_DT,
  BK_ARRIVAL_TZ AS BK_ARRIVAL_TZ,
  BK_PICKUP_DT AS BK_PICKUP_DT,
  BK_PICKUP_TZ AS BK_PICKUP_TZ,
  BK_CUTOFF_DT AS BK_CUTOFF_DT,
  BK_CUTOFF_TZ AS BK_CUTOFF_TZ,
  NUM_CHARGE_LAYOVERS AS NUM_CHARGE_LAYOVERS,
  RATE_TYPE AS RATE_TYPE,
  RATE_UOM AS RATE_UOM,
  PICK_START_DT AS PICK_START_DT,
  PAPERWORK_START_DT AS PAPERWORK_START_DT,
  VEHICLE_CHECK_START_DT AS VEHICLE_CHECK_START_DT,
  SHIPMENT_START_DT AS SHIPMENT_START_DT,
  SHIPMENT_END_DT AS SHIPMENT_END_DT,
  FEASIBLE_DRIVER_TYPE AS FEASIBLE_DRIVER_TYPE,
  WAVE_ID AS WAVE_ID,
  ESTIMATED_DISPATCH_DT AS ESTIMATED_DISPATCH_DT,
  TOTAL_TIME AS TOTAL_TIME,
  LOC_REFERENCE AS LOC_REFERENCE,
  BK_O_FACILITY_ALIAS_ID AS BK_O_FACILITY_ALIAS_ID,
  BK_D_FACILITY_ALIAS_ID AS BK_D_FACILITY_ALIAS_ID,
  EQUIP_UTIL_PER AS EQUIP_UTIL_PER,
  MOVE_TYPE AS MOVE_TYPE,
  DRIVER_TYPE_ID AS DRIVER_TYPE_ID,
  EQUIPMENT_TYPE AS EQUIPMENT_TYPE,
  RADIAL_DISTANCE AS RADIAL_DISTANCE,
  RADIAL_DISTANCE_UOM AS RADIAL_DISTANCE_UOM,
  DESIGNATED_TRACTOR_CD AS DESIGNATED_TRACTOR_CD,
  DESIGNATED_DRIVER_TYPE AS DESIGNATED_DRIVER_TYPE,
  IS_WAVE_MAN_CHANGED AS IS_WAVE_MAN_CHANGED,
  RETAIN_CONSOLIDATOR_TIMES AS RETAIN_CONSOLIDATOR_TIMES,
  TARIFF AS TARIFF,
  MIN_RATE AS MIN_RATE,
  FIRST_UPDATE_SENT_TO_PKMS AS FIRST_UPDATE_SENT_TO_PKMS,
  EVENT_IND_TYPEID AS EVENT_IND_TYPEID,
  TANDEM_PATH_ID AS TANDEM_PATH_ID,
  O_TANDEM_FACILITY AS O_TANDEM_FACILITY,
  D_TANDEM_FACILITY AS D_TANDEM_FACILITY,
  O_TANDEM_FACILITY_ALIAS AS O_TANDEM_FACILITY_ALIAS,
  D_TANDEM_FACILITY_ALIAS AS D_TANDEM_FACILITY_ALIAS,
  DELAY_TYPE AS DELAY_TYPE,
  ASSIGNED_CARRIER_ID AS ASSIGNED_CARRIER_ID,
  DSG_CARRIER_ID AS DSG_CARRIER_ID,
  REC_CARRIER_ID AS REC_CARRIER_ID,
  FEASIBLE_CARRIER_ID AS FEASIBLE_CARRIER_ID,
  PAYEE_CARRIER_ID AS PAYEE_CARRIER_ID,
  SCNDR_CARRIER_ID AS SCNDR_CARRIER_ID,
  BROKER_CARRIER_ID AS BROKER_CARRIER_ID,
  ASSIGNED_SCNDR_CARRIER_ID AS ASSIGNED_SCNDR_CARRIER_ID,
  DSG_SCNDR_CARRIER_ID AS DSG_SCNDR_CARRIER_ID,
  ASSIGNED_BROKER_CARRIER_ID AS ASSIGNED_BROKER_CARRIER_ID,
  LH_PAYEE_CARRIER_ID AS LH_PAYEE_CARRIER_ID,
  REC_BROKER_CARRIER_ID AS REC_BROKER_CARRIER_ID,
  ASSIGNED_EQUIPMENT_ID AS ASSIGNED_EQUIPMENT_ID,
  DSG_EQUIPMENT_ID AS DSG_EQUIPMENT_ID,
  FEASIBLE_EQUIPMENT_ID AS FEASIBLE_EQUIPMENT_ID,
  FEASIBLE_EQUIPMENT2_ID AS FEASIBLE_EQUIPMENT2_ID,
  REC_EQUIPMENT_ID AS REC_EQUIPMENT_ID,
  ASSIGNED_MOT_ID AS ASSIGNED_MOT_ID,
  DSG_MOT_ID AS DSG_MOT_ID,
  FEASIBLE_MOT_ID AS FEASIBLE_MOT_ID,
  REC_MOT_ID AS REC_MOT_ID,
  PRODUCT_CLASS_ID AS PRODUCT_CLASS_ID,
  PROTECTION_LEVEL_ID AS PROTECTION_LEVEL_ID,
  ASSIGNED_SERVICE_LEVEL_ID AS ASSIGNED_SERVICE_LEVEL_ID,
  DSG_SERVICE_LEVEL_ID AS DSG_SERVICE_LEVEL_ID,
  FEASIBLE_SERVICE_LEVEL_ID AS FEASIBLE_SERVICE_LEVEL_ID,
  REC_SERVICE_LEVEL_ID AS REC_SERVICE_LEVEL_ID,
  HAS_EM_NOTIFY_FLAG AS HAS_EM_NOTIFY_FLAG,
  REGION_ID AS REGION_ID,
  INBOUND_REGION_ID AS INBOUND_REGION_ID,
  OUTBOUND_REGION_ID AS OUTBOUND_REGION_ID,
  FINANCIAL_WT AS FINANCIAL_WT,
  IS_BOOKING_REQUIRED AS IS_BOOKING_REQUIRED,
  TOTAL_COST_EXCL_TAX AS TOTAL_COST_EXCL_TAX,
  TOTAL_TAX_AMOUNT AS TOTAL_TAX_AMOUNT,
  IS_ASSOCIATED_TO_OUTBOUND AS IS_ASSOCIATED_TO_OUTBOUND,
  RECEIVED_DT AS RECEIVED_DT,
  BOOKING_ID AS BOOKING_ID,
  IS_MISROUTED AS IS_MISROUTED,
  FEASIBLE_CARRIER_CD AS FEASIBLE_CARRIER_CD,
  SHIPMENT_WIN_ADJ_FLAG AS SHIPMENT_WIN_ADJ_FLAG,
  DT_PARAM_SET_ID AS DT_PARAM_SET_ID,
  MERCHANDIZING_DEPARTMENT_ID AS MERCHANDIZING_DEPARTMENT_ID,
  STATIC_ROUTE_ID AS STATIC_ROUTE_ID,
  IS_FILO AS IS_FILO,
  IS_COOLER_AT_NOSE AS IS_COOLER_AT_NOSE,
  AUTH_NBR AS AUTH_NBR,
  CONS_LOCN_ID AS CONS_LOCN_ID,
  RTE_TYPE AS RTE_TYPE,
  TRLR_TYPE AS TRLR_TYPE,
  TRLR_SIZE AS TRLR_SIZE,
  CONS_ADDR_CD AS CONS_ADDR_CD,
  HUB_ID AS HUB_ID,
  TRLR_GEN_CD AS TRLR_GEN_CD,
  MAX_NBR_OF_CTNS AS MAX_NBR_OF_CTNS,
  APPT_DOOR_SCHED_TYPE AS APPT_DOOR_SCHED_TYPE,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_SOURCE AS CREATED_SOURCE,
  CREATED_TSTMP AS CREATED_TSTMP,
  LAST_UPDATED_SOURCE_TYPE AS LAST_UPDATED_SOURCE_TYPE,
  LAST_UPDATED_SOURCE AS LAST_UPDATED_SOURCE,
  LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP,
  DSG_SCNDR_CARRIER_CD AS DSG_SCNDR_CARRIER_CD,
  LH_PAYEE_CARRIER_CD AS LH_PAYEE_CARRIER_CD,
  REC_BROKER_CARRIER_CD AS REC_BROKER_CARRIER_CD,
  REC_CARRIER_CD AS REC_CARRIER_CD,
  LPN_ASSIGNMENT_STOPPED AS LPN_ASSIGNMENT_STOPPED,
  SEAL_NBR AS SEAL_NBR,
  HIBERNATE_VERSION AS HIBERNATE_VERSION,
  SHIP_GROUP_ID AS SHIP_GROUP_ID,
  RATE AS RATE,
  MONETARY_VALUE AS MONETARY_VALUE,
  DOOR AS DOOR,
  RTE_TYPE_1 AS RTE_TYPE_1,
  RTE_TYPE_2 AS RTE_TYPE_2,
  SCHEDULED_PICKUP_DT AS SCHEDULED_PICKUP_DT,
  MANIFEST_ID AS MANIFEST_ID,
  DAYS_TO_DELIVER AS DAYS_TO_DELIVER,
  SED_GENERATED_FLAG AS SED_GENERATED_FLAG,
  SERV_AREA_CD AS SERV_AREA_CD,
  TENDER_RESP_DEADLINE_TSTMP AS TENDER_RESP_DEADLINE_TSTMP,
  PRINT_CONS_BOL AS PRINT_CONS_BOL,
  LEFT_WT AS LEFT_WT,
  RIGHT_WT AS RIGHT_WT,
  LANE_NAME AS LANE_NAME,
  DECLARED_VALUE AS DECLARED_VALUE,
  DV_CURRENCY_CD AS DV_CURRENCY_CD,
  COD_AMOUNT AS COD_AMOUNT,
  CUSTOMER_ID AS CUSTOMER_ID,
  CUST_FRGT_CHARGE AS CUST_FRGT_CHARGE,
  COD_CURRENCY_CD AS COD_CURRENCY_CD,
  PLANNED_WEIGHT AS PLANNED_WEIGHT,
  WEIGHT_UOM_ID_BASE AS WEIGHT_UOM_ID_BASE,
  PLANNED_VOLUME AS PLANNED_VOLUME,
  VOLUME_UOM_ID_BASE AS VOLUME_UOM_ID_BASE,
  SIZE1_VALUE AS SIZE1_VALUE,
  SIZE1_UOM_ID AS SIZE1_UOM_ID,
  SIZE2_VALUE AS SIZE2_VALUE,
  SIZE2_UOM_ID AS SIZE2_UOM_ID,
  ASSIGNED_SHIP_VIA AS ASSIGNED_SHIP_VIA,
  INSURANCE_STATUS AS INSURANCE_STATUS,
  RTE_SWC_NBR AS RTE_SWC_NBR,
  RTE_TO AS RTE_TO,
  BILL_OF_LADING_NBR AS BILL_OF_LADING_NBR,
  TRAILER_NBR AS TRAILER_NBR,
  TRANS_PLAN_OWNER AS TRANS_PLAN_OWNER,
  TOTAL_REVENUE_CURRENCY_CD AS TOTAL_REVENUE_CURRENCY_CD,
  TOTAL_REVENUE AS TOTAL_REVENUE,
  FRT_REV_SPOT_CHARGE_CURR_CD AS FRT_REV_SPOT_CHARGE_CURR_CD,
  NORMALIZED_TOTAL_REVENUE AS NORMALIZED_TOTAL_REVENUE,
  FRT_REV_SPOT_CHARGE AS FRT_REV_SPOT_CHARGE,
  DSG_VOYAGE_FLIGHT AS DSG_VOYAGE_FLIGHT,
  FEASIBLE_VOYAGE_FLIGHT AS FEASIBLE_VOYAGE_FLIGHT,
  CURRENCY_TSTMP AS CURRENCY_TSTMP,
  FRT_REV_LINEHAUL_CHARGE AS FRT_REV_LINEHAUL_CHARGE,
  FRT_REV_STOP_CHARGE AS FRT_REV_STOP_CHARGE,
  FRT_REV_ACCESSORIAL_CHARGE AS FRT_REV_ACCESSORIAL_CHARGE,
  MARGIN AS MARGIN,
  TOTAL_COST AS TOTAL_COST,
  INCOTERM_ID AS INCOTERM_ID,
  ORDER_QTY AS ORDER_QTY,
  QTY_UOM_ID AS QTY_UOM_ID,
  REF_SHIPMENT_NBR AS REF_SHIPMENT_NBR,
  STAGING_LOCN_ID AS STAGING_LOCN_ID,
  LOADING_SEQ_ORD AS LOADING_SEQ_ORD,
  HAZMAT_CERT_CONTACT AS HAZMAT_CERT_CONTACT,
  HAZMAT_CERT_DECLARATION AS HAZMAT_CERT_DECLARATION,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_SHIPMENT"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_SHIPMENT_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_SHIPMENT_3


query_3 = f"""SELECT
  SHIPMENT_ID AS SHIPMENT_ID,
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  CREATED_TSTMP AS CREATED_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_SHIPMENT_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_OMS_SHIPMENT_3")

# COMMAND ----------
# DBTITLE 1, AGG_MANIFEST_TSTMP_4


query_4 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  MIN(CREATED_TSTMP) AS o_MANIFEST_TSTMP,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_SHIPMENT_3
GROUP BY
  OMS_DIST_ORDER_ID"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("AGG_MANIFEST_TSTMP_4")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_DIST_ORDER_LN_SLA1_5


query_5 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  OMS_DO_SLA_TSTMP AS OMS_DO_SLA_TSTMP,
  OMS_DO_SLA_FLAG AS OMS_DO_SLA_FLAG,
  OMS_DO_AGE_1_TSTMP AS OMS_DO_AGE_1_TSTMP,
  OMS_DO_AGE_2_TSTMP AS OMS_DO_AGE_2_TSTMP,
  OMS_DO_AGE_3_TSTMP AS OMS_DO_AGE_3_TSTMP,
  OMS_DO_AGE_4_TSTMP AS OMS_DO_AGE_4_TSTMP,
  OMS_DO_AGE_5_TSTMP AS OMS_DO_AGE_5_TSTMP,
  TIME_ZONE AS TIME_ZONE,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_DIST_ORDER_LN_SLA"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("Shortcut_to_OMS_DIST_ORDER_LN_SLA1_5")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_DIST_ORDER_LN_SLA_6


query_6 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  OMS_DO_SLA_TSTMP AS OMS_DO_SLA_TSTMP,
  OMS_DO_SLA_FLAG AS OMS_DO_SLA_FLAG,
  OMS_DO_AGE_1_TSTMP AS OMS_DO_AGE_1_TSTMP,
  OMS_DO_AGE_2_TSTMP AS OMS_DO_AGE_2_TSTMP,
  OMS_DO_AGE_3_TSTMP AS OMS_DO_AGE_3_TSTMP,
  OMS_DO_AGE_4_TSTMP AS OMS_DO_AGE_4_TSTMP,
  OMS_DO_AGE_5_TSTMP AS OMS_DO_AGE_5_TSTMP,
  TIME_ZONE AS TIME_ZONE,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_DIST_ORDER_LN_SLA1_5"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("SQ_Shortcut_to_OMS_DIST_ORDER_LN_SLA_6")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_HOURS_DAY_7


query_7 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SITE_HOURS_DAY"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("Shortcut_to_SITE_HOURS_DAY_7")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_SITE_HOURS_DAY_8


query_8 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SITE_HOURS_DAY_7
ORDER BY
  DAY_DT"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("SQ_Shortcut_to_SITE_HOURS_DAY_8")

# COMMAND ----------
# DBTITLE 1, Fil_Site_Hours_Day_9


query_9 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_SITE_HOURS_DAY_8
WHERE
  (
    BUSINESS_AREA = 'Store'
    OR BUSINESS_AREA = 'DC'
    OR BUSINESS_AREA = 'Vendor'
  )
  AND CLOSE_FLAG = 0"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("Fil_Site_Hours_Day_9")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_DIST_ORDER_LN_VW_10


query_10 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  TOTAL_MONETARY_VALUE_AMT AS TOTAL_MONETARY_VALUE_AMT,
  UNIT_MONETARY_VALUE_AMT AS UNIT_MONETARY_VALUE_AMT,
  UNIT_TAX_AMT AS UNIT_TAX_AMT,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  SHIPPED_QTY AS SHIPPED_QTY,
  RECEIVED_QTY AS RECEIVED_QTY,
  CREATED_SOURCE AS CREATED_SOURCE,
  CREATED_TSTMP AS CREATED_TSTMP,
  CREATED_ORIG_TSTMP AS CREATED_ORIG_TSTMP,
  LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP,
  OMS_DIST_ORDER_LN_STATUS_ID AS OMS_DIST_ORDER_LN_STATUS_ID,
  ALLOCATED_QTY AS ALLOCATED_QTY,
  UNIT_COST_AMT AS UNIT_COST_AMT,
  UNIT_PRICE_AMT AS UNIT_PRICE_AMT,
  USER_CANCELED_QTY AS USER_CANCELED_QTY,
  DELIVERY_END_DT AS DELIVERY_END_DT,
  DELIVERY_START_DT AS DELIVERY_START_DT,
  EVENT_CD AS EVENT_CD,
  REASON_CODE AS REASON_CODE,
  PARTL_FILL_FLG AS PARTL_FILL_FLG,
  ORDER_QTY AS ORDER_QTY,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  RETAIL_PRICE AS RETAIL_PRICE,
  OMS_DIST_ORDER_LN_NBR AS OMS_DIST_ORDER_LN_NBR,
  PICKUP_END_DTTM AS PICKUP_END_DTTM,
  OMS_ORDER_LN_NBR AS OMS_ORDER_LN_NBR,
  PICKUP_START_DTTM AS PICKUP_START_DTTM,
  CANCELLED_FLG AS CANCELLED_FLG,
  PRODUCT_ID AS PRODUCT_ID,
  OMS_ORDER_NBR AS OMS_ORDER_NBR,
  FREIGHT_REVENUE_CURRENCY_CD AS FREIGHT_REVENUE_CURRENCY_CD,
  FREIGHT_REVENUE AS FREIGHT_REVENUE,
  ADJUSTED_ORDER_QTY AS ADJUSTED_ORDER_QTY,
  EV_RELEASED_TSTMP AS EV_RELEASED_TSTMP,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_ALLOCATED_TSTMP AS EV_ALLOCATED_TSTMP,
  EV_ALLOCATED_ORIG_TSTMP AS EV_ALLOCATED_ORIG_TSTMP,
  EV_SHIPPED_TSTMP AS EV_SHIPPED_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  EV_PICKEDUP_TSTMP AS EV_PICKEDUP_TSTMP,
  EV_PICKEDUP_ORIG_TSTMP AS EV_PICKEDUP_ORIG_TSTMP,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_DO_CREATED_TSTMP AS OMS_DO_CREATED_TSTMP,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  ORDER_NBR AS ORDER_NBR,
  OMS_ORDER_CREATED_TSTMP AS OMS_ORDER_CREATED_TSTMP,
  OMS_ORDER_CREATED_ORIG_TSTMP AS OMS_ORDER_CREATED_ORIG_TSTMP,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  SCHED_DELIVERY_FLG AS SCHED_DELIVERY_FLG,
  SUBSCRIPTION_ORDER_FLG AS SUBSCRIPTION_ORDER_FLG,
  ADD_ON_FLAG AS ADD_ON_FLAG,
  ISPU_PXY_FIRST_NAME AS ISPU_PXY_FIRST_NAME,
  ISPU_PXY_LAST_NAME AS ISPU_PXY_LAST_NAME,
  ISPU_PXY_ADD_LINE1 AS ISPU_PXY_ADD_LINE1,
  ISPU_PXY_ADD_LINE2 AS ISPU_PXY_ADD_LINE2,
  ISPU_PXY_ADD_LINE3 AS ISPU_PXY_ADD_LINE3,
  ISPU_PXY_CITY AS ISPU_PXY_CITY,
  ISPU_PXY_STATE AS ISPU_PXY_STATE,
  ISPU_PXY_POSTAL_CD AS ISPU_PXY_POSTAL_CD,
  ISPU_PXY_COUNTRY AS ISPU_PXY_COUNTRY,
  ISPU_PXY_EMAIL AS ISPU_PXY_EMAIL,
  ISUP_PXY_PHONE AS ISUP_PXY_PHONE,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  CANCEL_TSTMP AS CANCEL_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_DIST_ORDER_LN_VW"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("Shortcut_to_OMS_DIST_ORDER_LN_VW_10")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_DIST_ORDER_LN_VW_11


query_11 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  OMS_ORDER_CREATED_ORIG_TSTMP AS OMS_ORDER_CREATED_ORIG_TSTMP,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_DIST_ORDER_LN_VW_10"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("SQ_Shortcut_to_OMS_DIST_ORDER_LN_VW_11")

# COMMAND ----------
# DBTITLE 1, JNR_SITE_ORD_SLA_DY_OMS_DIST_VW_12


query_12 = f"""SELECT
  DETAIL.OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  DETAIL.OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  DETAIL.OMS_ORDER_ID AS OMS_ORDER_ID,
  DETAIL.OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  DETAIL.EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  DETAIL.EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  DETAIL.OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  DETAIL.OMS_ORDER_CREATED_ORIG_TSTMP AS OMS_ORDER_CREATED_ORIG_TSTMP,
  DETAIL.ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  DETAIL.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  MASTER.LOCATION_ID AS LOCATION_ID,
  MASTER.START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  MASTER.END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  MASTER.LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  MASTER.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL1,
  MASTER.SLA_DAY_DT AS SLA_DAY_DT,
  MASTER.SLA_TSTMP AS SLA_TSTMP,
  MASTER.SLA_TIME_HOUR AS SLA_TIME_HOUR,
  MASTER.UPDATE_TSTMP AS UPDATE_TSTMP1,
  MASTER.LOAD_TSTMP AS LOAD_TSTMP1,
  MASTER.DAY_DT AS DAY_DT,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_SITE_ORDER_CHANNEL_SLA_DAY_1 MASTER
  RIGHT JOIN SQ_Shortcut_to_OMS_DIST_ORDER_LN_VW_11 DETAIL ON MASTER.LOCATION_ID = DETAIL.ORIG_LOCATION_ID
  AND MASTER.ORDER_FULFILLMENT_CHANNEL = DETAIL.ORDER_FULFILLMENT_CHANNEL"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("JNR_SITE_ORD_SLA_DY_OMS_DIST_VW_12")

# COMMAND ----------
# DBTITLE 1, JNR_MANIFEST_TSTMP_13


query_13 = f"""SELECT
  DETAIL.OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  DETAIL.OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  DETAIL.OMS_ORDER_ID AS OMS_ORDER_ID,
  DETAIL.OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  DETAIL.EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  DETAIL.EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  DETAIL.OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  DETAIL.OMS_ORDER_CREATED_ORIG_TSTMP AS OMS_ORDER_CREATED_ORIG_TSTMP,
  DETAIL.ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  DETAIL.ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  DETAIL.UPDATE_TSTMP AS UPDATE_TSTMP,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  DETAIL.END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  DETAIL.LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  DETAIL.ORDER_FULFILLMENT_CHANNEL1 AS ORDER_FULFILLMENT_CHANNEL1,
  DETAIL.SLA_DAY_DT AS SLA_DAY_DT,
  DETAIL.SLA_TSTMP AS SLA_TSTMP,
  DETAIL.SLA_TIME_HOUR AS SLA_TIME_HOUR,
  DETAIL.UPDATE_TSTMP1 AS UPDATE_TSTMP1,
  DETAIL.LOAD_TSTMP1 AS LOAD_TSTMP1,
  DETAIL.DAY_DT AS DAY_DT,
  MASTER.OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID1,
  MASTER.o_MANIFEST_TSTMP AS MANIFEST_TSTMP,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  AGG_MANIFEST_TSTMP_4 MASTER
  RIGHT JOIN JNR_SITE_ORD_SLA_DY_OMS_DIST_VW_12 DETAIL ON MASTER.OMS_DIST_ORDER_ID = DETAIL.OMS_DIST_ORDER_ID"""

df_13 = spark.sql(query_13)

df_13.createOrReplaceTempView("JNR_MANIFEST_TSTMP_13")

# COMMAND ----------
# DBTITLE 1, FIL_OMS_DIST_SIT_ORD_SLA_DY_14


query_14 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  MANIFEST_TSTMP AS MANIFEST_TSTMP,
  OMS_ORDER_CREATED_ORIG_TSTMP AS OMS_ORDER_CREATED_ORIG_TSTMP,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  LOCATION_ID AS LOCATION_ID,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  ORDER_FULFILLMENT_CHANNEL1 AS ORDER_FULFILLMENT_CHANNEL1,
  SLA_DAY_DT AS SLA_DAY_DT,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  UPDATE_TSTMP1 AS UPDATE_TSTMP1,
  LOAD_TSTMP1 AS LOAD_TSTMP1,
  DAY_DT AS DAY_DT,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_MANIFEST_TSTMP_13
WHERE
  (
    UPDATE_TSTMP >= TRUNC(now())
    OR UPDATE_TSTMP1 >= TRUNC(now())
  )
  AND IFF(
    LOCATION_TYPE_ID = 8,
    OMS_DO_CREATED_ORIG_TSTMP,
    IFF(
      ISNULL(EV_RELEASED_ORIG_TSTMP)
      AND NOT ISNULL(EV_SHIPPED_ORIG_TSTMP),
      OMS_DO_CREATED_ORIG_TSTMP,
      EV_RELEASED_ORIG_TSTMP
    )
  ) >= START_ORDER_CREATE_TSTMP
  AND IFF(
    LOCATION_TYPE_ID = 8,
    OMS_DO_CREATED_ORIG_TSTMP,
    IFF(
      ISNULL(EV_RELEASED_ORIG_TSTMP)
      AND NOT ISNULL(EV_SHIPPED_ORIG_TSTMP),
      OMS_DO_CREATED_ORIG_TSTMP,
      EV_RELEASED_ORIG_TSTMP
    )
  ) <= END_ORDER_CREATE_TSTMP
  AND ORDER_FULFILLMENT_CHANNEL = 'SFS'"""

df_14 = spark.sql(query_14)

df_14.createOrReplaceTempView("FIL_OMS_DIST_SIT_ORD_SLA_DY_14")

# COMMAND ----------
# DBTITLE 1, EXP_SLA_LOGIC_15


query_15 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  IFF(
    ORDER_FULFILLMENT_CHANNEL = 'SFS',
    MANIFEST_TSTMP,
    EV_SHIPPED_ORIG_TSTMP
  ) AS v_EV_SHIPPED_ORIG_TSTMP,
  IFF(
    ORDER_FULFILLMENT_CHANNEL = 'SFS',
    MANIFEST_TSTMP,
    EV_SHIPPED_ORIG_TSTMP
  ) AS o_EV_SHIPPED_ORIG_TSTMP,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  SLA_TSTMP AS SLA_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  IFF(
    LOCATION_TYPE_ID = 8,
    IFF(
      NOT ISNULL(SLA_TIME_HOUR),
      ADD_TO_DATE(OMS_DO_CREATED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR),
      SLA_TSTMP
    ),
    IFF(
      NOT ISNULL(SLA_TIME_HOUR),
      IFF (
        ISNULL(EV_RELEASED_ORIG_TSTMP)
        AND NOT ISNULL (v_EV_SHIPPED_ORIG_TSTMP),
        ADD_TO_DATE(OMS_DO_CREATED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR),
        ADD_TO_DATE(EV_RELEASED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR)
      ),
      SLA_TSTMP
    )
  ) AS v_OMS_DO_SLA_TSTMP,
  IFF(
    LOCATION_TYPE_ID = 8,
    IFF(
      NOT ISNULL(SLA_TIME_HOUR),
      ADD_TO_DATE(OMS_DO_CREATED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR),
      SLA_TSTMP
    ),
    IFF(
      NOT ISNULL(SLA_TIME_HOUR),
      IFF (
        ISNULL(EV_RELEASED_ORIG_TSTMP)
        AND NOT ISNULL (
          IFF(
            ORDER_FULFILLMENT_CHANNEL = 'SFS',
            MANIFEST_TSTMP,
            EV_SHIPPED_ORIG_TSTMP
          )
        ),
        ADD_TO_DATE(OMS_DO_CREATED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR),
        ADD_TO_DATE(EV_RELEASED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR)
      ),
      SLA_TSTMP
    )
  ) AS o_OMS_DO_SLA_TSTMP,
  DECODE(
    TRUE,
    ISNULL(v_EV_SHIPPED_ORIG_TSTMP),
    NULL,
    (v_EV_SHIPPED_ORIG_TSTMP > v_OMS_DO_SLA_TSTMP),
    0,
    (v_EV_SHIPPED_ORIG_TSTMP <= v_OMS_DO_SLA_TSTMP),
    1
  ) AS v_OMS_DO_SLA_FLAG,
  DECODE(
    TRUE,
    ISNULL(
      IFF(
        ORDER_FULFILLMENT_CHANNEL = 'SFS',
        MANIFEST_TSTMP,
        EV_SHIPPED_ORIG_TSTMP
      )
    ),
    NULL,
    (
      IFF(
        ORDER_FULFILLMENT_CHANNEL = 'SFS',
        MANIFEST_TSTMP,
        EV_SHIPPED_ORIG_TSTMP
      ) > IFF(
        LOCATION_TYPE_ID = 8,
        IFF(
          NOT ISNULL(SLA_TIME_HOUR),
          ADD_TO_DATE(OMS_DO_CREATED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR),
          SLA_TSTMP
        ),
        IFF(
          NOT ISNULL(SLA_TIME_HOUR),
          IFF (
            ISNULL(EV_RELEASED_ORIG_TSTMP)
            AND NOT ISNULL (
              IFF(
                ORDER_FULFILLMENT_CHANNEL = 'SFS',
                MANIFEST_TSTMP,
                EV_SHIPPED_ORIG_TSTMP
              )
            ),
            ADD_TO_DATE(OMS_DO_CREATED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR),
            ADD_TO_DATE(EV_RELEASED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR)
          ),
          SLA_TSTMP
        )
      )
    ),
    0,
    (
      IFF(
        ORDER_FULFILLMENT_CHANNEL = 'SFS',
        MANIFEST_TSTMP,
        EV_SHIPPED_ORIG_TSTMP
      ) <= IFF(
        LOCATION_TYPE_ID = 8,
        IFF(
          NOT ISNULL(SLA_TIME_HOUR),
          ADD_TO_DATE(OMS_DO_CREATED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR),
          SLA_TSTMP
        ),
        IFF(
          NOT ISNULL(SLA_TIME_HOUR),
          IFF (
            ISNULL(EV_RELEASED_ORIG_TSTMP)
            AND NOT ISNULL (
              IFF(
                ORDER_FULFILLMENT_CHANNEL = 'SFS',
                MANIFEST_TSTMP,
                EV_SHIPPED_ORIG_TSTMP
              )
            ),
            ADD_TO_DATE(OMS_DO_CREATED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR),
            ADD_TO_DATE(EV_RELEASED_ORIG_TSTMP, 'HH', SLA_TIME_HOUR)
          ),
          SLA_TSTMP
        )
      )
    ),
    1
  ) AS o_OMS_DO_SLA_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FIL_OMS_DIST_SIT_ORD_SLA_DY_14"""

df_15 = spark.sql(query_15)

df_15.createOrReplaceTempView("EXP_SLA_LOGIC_15")

# COMMAND ----------
# DBTITLE 1, jnr_SITE_HOURS_DAY_16


query_16 = f"""SELECT
  DETAIL.OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  DETAIL.OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  DETAIL.OMS_ORDER_ID AS OMS_ORDER_ID,
  DETAIL.OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  DETAIL.OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  DETAIL.EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  DETAIL.o_EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  DETAIL.ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  DETAIL.START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  DETAIL.END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  DETAIL.SLA_TIME_HOUR AS SLA_TIME_HOUR,
  DETAIL.SLA_TSTMP AS SLA_TSTMP,
  DETAIL.o_OMS_DO_SLA_TSTMP AS o_OMS_DO_SLA_TSTMP,
  DETAIL.o_OMS_DO_SLA_FLAG AS o_OMS_DO_SLA_FLAG,
  MASTER.DAY_DT AS DAY_DT,
  MASTER.LOCATION_ID AS LOCATION_ID,
  MASTER.BUSINESS_AREA AS BUSINESS_AREA,
  MASTER.LOCATION_TYPE_ID AS LOCATION_TYPE_ID1,
  MASTER.STORE_NBR AS STORE_NBR,
  MASTER.CLOSE_FLAG AS CLOSE_FLAG,
  MASTER.TIME_ZONE AS TIME_ZONE,
  MASTER.OPEN_TSTMP AS OPEN_TSTMP,
  MASTER.CLOSE_TSTMP AS CLOSE_TSTMP,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Fil_Site_Hours_Day_9 MASTER
  RIGHT JOIN EXP_SLA_LOGIC_15 DETAIL ON MASTER.LOCATION_ID = DETAIL.ORIG_LOCATION_ID"""

df_16 = spark.sql(query_16)

df_16.createOrReplaceTempView("jnr_SITE_HOURS_DAY_16")

# COMMAND ----------
# DBTITLE 1, Fil_Day_Dt_17


query_17 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  SLA_TSTMP AS SLA_TSTMP,
  o_OMS_DO_SLA_TSTMP AS o_OMS_DO_SLA_TSTMP,
  o_OMS_DO_SLA_FLAG AS o_OMS_DO_SLA_FLAG,
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID1 AS LOCATION_TYPE_ID1,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  NULL AS UPDATE_TSTMP,
  NULL AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  jnr_SITE_HOURS_DAY_16
WHERE
  DAY_DT > o_OMS_DO_SLA_TSTMP"""

df_17 = spark.sql(query_17)

df_17.createOrReplaceTempView("Fil_Day_Dt_17")

# COMMAND ----------
# DBTITLE 1, exp_CALC_18


query_18 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  SLA_TSTMP AS SLA_TSTMP,
  o_OMS_DO_SLA_TSTMP AS o_OMS_DO_SLA_TSTMP,
  o_OMS_DO_SLA_FLAG AS o_OMS_DO_SLA_FLAG,
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID1 AS LOCATION_TYPE_ID1,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  To_date(
    to_char(DAY_DT, 'yyyy-mm-dd') || ' ' || to_char(get_date_part(o_OMS_DO_SLA_TSTMP, 'HH24')) || ':' || to_char(get_date_part(o_OMS_DO_SLA_TSTMP, 'MI')) || ':' || to_char(get_date_part(o_OMS_DO_SLA_TSTMP, 'SS')),
    'yyyy-mm-dd hh24:mi:ss'
  ) AS DAY_DT1,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Fil_Day_Dt_17"""

df_18 = spark.sql(query_18)

df_18.createOrReplaceTempView("exp_CALC_18")

# COMMAND ----------
# DBTITLE 1, Srt_Oms_Dist_Order_Ln_19


query_19 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  ORIG_LOCATION_ID AS ORIG_LOCATION_ID,
  START_ORDER_CREATE_TSTMP AS START_ORDER_CREATE_TSTMP,
  END_ORDER_CREATE_TSTMP AS END_ORDER_CREATE_TSTMP,
  SLA_TIME_HOUR AS SLA_TIME_HOUR,
  SLA_TSTMP AS SLA_TSTMP,
  o_OMS_DO_SLA_TSTMP AS o_OMS_DO_SLA_TSTMP,
  o_OMS_DO_SLA_FLAG AS o_OMS_DO_SLA_FLAG,
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  BUSINESS_AREA AS BUSINESS_AREA,
  LOCATION_TYPE_ID1 AS LOCATION_TYPE_ID1,
  STORE_NBR AS STORE_NBR,
  CLOSE_FLAG AS CLOSE_FLAG,
  TIME_ZONE AS TIME_ZONE,
  OPEN_TSTMP AS OPEN_TSTMP,
  CLOSE_TSTMP AS CLOSE_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  DAY_DT1 AS DAY_DT1,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  exp_CALC_18
ORDER BY
  OMS_DIST_ORDER_ID ASC,
  OMS_DIST_ORDER_LN_ID ASC"""

df_19 = spark.sql(query_19)

df_19.createOrReplaceTempView("Srt_Oms_Dist_Order_Ln_19")

# COMMAND ----------
# DBTITLE 1, rnk_NEXT_FIVE_OPEN_DAY_20


query_20 = f"""SELECT
  *
FROM
  (
    SELECT
      RANK()() OVER(
        PARTITION BY
          OMS_DIST_ORDER_ID,
          OMS_DIST_ORDER_LN_ID
        ORDER BY
          DAY_DT1 DESC
      ) AS RANKINDEX,
      OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
      OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
      OMS_ORDER_ID AS OMS_ORDER_ID,
      OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
      OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
      EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
      EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
      o_OMS_DO_SLA_TSTMP AS OMS_DO_SLA_TSTMP,
      o_OMS_DO_SLA_FLAG AS OMS_DO_SLA_FLAG,
      TIME_ZONE AS TIME_ZONE,
      DAY_DT1 AS DAY_DT1,
      Monotonically_Increasing_Id AS Monotonically_Increasing_IdFROM Srt_Oms_Dist_Order_Ln_19
  ) AS rnk_NEXT_FIVE_OPEN_DAY
WHERE
  RANKINDEX <= 5"""

df_20 = spark.sql(query_20)

df_20.createOrReplaceTempView("rnk_NEXT_FIVE_OPEN_DAY_20")

# COMMAND ----------
# DBTITLE 1, agg_OPEN_DAY_TRANSPOSE_21


query_21 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  OMS_DO_SLA_TSTMP AS OMS_DO_SLA_TSTMP,
  OMS_DO_SLA_FLAG AS OMS_DO_SLA_FLAG,
  TIME_ZONE AS TIME_ZONE,
  MAX(IFF(RANKINDEX = 1, DAY_DT1)) AS Aging_1,
  MAX(IFF(RANKINDEX = 2, DAY_DT1)) AS Aging_2,
  MAX(IFF(RANKINDEX = 3, DAY_DT1)) AS Aging_3,
  MAX(IFF(RANKINDEX = 4, DAY_DT1)) AS Aging_4,
  MAX(IFF(RANKINDEX = 5, DAY_DT1)) AS Aging_5,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  rnk_NEXT_FIVE_OPEN_DAY_20
GROUP BY
  OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID"""

df_21 = spark.sql(query_21)

df_21.createOrReplaceTempView("agg_OPEN_DAY_TRANSPOSE_21")

# COMMAND ----------
# DBTITLE 1, jnr_OMS_DIST_ORDER_LN_SLA_22


query_22 = f"""SELECT
  MASTER.OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  MASTER.OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  MASTER.OMS_ORDER_ID AS OMS_ORDER_ID,
  MASTER.OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  MASTER.OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  MASTER.EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  MASTER.EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  MASTER.OMS_DO_SLA_TSTMP AS OMS_DO_SLA_TSTMP,
  MASTER.OMS_DO_SLA_FLAG AS OMS_DO_SLA_FLAG,
  MASTER.OMS_DO_AGE_1_TSTMP AS OMS_DO_AGE_1_TSTMP,
  MASTER.OMS_DO_AGE_2_TSTMP AS OMS_DO_AGE_2_TSTMP,
  MASTER.OMS_DO_AGE_3_TSTMP AS OMS_DO_AGE_3_TSTMP,
  MASTER.OMS_DO_AGE_4_TSTMP AS OMS_DO_AGE_4_TSTMP,
  MASTER.OMS_DO_AGE_5_TSTMP AS OMS_DO_AGE_5_TSTMP,
  MASTER.TIME_ZONE AS TIME_ZONE,
  MASTER.LOAD_TSTMP AS LOAD_TSTMP,
  DETAIL.OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID1,
  DETAIL.OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID1,
  DETAIL.OMS_ORDER_ID AS OMS_ORDER_ID1,
  DETAIL.OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID1,
  DETAIL.OMS_DO_SLA_TSTMP AS OMS_DO_SLA_TSTMP1,
  DETAIL.OMS_DO_SLA_FLAG AS OMS_DO_SLA_FLAG1,
  DETAIL.EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP1,
  DETAIL.EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP1,
  DETAIL.OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP1,
  DETAIL.TIME_ZONE AS TIME_ZONE1,
  DETAIL.Aging_1 AS Aging_1,
  DETAIL.Aging_2 AS Aging_2,
  DETAIL.Aging_3 AS Aging_3,
  DETAIL.Aging_4 AS Aging_4,
  DETAIL.Aging_5 AS Aging_5,
  DETAIL.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_DIST_ORDER_LN_SLA_6 MASTER
  RIGHT JOIN agg_OPEN_DAY_TRANSPOSE_21 DETAIL ON MASTER.OMS_DIST_ORDER_ID = DETAIL.OMS_DIST_ORDER_ID
  AND MASTER.OMS_DIST_ORDER_LN_ID = DETAIL.OMS_DIST_ORDER_LN_ID"""

df_22 = spark.sql(query_22)

df_22.createOrReplaceTempView("jnr_OMS_DIST_ORDER_LN_SLA_22")

# COMMAND ----------
# DBTITLE 1, exp_UPD_FLAG_23


query_23 = f"""SELECT
  OMS_DIST_ORDER_ID AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID AS OMS_DIST_ORDER_LN_ID,
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_ORDER_LN_ID AS OMS_ORDER_LN_ID,
  OMS_DO_CREATED_ORIG_TSTMP AS OMS_DO_CREATED_ORIG_TSTMP,
  EV_RELEASED_ORIG_TSTMP AS EV_RELEASED_ORIG_TSTMP,
  EV_SHIPPED_ORIG_TSTMP AS EV_SHIPPED_ORIG_TSTMP,
  OMS_DO_SLA_TSTMP AS OMS_DO_SLA_TSTMP,
  OMS_DO_SLA_FLAG AS OMS_DO_SLA_FLAG,
  OMS_DO_AGE_1_TSTMP AS OMS_DO_AGE_1_TSTMP,
  OMS_DO_AGE_2_TSTMP AS OMS_DO_AGE_2_TSTMP,
  OMS_DO_AGE_3_TSTMP AS OMS_DO_AGE_3_TSTMP,
  OMS_DO_AGE_4_TSTMP AS OMS_DO_AGE_4_TSTMP,
  OMS_DO_AGE_5_TSTMP AS OMS_DO_AGE_5_TSTMP,
  TIME_ZONE AS TIME_ZONE,
  LOAD_TSTMP AS LOAD_TSTMP1,
  OMS_DIST_ORDER_ID1 AS OMS_DIST_ORDER_ID1,
  OMS_DIST_ORDER_LN_ID1 AS OMS_DIST_ORDER_LN_ID1,
  OMS_ORDER_ID1 AS OMS_ORDER_ID1,
  OMS_ORDER_LN_ID1 AS OMS_ORDER_LN_ID1,
  OMS_DO_SLA_TSTMP1 AS o_OMS_DO_SLA_TSTMP,
  OMS_DO_SLA_FLAG1 AS o_OMS_DO_SLA_FLAG,
  EV_RELEASED_ORIG_TSTMP1 AS EV_RELEASED_ORIG_TSTMP1,
  EV_SHIPPED_ORIG_TSTMP1 AS EV_SHIPPED_ORIG_TSTMP1,
  OMS_DO_CREATED_ORIG_TSTMP1 AS OMS_DO_CREATED_ORIG_TSTMP1,
  TIME_ZONE1 AS TIME_ZONE1,
  Aging_1 AS Aging_1,
  Aging_2 AS Aging_2,
  Aging_3 AS Aging_3,
  Aging_4 AS Aging_4,
  Aging_5 AS Aging_5,
  SYSTIMESTAMP() AS UPDATE_TSTMP,
  IFF(ISNULL(LOAD_TSTMP), SYSTIMESTAMP(), LOAD_TSTMP) AS LOAD_TSTMP,
  IFF(
    ISNULL(OMS_DIST_ORDER_ID),
    'I',
    IFF(
      IFF(ISNULL(OMS_ORDER_ID), -1, OMS_ORDER_ID) <> IFF(ISNULL(OMS_ORDER_ID1), -1, OMS_ORDER_ID1)
      OR IFF(ISNULL(OMS_ORDER_LN_ID), -1, OMS_ORDER_LN_ID) <> IFF(ISNULL(OMS_ORDER_LN_ID1), -1, OMS_ORDER_LN_ID1)
      OR IFF(ISNULL(TIME_ZONE), ' ', TIME_ZONE) <> IFF(ISNULL(TIME_ZONE1), ' ', TIME_ZONE1)
      OR IFF(
        ISNULL(OMS_DO_CREATED_ORIG_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_CREATED_ORIG_TSTMP
      ) <> IFF(
        ISNULL(OMS_DO_CREATED_ORIG_TSTMP1),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_CREATED_ORIG_TSTMP1
      )
      OR IFF(
        ISNULL(EV_RELEASED_ORIG_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        EV_RELEASED_ORIG_TSTMP
      ) <> IFF(
        ISNULL(EV_RELEASED_ORIG_TSTMP1),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        EV_RELEASED_ORIG_TSTMP1
      )
      OR IFF(
        ISNULL(EV_SHIPPED_ORIG_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        EV_SHIPPED_ORIG_TSTMP
      ) <> IFF(
        ISNULL(EV_SHIPPED_ORIG_TSTMP1),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        EV_SHIPPED_ORIG_TSTMP1
      )
      OR IFF(
        ISNULL(OMS_DO_SLA_TSTMP1),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_SLA_TSTMP1
      ) <> IFF(
        ISNULL(OMS_DO_SLA_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_SLA_TSTMP
      )
      OR IFF(ISNULL(OMS_DO_SLA_FLAG1), 1, OMS_DO_SLA_FLAG1) <> IFF(ISNULL(OMS_DO_SLA_FLAG), 1, OMS_DO_SLA_FLAG)
      OR IFF(
        ISNULL(Aging_1),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        Aging_1
      ) <> IFF(
        ISNULL(OMS_DO_AGE_1_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_AGE_1_TSTMP
      )
      OR IFF(
        ISNULL(Aging_2),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        Aging_2
      ) <> IFF(
        ISNULL(OMS_DO_AGE_2_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_AGE_2_TSTMP
      )
      OR IFF(
        ISNULL(Aging_3),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        Aging_3
      ) <> IFF(
        ISNULL(OMS_DO_AGE_3_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_AGE_3_TSTMP
      )
      OR IFF(
        ISNULL(Aging_4),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        Aging_4
      ) <> IFF(
        ISNULL(OMS_DO_AGE_4_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_AGE_4_TSTMP
      )
      OR IFF(
        ISNULL(Aging_5),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        Aging_5
      ) <> IFF(
        ISNULL(OMS_DO_AGE_5_TSTMP),
        TO_DATE('1900-01-01', 'YYYY-MM-DD'),
        OMS_DO_AGE_5_TSTMP
      ),
      'U',
      'R'
    )
  ) AS UPD_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  jnr_OMS_DIST_ORDER_LN_SLA_22"""

df_23 = spark.sql(query_23)

df_23.createOrReplaceTempView("exp_UPD_FLAG_23")

# COMMAND ----------
# DBTITLE 1, FILTRANS_24


query_24 = f"""SELECT
  OMS_DIST_ORDER_ID1 AS OMS_DIST_ORDER_ID1,
  OMS_DIST_ORDER_LN_ID1 AS OMS_DIST_ORDER_LN_ID1,
  OMS_ORDER_ID1 AS OMS_ORDER_ID1,
  OMS_ORDER_LN_ID1 AS OMS_ORDER_LN_ID1,
  o_OMS_DO_SLA_TSTMP AS o_OMS_DO_SLA_TSTMP,
  o_OMS_DO_SLA_FLAG AS o_OMS_DO_SLA_FLAG,
  EV_RELEASED_ORIG_TSTMP1 AS EV_RELEASED_ORIG_TSTMP1,
  EV_SHIPPED_ORIG_TSTMP1 AS EV_SHIPPED_ORIG_TSTMP1,
  OMS_DO_CREATED_ORIG_TSTMP1 AS OMS_DO_CREATED_ORIG_TSTMP1,
  TIME_ZONE1 AS TIME_ZONE1,
  Aging_1 AS Aging_1,
  Aging_2 AS Aging_2,
  Aging_3 AS Aging_3,
  Aging_4 AS Aging_4,
  Aging_5 AS Aging_5,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  UPD_FLAG AS UPD_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  exp_UPD_FLAG_23
WHERE
  UPD_FLAG = 'I'
  OR UPD_FLAG = 'U'"""

df_24 = spark.sql(query_24)

df_24.createOrReplaceTempView("FILTRANS_24")

# COMMAND ----------
# DBTITLE 1, upd_UPDATE_25


query_25 = f"""SELECT
  OMS_DIST_ORDER_ID1 AS OMS_DIST_ORDER_ID,
  OMS_DIST_ORDER_LN_ID1 AS OMS_DIST_ORDER_LN_ID1,
  OMS_ORDER_ID1 AS OMS_ORDER_ID1,
  OMS_ORDER_LN_ID1 AS OMS_ORDER_LN_ID1,
  o_OMS_DO_SLA_TSTMP AS o_OMS_DO_SLA_TSTMP,
  o_OMS_DO_SLA_FLAG AS o_OMS_DO_SLA_FLAG,
  EV_RELEASED_ORIG_TSTMP1 AS EV_RELEASED_ORIG_TSTMP1,
  EV_SHIPPED_ORIG_TSTMP1 AS EV_SHIPPED_ORIG_TSTMP1,
  OMS_DO_CREATED_ORIG_TSTMP1 AS OMS_DO_CREATED_ORIG_TSTMP1,
  TIME_ZONE1 AS TIME_ZONE1,
  Aging_1 AS Aging_1,
  Aging_2 AS Aging_2,
  Aging_3 AS Aging_3,
  Aging_4 AS Aging_4,
  Aging_5 AS Aging_5,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  UPD_FLAG AS UPD_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(
    UPD_FLAG = 'I',
    'DD_INSERT',
    IFF(UPD_FLAG = 'U', 'DD_UPDATE')
  ) AS UPDATE_STRATEGY_FLAG
FROM
  FILTRANS_24"""

df_25 = spark.sql(query_25)

df_25.createOrReplaceTempView("upd_UPDATE_25")

# COMMAND ----------
# DBTITLE 1, OMS_DIST_ORDER_LN_SLA


spark.sql("""MERGE INTO OMS_DIST_ORDER_LN_SLA AS TARGET
USING
  upd_UPDATE_25 AS SOURCE ON TARGET.OMS_DIST_ORDER_LN_ID = SOURCE.OMS_DIST_ORDER_LN_ID1
  AND TARGET.OMS_DIST_ORDER_ID = SOURCE.OMS_DIST_ORDER_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.OMS_DIST_ORDER_ID = SOURCE.OMS_DIST_ORDER_ID,
  TARGET.OMS_DIST_ORDER_LN_ID = SOURCE.OMS_DIST_ORDER_LN_ID1,
  TARGET.OMS_ORDER_ID = SOURCE.OMS_ORDER_ID1,
  TARGET.OMS_ORDER_LN_ID = SOURCE.OMS_ORDER_LN_ID1,
  TARGET.OMS_DO_CREATED_ORIG_TSTMP = SOURCE.OMS_DO_CREATED_ORIG_TSTMP1,
  TARGET.EV_RELEASED_ORIG_TSTMP = SOURCE.EV_RELEASED_ORIG_TSTMP1,
  TARGET.EV_SHIPPED_ORIG_TSTMP = SOURCE.EV_SHIPPED_ORIG_TSTMP1,
  TARGET.OMS_DO_SLA_TSTMP = SOURCE.o_OMS_DO_SLA_TSTMP,
  TARGET.OMS_DO_SLA_FLAG = SOURCE.o_OMS_DO_SLA_FLAG,
  TARGET.OMS_DO_AGE_1_TSTMP = SOURCE.Aging_1,
  TARGET.OMS_DO_AGE_2_TSTMP = SOURCE.Aging_2,
  TARGET.OMS_DO_AGE_3_TSTMP = SOURCE.Aging_3,
  TARGET.OMS_DO_AGE_4_TSTMP = SOURCE.Aging_4,
  TARGET.OMS_DO_AGE_5_TSTMP = SOURCE.Aging_5,
  TARGET.TIME_ZONE = SOURCE.TIME_ZONE1,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.OMS_ORDER_ID = SOURCE.OMS_ORDER_ID1
  AND TARGET.OMS_ORDER_LN_ID = SOURCE.OMS_ORDER_LN_ID1
  AND TARGET.OMS_DO_CREATED_ORIG_TSTMP = SOURCE.OMS_DO_CREATED_ORIG_TSTMP1
  AND TARGET.EV_RELEASED_ORIG_TSTMP = SOURCE.EV_RELEASED_ORIG_TSTMP1
  AND TARGET.EV_SHIPPED_ORIG_TSTMP = SOURCE.EV_SHIPPED_ORIG_TSTMP1
  AND TARGET.OMS_DO_SLA_TSTMP = SOURCE.o_OMS_DO_SLA_TSTMP
  AND TARGET.OMS_DO_SLA_FLAG = SOURCE.o_OMS_DO_SLA_FLAG
  AND TARGET.OMS_DO_AGE_1_TSTMP = SOURCE.Aging_1
  AND TARGET.OMS_DO_AGE_2_TSTMP = SOURCE.Aging_2
  AND TARGET.OMS_DO_AGE_3_TSTMP = SOURCE.Aging_3
  AND TARGET.OMS_DO_AGE_4_TSTMP = SOURCE.Aging_4
  AND TARGET.OMS_DO_AGE_5_TSTMP = SOURCE.Aging_5
  AND TARGET.TIME_ZONE = SOURCE.TIME_ZONE1
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.OMS_DIST_ORDER_ID,
    TARGET.OMS_DIST_ORDER_LN_ID,
    TARGET.OMS_ORDER_ID,
    TARGET.OMS_ORDER_LN_ID,
    TARGET.OMS_DO_CREATED_ORIG_TSTMP,
    TARGET.EV_RELEASED_ORIG_TSTMP,
    TARGET.EV_SHIPPED_ORIG_TSTMP,
    TARGET.OMS_DO_SLA_TSTMP,
    TARGET.OMS_DO_SLA_FLAG,
    TARGET.OMS_DO_AGE_1_TSTMP,
    TARGET.OMS_DO_AGE_2_TSTMP,
    TARGET.OMS_DO_AGE_3_TSTMP,
    TARGET.OMS_DO_AGE_4_TSTMP,
    TARGET.OMS_DO_AGE_5_TSTMP,
    TARGET.TIME_ZONE,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.OMS_DIST_ORDER_ID,
    SOURCE.OMS_DIST_ORDER_LN_ID1,
    SOURCE.OMS_ORDER_ID1,
    SOURCE.OMS_ORDER_LN_ID1,
    SOURCE.OMS_DO_CREATED_ORIG_TSTMP1,
    SOURCE.EV_RELEASED_ORIG_TSTMP1,
    SOURCE.EV_SHIPPED_ORIG_TSTMP1,
    SOURCE.o_OMS_DO_SLA_TSTMP,
    SOURCE.o_OMS_DO_SLA_FLAG,
    SOURCE.Aging_1,
    SOURCE.Aging_2,
    SOURCE.Aging_3,
    SOURCE.Aging_4,
    SOURCE.Aging_5,
    SOURCE.TIME_ZONE1,
    SOURCE.UPDATE_TSTMP,
    SOURCE.LOAD_TSTMP
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_OMS_Dist_Order_LN_SLA_Channel")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_OMS_Dist_Order_LN_SLA_Channel", mainWorkflowId, parentName)
