# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DDS_OMS_A_CO_Note")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_DDS_OMS_A_CO_Note", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_CO_NOTE1_0


query_0 = f"""SELECT
  OMS_NOTE_ID AS OMS_NOTE_ID,
  OMS_ENTITY_ID AS OMS_ENTITY_ID,
  OMS_ENTITY_LINE_ID AS OMS_ENTITY_LINE_ID,
  OMS_NOTE_TYPE_ID AS OMS_NOTE_TYPE_ID,
  NOTE_SEQ AS NOTE_SEQ,
  NOTE_DESC AS NOTE_DESC,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_CO_NOTE"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_OMS_A_CO_NOTE1_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_A_CO_NOTE_1


query_1 = f"""SELECT
  OMS_NOTE_ID AS OMS_NOTE_ID,
  OMS_ENTITY_ID AS OMS_ENTITY_ID,
  OMS_ENTITY_LINE_ID AS OMS_ENTITY_LINE_ID,
  OMS_NOTE_TYPE_ID AS OMS_NOTE_TYPE_ID,
  NOTE_SEQ AS NOTE_SEQ,
  NOTE_DESC AS NOTE_DESC,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_A_CO_NOTE1_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_OMS_A_CO_NOTE_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_CO_NOTE_PRE_2


query_2 = f"""SELECT
  NOTE_ID AS NOTE_ID,
  ENTITY_ID AS ENTITY_ID,
  ENTITY_LINE_ID AS ENTITY_LINE_ID,
  NOTE_TYPE_ID AS NOTE_TYPE_ID,
  NOTE_SEQ AS NOTE_SEQ,
  NOTE_DESCRIPTION AS NOTE_DESCRIPTION,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  CREATED_DTTM AS CREATED_DTTM,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_CO_NOTE_PRE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_A_CO_NOTE_PRE_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_A_CO_NOTE_PRE_3


query_3 = f"""SELECT
  NOTE_ID AS NOTE_ID,
  ENTITY_ID AS ENTITY_ID,
  ENTITY_LINE_ID AS ENTITY_LINE_ID,
  NOTE_TYPE_ID AS NOTE_TYPE_ID,
  NOTE_SEQ AS NOTE_SEQ,
  NOTE_DESCRIPTION AS NOTE_DESCRIPTION,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  CREATED_DTTM AS CREATED_DTTM,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_A_CO_NOTE_PRE_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_OMS_A_CO_NOTE_PRE_3")

# COMMAND ----------
# DBTITLE 1, JNR_OMS_A_CO_NOTE_4


query_4 = f"""SELECT
  DETAIL.OMS_NOTE_ID AS lkp_OMS_NOTE_ID,
  DETAIL.OMS_ENTITY_ID AS lkp_OMS_ENTITY_ID,
  DETAIL.OMS_ENTITY_LINE_ID AS lkp_OMS_ENTITY_LINE_ID,
  DETAIL.OMS_NOTE_TYPE_ID AS lkp_OMS_NOTE_TYPE_ID,
  DETAIL.NOTE_SEQ AS lkp_NOTE_SEQ,
  DETAIL.NOTE_DESC AS lkp_NOTE_DESC,
  DETAIL.OMS_CREATED_TSTMP AS lkp_OMS_CREATED_TSTMP,
  DETAIL.OMS_LAST_UPDATED_TSTMP AS lkp_OMS_LAST_UPDATED_TSTMP,
  DETAIL.LOAD_TSTMP AS LOAD_TSTMP,
  MASTER.NOTE_ID AS NOTE_ID,
  MASTER.ENTITY_ID AS ENTITY_ID,
  MASTER.ENTITY_LINE_ID AS ENTITY_LINE_ID,
  MASTER.NOTE_TYPE_ID AS NOTE_TYPE_ID,
  MASTER.NOTE_SEQ AS NOTE_SEQ,
  MASTER.NOTE_DESCRIPTION AS NOTE_DESCRIPTION,
  MASTER.LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  MASTER.CREATED_DTTM AS CREATED_DTTM,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_A_CO_NOTE_PRE_3 MASTER
  LEFT JOIN SQ_Shortcut_to_OMS_A_CO_NOTE_1 DETAIL ON MASTER.NOTE_ID = DETAIL.OMS_NOTE_ID"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("JNR_OMS_A_CO_NOTE_4")

# COMMAND ----------
# DBTITLE 1, FTR_UNCHANGED_REC_5


query_5 = f"""SELECT
  lkp_OMS_NOTE_ID AS lkp_OMS_NOTE_ID,
  lkp_OMS_ENTITY_ID AS lkp_OMS_ENTITY_ID,
  lkp_OMS_ENTITY_LINE_ID AS lkp_OMS_ENTITY_LINE_ID,
  lkp_OMS_NOTE_TYPE_ID AS lkp_OMS_NOTE_TYPE_ID,
  lkp_NOTE_SEQ AS lkp_NOTE_SEQ,
  lkp_NOTE_DESC AS lkp_NOTE_DESC,
  lkp_OMS_CREATED_TSTMP AS lkp_OMS_CREATED_TSTMP,
  lkp_OMS_LAST_UPDATED_TSTMP AS lkp_OMS_LAST_UPDATED_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  NOTE_ID AS NOTE_ID,
  ENTITY_ID AS ENTITY_ID,
  ENTITY_LINE_ID AS ENTITY_LINE_ID,
  NOTE_TYPE_ID AS NOTE_TYPE_ID,
  NOTE_SEQ AS NOTE_SEQ,
  NOTE_DESCRIPTION AS NOTE_DESCRIPTION,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  CREATED_DTTM AS CREATED_DTTM,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_OMS_A_CO_NOTE_4
WHERE
  ISNULL(lkp_OMS_NOTE_ID)
  OR (
    NOT ISNULL(lkp_OMS_NOTE_ID)
    AND (
      IFF(
        ISNULL(lkp_OMS_ENTITY_ID),
        TO_INTEGER(999999999),
        lkp_OMS_ENTITY_ID
      ) <> IFF(
        ISNULL(ENTITY_ID),
        TO_INTEGER(999999999),
        ENTITY_ID
      )
      OR IFF(
        ISNULL(ENTITY_LINE_ID),
        TO_INTEGER(999999999),
        ENTITY_LINE_ID
      ) <> IFF(
        ISNULL(lkp_OMS_ENTITY_LINE_ID),
        TO_INTEGER(999999999),
        lkp_OMS_ENTITY_LINE_ID
      )
      OR IFF(
        ISNULL(NOTE_TYPE_ID),
        TO_INTEGER(999999999),
        NOTE_TYPE_ID
      ) <> IFF(
        ISNULL(lkp_OMS_NOTE_TYPE_ID),
        TO_INTEGER(999999999),
        lkp_OMS_NOTE_TYPE_ID
      )
      OR IFF(
        ISNULL(lkp_NOTE_SEQ),
        TO_INTEGER(999999999),
        lkp_NOTE_SEQ
      ) <> IFF(ISNULL(NOTE_SEQ), TO_INTEGER(999999999), NOTE_SEQ)
      OR IFF (
        ISNULL(LTRIM(RTRIM(NOTE_DESCRIPTION))),
        ' ',
        LTRIM(RTRIM(NOTE_DESCRIPTION))
      ) <> IFF(
        ISNULL(LTRIM(RTRIM(lkp_NOTE_DESC))),
        ' ',
        LTRIM(RTRIM(lkp_NOTE_DESC))
      )
      OR IFF(
        ISNULL(CREATED_DTTM),
        To_DATE('12-31-9999', 'MM-DD-YYYY'),
        CREATED_DTTM
      ) <> IFF(
        ISNULL(lkp_OMS_CREATED_TSTMP),
        To_DATE('12-31-9999', 'MM-DD-YYYY'),
        lkp_OMS_CREATED_TSTMP
      )
      OR IFF(
        ISNULL(LAST_UPDATED_DTTM),
        To_DATE('12-31-9999', 'MM-DD-YYYY'),
        LAST_UPDATED_DTTM
      ) <> IFF(
        ISNULL(lkp_OMS_LAST_UPDATED_TSTMP),
        To_DATE('12-31-9999', 'MM-DD-YYYY'),
        lkp_OMS_LAST_UPDATED_TSTMP
      )
    )
  )"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("FTR_UNCHANGED_REC_5")

# COMMAND ----------
# DBTITLE 1, EXP_VALID_FLAG_6


query_6 = f"""SELECT
  lkp_OMS_NOTE_ID AS lkp_OMS_NOTE_ID,
  lkp_OMS_ENTITY_ID AS lkp_OMS_ENTITY_ID,
  lkp_OMS_ENTITY_LINE_ID AS lkp_OMS_ENTITY_LINE_ID,
  lkp_OMS_NOTE_TYPE_ID AS lkp_OMS_NOTE_TYPE_ID,
  lkp_NOTE_SEQ AS lkp_NOTE_SEQ,
  lkp_NOTE_DESC AS lkp_NOTE_DESC,
  lkp_OMS_CREATED_TSTMP AS lkp_OMS_CREATED_TSTMP,
  lkp_OMS_LAST_UPDATED_TSTMP AS lkp_OMS_LAST_UPDATED_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  NOTE_ID AS NOTE_ID,
  ENTITY_ID AS ENTITY_ID,
  ENTITY_LINE_ID AS ENTITY_LINE_ID,
  NOTE_TYPE_ID AS NOTE_TYPE_ID,
  NOTE_SEQ AS NOTE_SEQ,
  NOTE_DESCRIPTION AS NOTE_DESCRIPTION,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  CREATED_DTTM AS CREATED_DTTM,
  now() AS UPDATE_TSTMP_exp,
  IFF(ISNULL(LOAD_TSTMP), now(), LOAD_TSTMP) AS LOAD_TSTMP_exp,
  IFF(ISNULL(lkp_OMS_NOTE_ID), 1, 2) AS INS_UPD_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FTR_UNCHANGED_REC_5"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("EXP_VALID_FLAG_6")

# COMMAND ----------
# DBTITLE 1, UPD_INS_UPD_7


query_7 = f"""SELECT
  NOTE_ID AS NOTE_ID,
  ENTITY_ID AS ENTITY_ID,
  ENTITY_LINE_ID AS ENTITY_LINE_ID,
  NOTE_TYPE_ID AS NOTE_TYPE_ID,
  NOTE_SEQ AS NOTE_SEQ,
  NOTE_DESCRIPTION AS NOTE_DESCRIPTION,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  LOAD_TSTMP AS lkp_LOAD_TSTMP,
  UPDATE_TSTMP_exp AS UPDATE_TSTMP_exp,
  LOAD_TSTMP_exp AS LOAD_TSTMP_exp,
  INS_UPD_FLAG AS INS_UPD_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(INS_UPD_FLAG, 1, 'DD_INSERT', 2, 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  EXP_VALID_FLAG_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("UPD_INS_UPD_7")

# COMMAND ----------
# DBTITLE 1, OMS_A_CO_NOTE


spark.sql("""MERGE INTO OMS_A_CO_NOTE AS TARGET
USING
  UPD_INS_UPD_7 AS SOURCE ON TARGET.OMS_NOTE_ID = SOURCE.NOTE_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.OMS_NOTE_ID = SOURCE.NOTE_ID,
  TARGET.OMS_ENTITY_ID = SOURCE.ENTITY_ID,
  TARGET.OMS_ENTITY_LINE_ID = SOURCE.ENTITY_LINE_ID,
  TARGET.OMS_NOTE_TYPE_ID = SOURCE.NOTE_TYPE_ID,
  TARGET.NOTE_SEQ = SOURCE.NOTE_SEQ,
  TARGET.NOTE_DESC = SOURCE.NOTE_DESCRIPTION,
  TARGET.OMS_CREATED_TSTMP = SOURCE.CREATED_DTTM,
  TARGET.OMS_LAST_UPDATED_TSTMP = SOURCE.LAST_UPDATED_DTTM,
  TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP_exp,
  TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP_exp
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.OMS_ENTITY_ID = SOURCE.ENTITY_ID
  AND TARGET.OMS_ENTITY_LINE_ID = SOURCE.ENTITY_LINE_ID
  AND TARGET.OMS_NOTE_TYPE_ID = SOURCE.NOTE_TYPE_ID
  AND TARGET.NOTE_SEQ = SOURCE.NOTE_SEQ
  AND TARGET.NOTE_DESC = SOURCE.NOTE_DESCRIPTION
  AND TARGET.OMS_CREATED_TSTMP = SOURCE.CREATED_DTTM
  AND TARGET.OMS_LAST_UPDATED_TSTMP = SOURCE.LAST_UPDATED_DTTM
  AND TARGET.UPDATE_TSTMP = SOURCE.UPDATE_TSTMP_exp
  AND TARGET.LOAD_TSTMP = SOURCE.LOAD_TSTMP_exp THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.OMS_NOTE_ID,
    TARGET.OMS_ENTITY_ID,
    TARGET.OMS_ENTITY_LINE_ID,
    TARGET.OMS_NOTE_TYPE_ID,
    TARGET.NOTE_SEQ,
    TARGET.NOTE_DESC,
    TARGET.OMS_CREATED_TSTMP,
    TARGET.OMS_LAST_UPDATED_TSTMP,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.NOTE_ID,
    SOURCE.ENTITY_ID,
    SOURCE.ENTITY_LINE_ID,
    SOURCE.NOTE_TYPE_ID,
    SOURCE.NOTE_SEQ,
    SOURCE.NOTE_DESCRIPTION,
    SOURCE.CREATED_DTTM,
    SOURCE.LAST_UPDATED_DTTM,
    SOURCE.UPDATE_TSTMP_exp,
    SOURCE.LOAD_TSTMP_exp
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DDS_OMS_A_CO_Note")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_DDS_OMS_A_CO_Note", mainWorkflowId, parentName)
