# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DD_TXN_STATUS")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_DD_TXN_STATUS", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, src_DD_TXN_STATUS_0


query_0 = f"""SELECT
  JMSCorrelationID AS JMSCorrelationID,
  JMSMessageID AS JMSMessageID,
  JMSType AS JMSType,
  JMSDestination AS JMSDestination,
  JMSReplyTo AS JMSReplyTo,
  JMSDeliveryMode AS JMSDeliveryMode,
  JMSExpiration AS JMSExpiration,
  JMSPriority AS JMSPriority,
  JMSTimeStamp AS JMSTimeStamp,
  JMSRedelivered AS JMSRedelivered,
  BodyText AS BodyText
FROM
  DD_TXN_STATUS"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("src_DD_TXN_STATUS_0")

# COMMAND ----------
# DBTITLE 1, sq_DD_TXN_STATUS_1


query_1 = f"""SELECT
  DAY_DT AS DAY_DT,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  LOCATION_ID AS LOCATION_ID,
  TXN_NBR AS TXN_NBR,
  TXN_TSTSMP AS TXN_TSTSMP,
  SOURCE_ID AS SOURCE_ID,
  LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  STATUS_CD AS STATUS_CD,
  STATUS_DESC AS STATUS_DESC,
  STATUS_API_MESSAGE AS STATUS_API_MESSAGE,
  POINTS_REDEEMED AS POINTS_REDEEMED,
  POINTS_AWARDED AS POINTS_AWARDED,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_MARGIN_AMT AS NET_MARGIN_AMT,
  NET_SALES_QTY AS NET_SALES_QTY,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  src_DD_TXN_STATUS_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("sq_DD_TXN_STATUS_1")

# COMMAND ----------
# DBTITLE 1, src_DD_TXN_STATUS_PRE_2


query_2 = f"""SELECT
  SOURCE_ID AS SOURCE_ID,
  LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  TXN_ID AS TXN_ID,
  TXN_TSTSMP AS TXN_TSTSMP,
  STATUS AS STATUS,
  STATUS_CODE AS STATUS_CODE,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  DD_TXN_STATUS_PRE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("src_DD_TXN_STATUS_PRE_2")

# COMMAND ----------
# DBTITLE 1, sq_DD_TXN_STATUS_PRE_3


query_3 = f"""SELECT
  SOURCE_ID AS SOURCE_ID,
  LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  TXN_ID AS TXN_ID,
  TXN_TSTSMP AS TXN_TSTSMP,
  STATUS AS STATUS,
  STATUS_CODE AS STATUS_CODE,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  src_DD_TXN_STATUS_PRE_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("sq_DD_TXN_STATUS_PRE_3")

# COMMAND ----------
# DBTITLE 1, src_SALES_INSTANCE_SKEY_4


query_4 = f"""SELECT
  DAY_DT AS DAY_DT,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  LOCATION_ID AS LOCATION_ID,
  TRANS_TSTMP AS TRANS_TSTMP,
  REGISTER_NBR AS REGISTER_NBR,
  TRANSACTION_NBR AS TRANSACTION_NBR,
  ORDER_NBR AS ORDER_NBR,
  ORDER_SEQ_NBR AS ORDER_SEQ_NBR,
  CUST_TRANS_ID AS CUST_TRANS_ID,
  TXN_KEY_GID AS TXN_KEY_GID,
  LOAD_DT AS LOAD_DT
FROM
  SALES_INSTANCE_SKEY"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("src_SALES_INSTANCE_SKEY_4")

# COMMAND ----------
# DBTITLE 1, sq_SALES_INSTANCE_SKEY_5


query_5 = f"""SELECT
  DAY_DT AS DAY_DT,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  LOCATION_ID AS LOCATION_ID,
  TRANS_TSTMP AS TRANS_TSTMP,
  REGISTER_NBR AS REGISTER_NBR,
  TRANSACTION_NBR AS TRANSACTION_NBR,
  ORDER_NBR AS ORDER_NBR,
  ORDER_SEQ_NBR AS ORDER_SEQ_NBR,
  CUST_TRANS_ID AS CUST_TRANS_ID,
  TXN_KEY_GID AS TXN_KEY_GID,
  LOAD_DT AS LOAD_DT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  src_SALES_INSTANCE_SKEY_4
WHERE
  src_SALES_INSTANCE_SKEY_4.DAY_DT >= CURRENT_DATE - {DAYS}"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("sq_SALES_INSTANCE_SKEY_5")

# COMMAND ----------
# DBTITLE 1, jnr_SKEY_6


query_6 = f"""SELECT
  MASTER.SOURCE_ID AS SOURCE_ID,
  MASTER.LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  MASTER.LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  MASTER.TXN_ID AS TXN_ID,
  MASTER.TXN_TSTSMP AS TXN_TSTSMP,
  MASTER.STATUS AS STATUS,
  MASTER.STATUS_CODE AS STATUS_CODE,
  DETAIL.TXN_KEY_GID AS TXN_KEY_GID,
  DETAIL.SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  DETAIL.DAY_DT AS DAY_DT,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.TRANSACTION_NBR AS TRANSACTION_NBR,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  sq_DD_TXN_STATUS_PRE_3 MASTER
  INNER JOIN sq_SALES_INSTANCE_SKEY_5 DETAIL ON MASTER.TXN_ID = DETAIL.TXN_KEY_GID"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("jnr_SKEY_6")

# COMMAND ----------
# DBTITLE 1, src_SALES_TRANS_TXN_7


query_7 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  SALES_TYPE_ID AS SALES_TYPE_ID,
  VOID_TYPE_CD AS VOID_TYPE_CD,
  TXN_WAS_POST_VOIDED_FLAG AS TXN_WAS_POST_VOIDED_FLAG,
  SALES_MID_VOID_REASON_CD AS SALES_MID_VOID_REASON_CD,
  CUST_TRANS_ID AS CUST_TRANS_ID,
  TRANS_TSTMP AS TRANS_TSTMP,
  TXN_END_TSTMP AS TXN_END_TSTMP,
  REGISTER_NBR AS REGISTER_NBR,
  TRANSACTION_NBR AS TRANSACTION_NBR,
  TXN_CONTROL_ID AS TXN_CONTROL_ID,
  ORDER_NBR AS ORDER_NBR,
  ORDER_SEQ_NBR AS ORDER_SEQ_NBR,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  ORDER_ASSIST_LOCATION_ID AS ORDER_ASSIST_LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_CREATION_DEVICE_TYPE AS ORDER_CREATION_DEVICE_TYPE,
  ORDER_CREATION_DEVICE_WIDTH AS ORDER_CREATION_DEVICE_WIDTH,
  TXN_SEGMENT AS TXN_SEGMENT,
  PAYMENT_DEVICE_TYPE AS PAYMENT_DEVICE_TYPE,
  BP_SOURCE_CD AS BP_SOURCE_CD,
  TRANS_FLAG AS TRANS_FLAG,
  SALES_CUST_CAPTURE_CD AS SALES_CUST_CAPTURE_CD,
  ZIP_CODE AS ZIP_CODE,
  EMPLOYEE_ID AS EMPLOYEE_ID,
  CASHIER_NBR AS CASHIER_NBR,
  MANAGER_NBR AS MANAGER_NBR,
  TAX_EXEMPT_ID AS TAX_EXEMPT_ID,
  COMM_TILL_FLG AS COMM_TILL_FLG,
  SPECIAL_ORD_NBR AS SPECIAL_ORD_NBR,
  PETPERK_OVERRIDE_NBR AS PETPERK_OVERRIDE_NBR,
  PETPERK_EMAIL_IND AS PETPERK_EMAIL_IND,
  PETPERK_FIRST_NAME_IND AS PETPERK_FIRST_NAME_IND,
  PETPERK_LAST_NAME_IND AS PETPERK_LAST_NAME_IND,
  PETPERK_PHONE_NBR_IND AS PETPERK_PHONE_NBR_IND,
  LOYALTY_NBR AS LOYALTY_NBR,
  LOYALTY_REDEMPTION_ID AS LOYALTY_REDEMPTION_ID,
  LUID AS LUID,
  POINTS_REDEEMED AS POINTS_REDEEMED,
  BASE_POINTS_EARNED AS BASE_POINTS_EARNED,
  BONUS_POINTS_EARNED AS BONUS_POINTS_EARNED,
  POINT_BALANCE AS POINT_BALANCE,
  POINTS_DEDUCTED AS POINTS_DEDUCTED,
  CDC_DCOL_RAW_TXT AS CDC_DCOL_RAW_TXT,
  CDC_EMAIL_ID AS CDC_EMAIL_ID,
  CDC_FIRST_NAME_ID AS CDC_FIRST_NAME_ID,
  CDC_LAST_NAME_ID AS CDC_LAST_NAME_ID,
  CDC_PHONE_NBR_ID AS CDC_PHONE_NBR_ID,
  PHONE_TYPE AS PHONE_TYPE,
  OPT_OUT_EMAIL_FLAG AS OPT_OUT_EMAIL_FLAG,
  OPT_OUT_TEXT_FLAG AS OPT_OUT_TEXT_FLAG,
  DIGITAL_RECEIPT_ANSWER_CD AS DIGITAL_RECEIPT_ANSWER_CD,
  OFFLINE_CUST_LKP_IND AS OFFLINE_CUST_LKP_IND,
  POS_OFFLINE_REASON_ID AS POS_OFFLINE_REASON_ID,
  SALES_AMT AS SALES_AMT,
  SALES_COST AS SALES_COST,
  SALES_QTY AS SALES_QTY,
  RETURN_AMT AS RETURN_AMT,
  RETURN_COST AS RETURN_COST,
  RETURN_QTY AS RETURN_QTY,
  SPECIAL_SRVC_AMT AS SPECIAL_SRVC_AMT,
  SPECIAL_SRVC_QTY AS SPECIAL_SRVC_QTY,
  NET_COUPON_AMT AS NET_COUPON_AMT,
  NET_COUPON_QTY AS NET_COUPON_QTY,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_SALES_COST AS NET_SALES_COST,
  NET_SALES_QTY AS NET_SALES_QTY,
  NET_DISC_AMT AS NET_DISC_AMT,
  NET_DISC_QTY AS NET_DISC_QTY,
  NET_MERCH_DISC_AMT AS NET_MERCH_DISC_AMT,
  NET_MERCH_DISC_QTY AS NET_MERCH_DISC_QTY,
  NET_SPECIAL_SALES_AMT AS NET_SPECIAL_SALES_AMT,
  NET_SPECIAL_SALES_QTY AS NET_SPECIAL_SALES_QTY,
  NET_SALES_TAX_AMT AS NET_SALES_TAX_AMT,
  NET_PAYMENT_AMT AS NET_PAYMENT_AMT,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  DATE_LOADED AS DATE_LOADED
FROM
  SALES_TRANS_TXN"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("src_SALES_TRANS_TXN_7")

# COMMAND ----------
# DBTITLE 1, sq_SALES_TRANS_TXN_8


query_8 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  SALES_TYPE_ID AS SALES_TYPE_ID,
  VOID_TYPE_CD AS VOID_TYPE_CD,
  TXN_WAS_POST_VOIDED_FLAG AS TXN_WAS_POST_VOIDED_FLAG,
  SALES_MID_VOID_REASON_CD AS SALES_MID_VOID_REASON_CD,
  CUST_TRANS_ID AS CUST_TRANS_ID,
  TRANS_TSTMP AS TRANS_TSTMP,
  TXN_END_TSTMP AS TXN_END_TSTMP,
  REGISTER_NBR AS REGISTER_NBR,
  TRANSACTION_NBR AS TRANSACTION_NBR,
  TXN_CONTROL_ID AS TXN_CONTROL_ID,
  ORDER_NBR AS ORDER_NBR,
  ORDER_SEQ_NBR AS ORDER_SEQ_NBR,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  ORDER_ASSIST_LOCATION_ID AS ORDER_ASSIST_LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_CREATION_DEVICE_TYPE AS ORDER_CREATION_DEVICE_TYPE,
  ORDER_CREATION_DEVICE_WIDTH AS ORDER_CREATION_DEVICE_WIDTH,
  TXN_SEGMENT AS TXN_SEGMENT,
  PAYMENT_DEVICE_TYPE AS PAYMENT_DEVICE_TYPE,
  BP_SOURCE_CD AS BP_SOURCE_CD,
  TRANS_FLAG AS TRANS_FLAG,
  SALES_CUST_CAPTURE_CD AS SALES_CUST_CAPTURE_CD,
  ZIP_CODE AS ZIP_CODE,
  EMPLOYEE_ID AS EMPLOYEE_ID,
  CASHIER_NBR AS CASHIER_NBR,
  MANAGER_NBR AS MANAGER_NBR,
  TAX_EXEMPT_ID AS TAX_EXEMPT_ID,
  COMM_TILL_FLG AS COMM_TILL_FLG,
  SPECIAL_ORD_NBR AS SPECIAL_ORD_NBR,
  PETPERK_OVERRIDE_NBR AS PETPERK_OVERRIDE_NBR,
  PETPERK_EMAIL_IND AS PETPERK_EMAIL_IND,
  PETPERK_FIRST_NAME_IND AS PETPERK_FIRST_NAME_IND,
  PETPERK_LAST_NAME_IND AS PETPERK_LAST_NAME_IND,
  PETPERK_PHONE_NBR_IND AS PETPERK_PHONE_NBR_IND,
  LOYALTY_NBR AS LOYALTY_NBR,
  LOYALTY_REDEMPTION_ID AS LOYALTY_REDEMPTION_ID,
  LUID AS LUID,
  POINTS_REDEEMED AS POINTS_REDEEMED,
  BASE_POINTS_EARNED AS BASE_POINTS_EARNED,
  BONUS_POINTS_EARNED AS BONUS_POINTS_EARNED,
  POINT_BALANCE AS POINT_BALANCE,
  POINTS_DEDUCTED AS POINTS_DEDUCTED,
  CDC_DCOL_RAW_TXT AS CDC_DCOL_RAW_TXT,
  CDC_EMAIL_ID AS CDC_EMAIL_ID,
  CDC_FIRST_NAME_ID AS CDC_FIRST_NAME_ID,
  CDC_LAST_NAME_ID AS CDC_LAST_NAME_ID,
  CDC_PHONE_NBR_ID AS CDC_PHONE_NBR_ID,
  PHONE_TYPE AS PHONE_TYPE,
  OPT_OUT_EMAIL_FLAG AS OPT_OUT_EMAIL_FLAG,
  OPT_OUT_TEXT_FLAG AS OPT_OUT_TEXT_FLAG,
  DIGITAL_RECEIPT_ANSWER_CD AS DIGITAL_RECEIPT_ANSWER_CD,
  OFFLINE_CUST_LKP_IND AS OFFLINE_CUST_LKP_IND,
  POS_OFFLINE_REASON_ID AS POS_OFFLINE_REASON_ID,
  SALES_AMT AS SALES_AMT,
  SALES_COST AS SALES_COST,
  SALES_QTY AS SALES_QTY,
  RETURN_AMT AS RETURN_AMT,
  RETURN_COST AS RETURN_COST,
  RETURN_QTY AS RETURN_QTY,
  SPECIAL_SRVC_AMT AS SPECIAL_SRVC_AMT,
  SPECIAL_SRVC_QTY AS SPECIAL_SRVC_QTY,
  NET_COUPON_AMT AS NET_COUPON_AMT,
  NET_COUPON_QTY AS NET_COUPON_QTY,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_SALES_COST AS NET_SALES_COST,
  NET_SALES_QTY AS NET_SALES_QTY,
  NET_DISC_AMT AS NET_DISC_AMT,
  NET_DISC_QTY AS NET_DISC_QTY,
  NET_MERCH_DISC_AMT AS NET_MERCH_DISC_AMT,
  NET_MERCH_DISC_QTY AS NET_MERCH_DISC_QTY,
  NET_SPECIAL_SALES_AMT AS NET_SPECIAL_SALES_AMT,
  NET_SPECIAL_SALES_QTY AS NET_SPECIAL_SALES_QTY,
  NET_SALES_TAX_AMT AS NET_SALES_TAX_AMT,
  NET_PAYMENT_AMT AS NET_PAYMENT_AMT,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  DATE_LOADED AS DATE_LOADED,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  src_SALES_TRANS_TXN_7
WHERE
  src_SALES_TRANS_TXN_7.DAY_DT >= CURRENT_DATE - {DAYS}"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("sq_SALES_TRANS_TXN_8")

# COMMAND ----------
# DBTITLE 1, jnr_SALES_TXN_9


query_9 = f"""SELECT
  MASTER.SOURCE_ID AS SOURCE_ID,
  MASTER.LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  MASTER.LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  MASTER.TXN_ID AS TXN_ID,
  MASTER.TXN_TSTSMP AS TXN_TSTSMP,
  MASTER.STATUS AS STATUS,
  MASTER.STATUS_CODE AS STATUS_CODE,
  MASTER.TXN_KEY_GID AS TXN_KEY_GID,
  MASTER.SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  MASTER.DAY_DT AS DAY_DT,
  MASTER.LOCATION_ID AS LOCATION_ID,
  MASTER.TRANSACTION_NBR AS TRANSACTION_NBR,
  DETAIL.POINTS_REDEEMED AS POINTS_REDEEMED,
  DETAIL.BASE_POINTS_EARNED AS BASE_POINTS_EARNED,
  DETAIL.BONUS_POINTS_EARNED AS BONUS_POINTS_EARNED,
  DETAIL.NET_SALES_AMT AS NET_SALES_AMT,
  DETAIL.NET_SALES_QTY AS NET_SALES_QTY,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  jnr_SKEY_6 MASTER
  INNER JOIN sq_SALES_TRANS_TXN_8 DETAIL ON MASTER.DAY_DT = DETAIL.DAY_DT
  AND MASTER.SALES_INSTANCE_ID = DETAIL.SALES_INSTANCE_ID
  AND MASTER.LOCATION_ID = DETAIL.LOCATION_ID"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("jnr_SALES_TXN_9")

# COMMAND ----------
# DBTITLE 1, src_SALES_TRANS_SKU_10


query_10 = f"""SELECT
  DAY_DT AS DAY_DT,
  SALES_INSTANCE_ID_DIST_KEY AS SALES_INSTANCE_ID_DIST_KEY,
  PRODUCT_ID AS PRODUCT_ID,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  LOCATION_ID AS LOCATION_ID,
  SALES_TYPE_ID AS SALES_TYPE_ID,
  VOID_TYPE_CD AS VOID_TYPE_CD,
  TXN_WAS_POST_VOIDED_FLAG AS TXN_WAS_POST_VOIDED_FLAG,
  ORDER_NBR AS ORDER_NBR,
  ORDER_SEQ_NBR AS ORDER_SEQ_NBR,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  ORDER_ASSIST_LOCATION_ID AS ORDER_ASSIST_LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_CREATION_DEVICE_TYPE AS ORDER_CREATION_DEVICE_TYPE,
  ORDER_CREATION_DEVICE_WIDTH AS ORDER_CREATION_DEVICE_WIDTH,
  TXN_SEGMENT AS TXN_SEGMENT,
  PAYMENT_DEVICE_TYPE AS PAYMENT_DEVICE_TYPE,
  TRANS_TSTMP AS TRANS_TSTMP,
  LOYALTY_NBR AS LOYALTY_NBR,
  LOYALTY_REDEMPTION_ID AS LOYALTY_REDEMPTION_ID,
  LUID AS LUID,
  CUST_TRANS_ID AS CUST_TRANS_ID,
  CUSTOMER_EID AS CUSTOMER_EID,
  CUSTOMER_GID AS CUSTOMER_GID,
  SALES_CUSTOMER_LINK_EXCL_TYPE_ID AS SALES_CUSTOMER_LINK_EXCL_TYPE_ID,
  SPECIAL_SALES_FLAG AS SPECIAL_SALES_FLAG,
  RECEIPTLESS_RETURN_FLAG AS RECEIPTLESS_RETURN_FLAG,
  TRAINING_START_DT AS TRAINING_START_DT,
  TRAINER_NAME AS TRAINER_NAME,
  SALES_AMT AS SALES_AMT,
  SALES_COST AS SALES_COST,
  SALES_QTY AS SALES_QTY,
  SPECIAL_SALES_AMT AS SPECIAL_SALES_AMT,
  SPECIAL_SALES_QTY AS SPECIAL_SALES_QTY,
  RETURN_AMT AS RETURN_AMT,
  RETURN_COST AS RETURN_COST,
  RETURN_QTY AS RETURN_QTY,
  CLEARANCE_AMT AS CLEARANCE_AMT,
  CLEARANCE_QTY AS CLEARANCE_QTY,
  CLEARANCE_RETURN_AMT AS CLEARANCE_RETURN_AMT,
  CLEARANCE_RETURN_QTY AS CLEARANCE_RETURN_QTY,
  SPECIAL_RETURN_AMT AS SPECIAL_RETURN_AMT,
  SPECIAL_RETURN_QTY AS SPECIAL_RETURN_QTY,
  SPECIAL_SRVC_AMT AS SPECIAL_SRVC_AMT,
  DISCOUNT_AMT AS DISCOUNT_AMT,
  DISCOUNT_QTY AS DISCOUNT_QTY,
  DISCOUNT_RETURN_AMT AS DISCOUNT_RETURN_AMT,
  DISCOUNT_RETURN_QTY AS DISCOUNT_RETURN_QTY,
  POS_COUPON_AMT AS POS_COUPON_AMT,
  POS_COUPON_QTY AS POS_COUPON_QTY,
  POS_COUPON_ALLOC_AMT AS POS_COUPON_ALLOC_AMT,
  POS_COUPON_ALLOC_QTY AS POS_COUPON_ALLOC_QTY,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_SALES_COST AS NET_SALES_COST,
  NET_SALES_QTY AS NET_SALES_QTY,
  MA_SALES_AMT AS MA_SALES_AMT,
  MA_SALES_QTY AS MA_SALES_QTY,
  MA_TRANS_AMT AS MA_TRANS_AMT,
  MA_TRANS_COST AS MA_TRANS_COST,
  MA_TRANS_QTY AS MA_TRANS_QTY,
  NET_MARGIN_AMT AS NET_MARGIN_AMT,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  SALES_TRANS_SKU"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("src_SALES_TRANS_SKU_10")

# COMMAND ----------
# DBTITLE 1, sq_SALES_TRANS_SKU_11


query_11 = f"""SELECT
  DAY_DT AS DAY_DT,
  SALES_INSTANCE_ID_DIST_KEY AS SALES_INSTANCE_ID_DIST_KEY,
  PRODUCT_ID AS PRODUCT_ID,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  LOCATION_ID AS LOCATION_ID,
  SALES_TYPE_ID AS SALES_TYPE_ID,
  VOID_TYPE_CD AS VOID_TYPE_CD,
  TXN_WAS_POST_VOIDED_FLAG AS TXN_WAS_POST_VOIDED_FLAG,
  ORDER_NBR AS ORDER_NBR,
  ORDER_SEQ_NBR AS ORDER_SEQ_NBR,
  ORDER_CHANNEL AS ORDER_CHANNEL,
  ORDER_ASSIST_LOCATION_ID AS ORDER_ASSIST_LOCATION_ID,
  ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,
  ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,
  ORDER_CREATION_DEVICE_TYPE AS ORDER_CREATION_DEVICE_TYPE,
  ORDER_CREATION_DEVICE_WIDTH AS ORDER_CREATION_DEVICE_WIDTH,
  TXN_SEGMENT AS TXN_SEGMENT,
  PAYMENT_DEVICE_TYPE AS PAYMENT_DEVICE_TYPE,
  TRANS_TSTMP AS TRANS_TSTMP,
  LOYALTY_NBR AS LOYALTY_NBR,
  LOYALTY_REDEMPTION_ID AS LOYALTY_REDEMPTION_ID,
  LUID AS LUID,
  CUST_TRANS_ID AS CUST_TRANS_ID,
  CUSTOMER_EID AS CUSTOMER_EID,
  CUSTOMER_GID AS CUSTOMER_GID,
  SALES_CUSTOMER_LINK_EXCL_TYPE_ID AS SALES_CUSTOMER_LINK_EXCL_TYPE_ID,
  SPECIAL_SALES_FLAG AS SPECIAL_SALES_FLAG,
  RECEIPTLESS_RETURN_FLAG AS RECEIPTLESS_RETURN_FLAG,
  TRAINING_START_DT AS TRAINING_START_DT,
  TRAINER_NAME AS TRAINER_NAME,
  SALES_AMT AS SALES_AMT,
  SALES_COST AS SALES_COST,
  SALES_QTY AS SALES_QTY,
  SPECIAL_SALES_AMT AS SPECIAL_SALES_AMT,
  SPECIAL_SALES_QTY AS SPECIAL_SALES_QTY,
  RETURN_AMT AS RETURN_AMT,
  RETURN_COST AS RETURN_COST,
  RETURN_QTY AS RETURN_QTY,
  CLEARANCE_AMT AS CLEARANCE_AMT,
  CLEARANCE_QTY AS CLEARANCE_QTY,
  CLEARANCE_RETURN_AMT AS CLEARANCE_RETURN_AMT,
  CLEARANCE_RETURN_QTY AS CLEARANCE_RETURN_QTY,
  SPECIAL_RETURN_AMT AS SPECIAL_RETURN_AMT,
  SPECIAL_RETURN_QTY AS SPECIAL_RETURN_QTY,
  SPECIAL_SRVC_AMT AS SPECIAL_SRVC_AMT,
  DISCOUNT_AMT AS DISCOUNT_AMT,
  DISCOUNT_QTY AS DISCOUNT_QTY,
  DISCOUNT_RETURN_AMT AS DISCOUNT_RETURN_AMT,
  DISCOUNT_RETURN_QTY AS DISCOUNT_RETURN_QTY,
  POS_COUPON_AMT AS POS_COUPON_AMT,
  POS_COUPON_QTY AS POS_COUPON_QTY,
  POS_COUPON_ALLOC_AMT AS POS_COUPON_ALLOC_AMT,
  POS_COUPON_ALLOC_QTY AS POS_COUPON_ALLOC_QTY,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_SALES_COST AS NET_SALES_COST,
  NET_SALES_QTY AS NET_SALES_QTY,
  MA_SALES_AMT AS MA_SALES_AMT,
  MA_SALES_QTY AS MA_SALES_QTY,
  MA_TRANS_AMT AS MA_TRANS_AMT,
  MA_TRANS_COST AS MA_TRANS_COST,
  MA_TRANS_QTY AS MA_TRANS_QTY,
  NET_MARGIN_AMT AS NET_MARGIN_AMT,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  src_SALES_TRANS_SKU_10
WHERE
  src_SALES_TRANS_SKU_10.DAY_DT >= CURRENT_DATE - {DAYS}"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("sq_SALES_TRANS_SKU_11")

# COMMAND ----------
# DBTITLE 1, agg_MARGIN_12


query_12 = f"""SELECT
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  SUM(NET_MARGIN_AMT) AS o_NET_MARGIN_AMT,
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  sq_SALES_TRANS_SKU_11
GROUP BY
  SALES_INSTANCE_ID,
  DAY_DT,
  LOCATION_ID"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("agg_MARGIN_12")

# COMMAND ----------
# DBTITLE 1, jnr_SALES_SKU_13


query_13 = f"""SELECT
  MASTER.SOURCE_ID AS SOURCE_ID,
  MASTER.LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  MASTER.LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  MASTER.TXN_ID AS TXN_ID,
  MASTER.TXN_TSTSMP AS TXN_TSTSMP,
  MASTER.STATUS AS STATUS,
  MASTER.STATUS_CODE AS STATUS_CODE,
  MASTER.TXN_KEY_GID AS TXN_KEY_GID,
  MASTER.SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  MASTER.DAY_DT AS DAY_DT,
  MASTER.LOCATION_ID AS LOCATION_ID,
  MASTER.TRANSACTION_NBR AS TRANSACTION_NBR,
  MASTER.POINTS_REDEEMED AS POINTS_REDEEMED,
  MASTER.BASE_POINTS_EARNED AS BASE_POINTS_EARNED,
  MASTER.BONUS_POINTS_EARNED AS BONUS_POINTS_EARNED,
  MASTER.NET_SALES_AMT AS NET_SALES_AMT,
  MASTER.NET_SALES_QTY AS NET_SALES_QTY,
  DETAIL.o_NET_MARGIN_AMT AS o_NET_MARGIN_AMT,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  jnr_SALES_TXN_9 MASTER
  LEFT JOIN agg_MARGIN_12 DETAIL ON MASTER.SALES_INSTANCE_ID = DETAIL.SALES_INSTANCE_ID
  AND MASTER.DAY_DT = DETAIL.DAY_DT
  AND MASTER.LOCATION_ID = DETAIL.LOCATION_ID"""

df_13 = spark.sql(query_13)

df_13.createOrReplaceTempView("jnr_SALES_SKU_13")

# COMMAND ----------
# DBTITLE 1, jnr_src_tgt_14


query_14 = f"""SELECT
  MASTER.SOURCE_ID AS SOURCE_ID,
  MASTER.LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  MASTER.LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  MASTER.TXN_ID AS TXN_ID,
  MASTER.TXN_TSTSMP AS TXN_TSTSMP,
  MASTER.STATUS AS STATUS,
  MASTER.STATUS_CODE AS STATUS_CODE,
  MASTER.TXN_KEY_GID AS TXN_KEY_GID,
  MASTER.SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  MASTER.DAY_DT AS DAY_DT,
  MASTER.LOCATION_ID AS LOCATION_ID,
  MASTER.TRANSACTION_NBR AS TRANSACTION_NBR,
  MASTER.POINTS_REDEEMED AS POINTS_REDEEMED,
  MASTER.BASE_POINTS_EARNED AS BASE_POINTS_EARNED,
  MASTER.BONUS_POINTS_EARNED AS BONUS_POINTS_EARNED,
  MASTER.NET_SALES_AMT AS NET_SALES_AMT,
  MASTER.NET_SALES_QTY AS NET_SALES_QTY,
  MASTER.o_NET_MARGIN_AMT AS o_NET_MARGIN_AMT,
  DETAIL.DAY_DT AS tgt_DAY_DT,
  DETAIL.SALES_INSTANCE_ID AS tgt_SALES_INSTANCE_ID,
  DETAIL.LOCATION_ID AS tgt_LOCATION_ID,
  DETAIL.TXN_NBR AS tgt_TXN_NBR,
  DETAIL.TXN_TSTSMP AS tgt_TXN_TSTSMP,
  DETAIL.SOURCE_ID AS tgt_SOURCE_ID,
  DETAIL.LOYALTY_ID_CUSTOMER AS tgt_LOYALTY_ID_CUSTOMER,
  DETAIL.LOYALTY_ID_CLAIMED AS tgt_LOYALTY_ID_CLAIMED,
  DETAIL.STATUS_CD AS tgt_STATUS_CD,
  DETAIL.STATUS_API_MESSAGE AS tgt_STATUS_API_MESSAGE,
  DETAIL.POINTS_REDEEMED AS tgt_POINTS_REDEEMED,
  DETAIL.POINTS_AWARDED AS tgt_POINTS_AWARDED,
  DETAIL.NET_SALES_AMT AS tgt_NET_SALES_AMT,
  DETAIL.NET_MARGIN_AMT AS tgt_NET_MARGIN_AMT,
  DETAIL.NET_SALES_QTY AS tgt_NET_SALES_QTY,
  DETAIL.LOAD_TSTMP AS tgt_LOAD_TSTMP,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  jnr_SALES_SKU_13 MASTER
  LEFT JOIN sq_DD_TXN_STATUS_1 DETAIL ON MASTER.SALES_INSTANCE_ID = DETAIL.SALES_INSTANCE_ID
  AND MASTER.DAY_DT = DETAIL.DAY_DT
  AND MASTER.LOCATION_ID = DETAIL.LOCATION_ID"""

df_14 = spark.sql(query_14)

df_14.createOrReplaceTempView("jnr_src_tgt_14")

# COMMAND ----------
# DBTITLE 1, exp_TARGET_15


query_15 = f"""SELECT
  SOURCE_ID AS SOURCE_ID,
  LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  TXN_ID AS TXN_ID,
  TXN_TSTSMP AS TXN_TSTSMP,
  STATUS AS STATUS,
  STATUS_CODE AS STATUS_CODE,
  TXN_KEY_GID AS TXN_KEY_GID,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  TRANSACTION_NBR AS TRANSACTION_NBR,
  POINTS_REDEEMED AS POINTS_REDEEMED,
  BASE_POINTS_EARNED + BONUS_POINTS_EARNED AS v_POINTS_AWARDED,
  BASE_POINTS_EARNED + BONUS_POINTS_EARNED AS o_POINTS_AWARDED,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_SALES_QTY AS NET_SALES_QTY,
  o_NET_MARGIN_AMT AS o_NET_MARGIN_AMT,
  IFF(
    ISNULL(tgt_LOAD_TSTMP),
    SESSSTARTTIME,
    tgt_LOAD_TSTMP
  ) AS o_LOAD_TSTMP,
  SESSSTARTTIME AS o_UPDATE_TSTMP,
  {STATUS_DESC} --IFF(STATUS_CODE='201','Generic Loyalty ID',
  --IFF(STATUS_CODE='400','Transaction Relinked',
  --IFF(STATUS_CODE='409','Conflict',
  --IFF(STATUS_CODE='410','Previously claimed'))))) AS o_STATUS_DESC,
  tgt_STATUS_API_MESSAGE AS tgt_STATUS_API_MESSAGE,
  IFF(
    ISNULL(tgt_LOAD_TSTMP),
    'I',
    IFF (
      NOT ISNULL(tgt_LOAD_TSTMP)
      AND (
        (
          IFF(ISNULL(tgt_TXN_TSTSMP), now(), tgt_TXN_TSTSMP) <> IFF(ISNULL(TXN_TSTSMP), now(), TXN_TSTSMP)
        )
        OR IFF (ISNULL(tgt_TXN_NBR), 99999999999, tgt_TXN_NBR) <> IFF (
          ISNULL(TRANSACTION_NBR),
          99999999999,
          TRANSACTION_NBR
        )
        OR (
          IFF(ISNULL(tgt_SOURCE_ID), 'XX', tgt_SOURCE_ID) <> IFF(ISNULL(SOURCE_ID), 'XX', SOURCE_ID)
        )
        OR (
          IFF (
            ISNULL(tgt_LOYALTY_ID_CUSTOMER),
            99999999999,
            tgt_LOYALTY_ID_CUSTOMER
          ) <> IFF (
            ISNULL(LOYALTY_ID_CUSTOMER),
            99999999999,
            LOYALTY_ID_CUSTOMER
          )
        )
        OR (
          IFF (
            ISNULL(tgt_LOYALTY_ID_CLAIMED),
            99999999999,
            tgt_LOYALTY_ID_CLAIMED
          ) <> IFF (
            ISNULL(LOYALTY_ID_CLAIMED),
            99999999999,
            LOYALTY_ID_CLAIMED
          )
        )
        OR (
          IFF (ISNULL(tgt_STATUS_CD), 'XX', tgt_STATUS_CD) <> IFF (ISNULL(STATUS_CODE), 'XX', STATUS_CODE)
        )
        OR (
          IFF (
            ISNULL(tgt_STATUS_API_MESSAGE),
            'XX',
            tgt_STATUS_API_MESSAGE
          ) <> IFF (ISNULL(STATUS), 'XX', STATUS)
        )
        OR (
          IFF(
            ISNULL(tgt_POINTS_REDEEMED),
            0,
            tgt_POINTS_REDEEMED
          ) <> IFF(ISNULL(POINTS_REDEEMED), 0, POINTS_REDEEMED)
        )
        OR (
          IFF(ISNULL(tgt_POINTS_AWARDED), 0, tgt_POINTS_AWARDED) <> IFF(
            ISNULL(BASE_POINTS_EARNED + BONUS_POINTS_EARNED),
            0,
            BASE_POINTS_EARNED + BONUS_POINTS_EARNED
          )
        )
        OR (
          IFF(ISNULL(tgt_NET_SALES_AMT), 0.0, tgt_NET_SALES_AMT) <> IFF(ISNULL(NET_SALES_AMT), 0.0, NET_SALES_AMT)
        )
        OR (
          IFF(
            ISNULL(tgt_NET_MARGIN_AMT),
            0.0,
            tgt_NET_MARGIN_AMT
          ) <> IFF(ISNULL(o_NET_MARGIN_AMT), 0.0, o_NET_MARGIN_AMT)
        )
        OR (
          IFF(ISNULL(tgt_NET_SALES_QTY), 0, tgt_NET_SALES_QTY) <> IFF(ISNULL(NET_SALES_QTY), 0, NET_SALES_QTY)
        )
      ),
      'U',
      'X'
    )
  ) AS o_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  jnr_src_tgt_14"""

df_15 = spark.sql(query_15)

df_15.createOrReplaceTempView("exp_TARGET_15")

# COMMAND ----------
# DBTITLE 1, fil_drop_no_change_16


query_16 = f"""SELECT
  SOURCE_ID AS SOURCE_ID,
  LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  TXN_ID AS TXN_ID,
  TXN_TSTSMP AS TXN_TSTSMP,
  STATUS_CODE AS STATUS_CODE,
  TXN_KEY_GID AS TXN_KEY_GID,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  TRANSACTION_NBR AS TRANSACTION_NBR,
  POINTS_REDEEMED AS POINTS_REDEEMED,
  o_POINTS_AWARDED AS o_POINTS_AWARDED,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_SALES_QTY AS NET_SALES_QTY,
  o_NET_MARGIN_AMT AS o_NET_MARGIN_AMT,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_STATUS_DESC AS o_STATUS_DESC,
  NULL AS o_STATUS_API_MESSAGE,
  o_FLAG AS o_FLAG,
  STATUS AS o_STATUS_API_MESSAGE_Tibco,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  exp_TARGET_15
WHERE
  o_FLAG <> 'X'"""

df_16 = spark.sql(query_16)

df_16.createOrReplaceTempView("fil_drop_no_change_16")

# COMMAND ----------
# DBTITLE 1, upd_INS_UPD_17


query_17 = f"""SELECT
  SOURCE_ID AS SOURCE_ID,
  LOYALTY_ID_CUSTOMER AS LOYALTY_ID_CUSTOMER,
  LOYALTY_ID_CLAIMED AS LOYALTY_ID_CLAIMED,
  TXN_TSTSMP AS TXN_TSTSMP,
  STATUS_CODE AS STATUS_CODE,
  SALES_INSTANCE_ID AS SALES_INSTANCE_ID,
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  TRANSACTION_NBR AS TRANSACTION_NBR,
  POINTS_REDEEMED AS POINTS_REDEEMED,
  o_POINTS_AWARDED AS o_POINTS_AWARDED,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_SALES_QTY AS NET_SALES_QTY,
  o_NET_MARGIN_AMT AS o_NET_MARGIN_AMT,
  o_LOAD_TSTMP AS o_LOAD_TSTMP,
  o_UPDATE_TSTMP AS o_UPDATE_TSTMP,
  o_STATUS_DESC AS o_STATUS_DESC,
  o_STATUS_API_MESSAGE_Tibco AS o_STATUS_API_MESSAGE,
  o_FLAG AS o_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  DECODE(o_FLAG, 'I', 'DD_INSERT', 'U', 'DD_UPDATE') AS UPDATE_STRATEGY_FLAG
FROM
  fil_drop_no_change_16"""

df_17 = spark.sql(query_17)

df_17.createOrReplaceTempView("upd_INS_UPD_17")

# COMMAND ----------
# DBTITLE 1, DD_TXN_STATUS


spark.sql("""MERGE INTO DD_TXN_STATUS AS TARGET
USING
  upd_INS_UPD_17 AS SOURCE ON TARGET.LOCATION_ID = SOURCE.LOCATION_ID
  AND TARGET.DAY_DT = SOURCE.DAY_DT
  AND TARGET.SALES_INSTANCE_ID = SOURCE.SALES_INSTANCE_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.DAY_DT = SOURCE.DAY_DT,
  TARGET.SALES_INSTANCE_ID = SOURCE.SALES_INSTANCE_ID,
  TARGET.LOCATION_ID = SOURCE.LOCATION_ID,
  TARGET.TXN_NBR = SOURCE.TRANSACTION_NBR,
  TARGET.TXN_TSTSMP = SOURCE.TXN_TSTSMP,
  TARGET.SOURCE_ID = SOURCE.SOURCE_ID,
  TARGET.LOYALTY_ID_CUSTOMER = SOURCE.LOYALTY_ID_CUSTOMER,
  TARGET.LOYALTY_ID_CLAIMED = SOURCE.LOYALTY_ID_CLAIMED,
  TARGET.STATUS_CD = SOURCE.STATUS_CODE,
  TARGET.STATUS_DESC = SOURCE.o_STATUS_DESC,
  TARGET.STATUS_API_MESSAGE = SOURCE.o_STATUS_API_MESSAGE,
  TARGET.POINTS_REDEEMED = SOURCE.POINTS_REDEEMED,
  TARGET.POINTS_AWARDED = SOURCE.o_POINTS_AWARDED,
  TARGET.NET_SALES_AMT = SOURCE.NET_SALES_AMT,
  TARGET.NET_MARGIN_AMT = SOURCE.o_NET_MARGIN_AMT,
  TARGET.NET_SALES_QTY = SOURCE.NET_SALES_QTY,
  TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP,
  TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.TXN_NBR = SOURCE.TRANSACTION_NBR
  AND TARGET.TXN_TSTSMP = SOURCE.TXN_TSTSMP
  AND TARGET.SOURCE_ID = SOURCE.SOURCE_ID
  AND TARGET.LOYALTY_ID_CUSTOMER = SOURCE.LOYALTY_ID_CUSTOMER
  AND TARGET.LOYALTY_ID_CLAIMED = SOURCE.LOYALTY_ID_CLAIMED
  AND TARGET.STATUS_CD = SOURCE.STATUS_CODE
  AND TARGET.STATUS_DESC = SOURCE.o_STATUS_DESC
  AND TARGET.STATUS_API_MESSAGE = SOURCE.o_STATUS_API_MESSAGE
  AND TARGET.POINTS_REDEEMED = SOURCE.POINTS_REDEEMED
  AND TARGET.POINTS_AWARDED = SOURCE.o_POINTS_AWARDED
  AND TARGET.NET_SALES_AMT = SOURCE.NET_SALES_AMT
  AND TARGET.NET_MARGIN_AMT = SOURCE.o_NET_MARGIN_AMT
  AND TARGET.NET_SALES_QTY = SOURCE.NET_SALES_QTY
  AND TARGET.UPDATE_TSTMP = SOURCE.o_UPDATE_TSTMP
  AND TARGET.LOAD_TSTMP = SOURCE.o_LOAD_TSTMP THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.DAY_DT,
    TARGET.SALES_INSTANCE_ID,
    TARGET.LOCATION_ID,
    TARGET.TXN_NBR,
    TARGET.TXN_TSTSMP,
    TARGET.SOURCE_ID,
    TARGET.LOYALTY_ID_CUSTOMER,
    TARGET.LOYALTY_ID_CLAIMED,
    TARGET.STATUS_CD,
    TARGET.STATUS_DESC,
    TARGET.STATUS_API_MESSAGE,
    TARGET.POINTS_REDEEMED,
    TARGET.POINTS_AWARDED,
    TARGET.NET_SALES_AMT,
    TARGET.NET_MARGIN_AMT,
    TARGET.NET_SALES_QTY,
    TARGET.UPDATE_TSTMP,
    TARGET.LOAD_TSTMP
  )
VALUES
  (
    SOURCE.DAY_DT,
    SOURCE.SALES_INSTANCE_ID,
    SOURCE.LOCATION_ID,
    SOURCE.TRANSACTION_NBR,
    SOURCE.TXN_TSTSMP,
    SOURCE.SOURCE_ID,
    SOURCE.LOYALTY_ID_CUSTOMER,
    SOURCE.LOYALTY_ID_CLAIMED,
    SOURCE.STATUS_CODE,
    SOURCE.o_STATUS_DESC,
    SOURCE.o_STATUS_API_MESSAGE,
    SOURCE.POINTS_REDEEMED,
    SOURCE.o_POINTS_AWARDED,
    SOURCE.NET_SALES_AMT,
    SOURCE.o_NET_MARGIN_AMT,
    SOURCE.NET_SALES_QTY,
    SOURCE.o_UPDATE_TSTMP,
    SOURCE.o_LOAD_TSTMP
  )""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DD_TXN_STATUS")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_DD_TXN_STATUS", mainWorkflowId, parentName)
