# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_OMS_EDW_Load_Ctrl_Pre_SQL")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_OMS_EDW_Load_Ctrl_Pre_SQL", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_FACILITY_0


query_0 = f"""SELECT
  OMS_FACILITY_ID AS OMS_FACILITY_ID,
  FACILITY_TYPE_BITS AS FACILITY_TYPE_BITS,
  MARK_FOR_DELETION_FLAG AS MARK_FOR_DELETION_FLAG,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_FACILITY"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_OMS_FACILITY_0")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_ACCESS_CONTROL_1


query_1 = f"""SELECT
  OMS_ACCESS_CONTROL_ID AS OMS_ACCESS_CONTROL_ID,
  OMS_UCL_USER_ID AS OMS_UCL_USER_ID,
  OMS_ROLE_ID AS OMS_ROLE_ID,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_ACCESS_CONTROL"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("Shortcut_to_OMS_ACCESS_CONTROL_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_ROLE_2


query_2 = f"""SELECT
  OMS_ROLE_ID AS OMS_ROLE_ID,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  OMS_ROLE_NAME AS OMS_ROLE_NAME,
  OMS_ROLE_DESC AS OMS_ROLE_DESC,
  OMS_ROLE_TYPE_ID AS OMS_ROLE_TYPE_ID,
  ACTIVE_FLAG AS ACTIVE_FLAG,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_ROLE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_ROLE_2")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_PAYMENT_DETAIL_3


query_3 = f"""SELECT
  OMS_PAYMENT_DETAIL_ID AS OMS_PAYMENT_DETAIL_ID,
  OMS_ENTITY_TYPE_ID AS OMS_ENTITY_TYPE_ID,
  OMS_ENTITY_ID AS OMS_ENTITY_ID,
  OMS_ENTITY_NBR AS OMS_ENTITY_NBR,
  CARD_NUMBER AS CARD_NUMBER,
  BILL_TO_FIRST_NAME AS BILL_TO_FIRST_NAME,
  BILL_TO_MIDDLE_NAME AS BILL_TO_MIDDLE_NAME,
  BILL_TO_LAST_NAME AS BILL_TO_LAST_NAME,
  BILL_TO_ADDR_LINE1 AS BILL_TO_ADDR_LINE1,
  BILL_TO_ADDR_LINE2 AS BILL_TO_ADDR_LINE2,
  BILL_TO_CITY AS BILL_TO_CITY,
  BILL_TO_STATE_PROV AS BILL_TO_STATE_PROV,
  BILL_TO_POSTAL_CD AS BILL_TO_POSTAL_CD,
  BILL_TO_COUNTRY_CD AS BILL_TO_COUNTRY_CD,
  BILL_TO_PHONE_NBR AS BILL_TO_PHONE_NBR,
  BILL_TO_EMAIL AS BILL_TO_EMAIL,
  OMS_PAYMENT_METHOD_ID AS OMS_PAYMENT_METHOD_ID,
  AFTERPAY_FLG AS AFTERPAY_FLG,
  REQ_AUTH_AMT AS REQ_AUTH_AMT,
  REQ_SETTLEMENT_AMT AS REQ_SETTLEMENT_AMT,
  REQ_REFUND_AMT AS REQ_REFUND_AMT,
  CURRENCY_CD AS CURRENCY_CD,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_PAYMENT_DETAIL"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("Shortcut_to_OMS_A_PAYMENT_DETAIL_3")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_FACILITY_ALIAS_4


query_4 = f"""SELECT
  OMS_FACILITY_ALIAS_ID AS OMS_FACILITY_ALIAS_ID,
  OMS_FACILITY_ID AS OMS_FACILITY_ID,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_FACILITY_NAME AS OMS_FACILITY_NAME,
  MARK_FOR_DELETION_FLAG AS MARK_FOR_DELETION_FLAG,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_FACILITY_ALIAS"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("Shortcut_to_OMS_FACILITY_ALIAS_4")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_INVOICE_LINE_5


query_5 = f"""SELECT
  OMS_INVOICE_LINE_ID AS OMS_INVOICE_LINE_ID,
  OMS_INVOICE_LINE_NBR AS OMS_INVOICE_LINE_NBR,
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_ENTITY_LINE_NBR AS OMS_ENTITY_LINE_NBR,
  OMS_ORDER_LINE_ID AS OMS_ORDER_LINE_ID,
  OMS_RETURN_ORDER_LINE_ID AS OMS_RETURN_ORDER_LINE_ID,
  OMS_RETURN_ORDER_LINE_NBR AS OMS_RETURN_ORDER_LINE_NBR,
  OMS_RETURN_TYPE AS OMS_RETURN_TYPE,
  TAX_INCLUDED_FLAG AS TAX_INCLUDED_FLAG,
  OMS_ORDERED_ITEM_ID AS OMS_ORDERED_ITEM_ID,
  OMS_ORDERED_ITEM_UOM_ID AS OMS_ORDERED_ITEM_UOM_ID,
  ORDERED_QTY AS ORDERED_QTY,
  OMS_SHIPPED_ITEM_ID AS OMS_SHIPPED_ITEM_ID,
  OMS_SHIPPED_ITEM_UOM_ID AS OMS_SHIPPED_ITEM_UOM_ID,
  SHIPPED_QTY AS SHIPPED_QTY,
  INVOICED_QTY AS INVOICED_QTY,
  UNIT_PRICE_AMT AS UNIT_PRICE_AMT,
  LINE_CHARGE_AMT AS LINE_CHARGE_AMT,
  LINE_DISCOUNT_AMT AS LINE_DISCOUNT_AMT,
  LINE_TAX_AMT AS LINE_TAX_AMT,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_INVOICE_LINE"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("Shortcut_to_OMS_A_INVOICE_LINE_5")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_ORDERS_NEW_6


query_6 = f"""SELECT
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_TC_ORDER_ID AS OMS_TC_ORDER_ID,
  OMS_PURCHASE_ORDER_ID AS OMS_PURCHASE_ORDER_ID,
  OMS_PURCHASE_ORDER_NBR AS OMS_PURCHASE_ORDER_NBR,
  OMS_EXT_PURCHASE_ORDER AS OMS_EXT_PURCHASE_ORDER,
  OMS_ORDER_TYPE AS OMS_ORDER_TYPE,
  OMS_ORDER_STATUS_ID AS OMS_ORDER_STATUS_ID,
  OMS_DO_TYPE_ID AS OMS_DO_TYPE_ID,
  OMS_DO_STATUS_ID AS OMS_DO_STATUS_ID,
  OMS_SHIPMENT_ID AS OMS_SHIPMENT_ID,
  OMS_CREATION_TYPE_ID AS OMS_CREATION_TYPE_ID,
  OMS_BILLING_METHOD_ID AS OMS_BILLING_METHOD_ID,
  DROPOFF_PICKUP AS DROPOFF_PICKUP,
  OMS_DELIVERY_OPTIONS_ID AS OMS_DELIVERY_OPTIONS_ID,
  CUSTOMER_PICKUP_FLAG AS CUSTOMER_PICKUP_FLAG,
  PARTIALLY_PLANNED_FLAG AS PARTIALLY_PLANNED_FLAG,
  PARTIAL_SHIP_CONFIRMATION_FLAG AS PARTIAL_SHIP_CONFIRMATION_FLAG,
  PARTIAL_SHIP_CONFIRMATION_STATUS AS PARTIAL_SHIP_CONFIRMATION_STATUS,
  HAS_ALERTS_FLAG AS HAS_ALERTS_FLAG,
  HAS_SPLIT_FLAG AS HAS_SPLIT_FLAG,
  CANCELLED_FLAG AS CANCELLED_FLAG,
  BACK_ORDERED_FLAG AS BACK_ORDERED_FLAG,
  OMS_INBOUND_REGION_ID AS OMS_INBOUND_REGION_ID,
  OMS_OUTBOUND_REGION_ID AS OMS_OUTBOUND_REGION_ID,
  OMS_O_FACILITY_ALIAS_ID AS OMS_O_FACILITY_ALIAS_ID,
  OMS_O_FACILITY_ID AS OMS_O_FACILITY_ID,
  OMS_D_FACILITY_ALIAS_ID AS OMS_D_FACILITY_ALIAS_ID,
  OMS_D_FACILITY_ID AS OMS_D_FACILITY_ID,
  OMS_BILL_FACILITY_ALIAS_ID AS OMS_BILL_FACILITY_ALIAS_ID,
  OMS_BILL_FACILITY_ID AS OMS_BILL_FACILITY_ID,
  OMS_CUSTOMER_ID AS OMS_CUSTOMER_ID,
  ADDR_VALID_FLAG AS ADDR_VALID_FLAG,
  OMS_PICKUP_START_TSTMP AS OMS_PICKUP_START_TSTMP,
  OMS_PICKUP_END_TSTMP AS OMS_PICKUP_END_TSTMP,
  OMS_PICKUP_TZ_ID AS OMS_PICKUP_TZ_ID,
  OMS_DELIVERY_TZ_ID AS OMS_DELIVERY_TZ_ID,
  OMS_DELIVERY_START_TSTMP AS OMS_DELIVERY_START_TSTMP,
  OMS_DELIVERY_END_TSTMP AS OMS_DELIVERY_END_TSTMP,
  OMS_ORDER_DT_TSTMP AS OMS_ORDER_DT_TSTMP,
  OMS_ORDER_RECON_TSTMP AS OMS_ORDER_RECON_TSTMP,
  OMS_SCHED_PICKUP_TSTMP AS OMS_SCHED_PICKUP_TSTMP,
  OMS_SCHED_DELIVERY_TSTMP AS OMS_SCHED_DELIVERY_TSTMP,
  OMS_ACTUAL_SHIPPED_TSTMP AS OMS_ACTUAL_SHIPPED_TSTMP,
  TOTAL_NBR_OF_UNITS AS TOTAL_NBR_OF_UNITS,
  BASELINE_COST AS BASELINE_COST,
  ACTUAL_COST AS ACTUAL_COST,
  MONETARY_VALUE AS MONETARY_VALUE,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  REF_NUM1 AS REF_NUM1,
  OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_ORDERS"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("Shortcut_to_OMS_ORDERS_NEW_6")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_INVOICE_7


query_7 = f"""SELECT
  OMS_INVOICE_ID AS OMS_INVOICE_ID,
  OMS_INVOICE_NBR AS OMS_INVOICE_NBR,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_ENTITY_TYPE AS OMS_ENTITY_TYPE,
  OMS_ENTITY_ID AS OMS_ENTITY_ID,
  OMS_ENTITY_NBR AS OMS_ENTITY_NBR,
  OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE,
  OMS_INVOICE_CREATION_TSTMP AS OMS_INVOICE_CREATION_TSTMP,
  OMS_INVOICE_STATUS_ID AS OMS_INVOICE_STATUS_ID,
  PARTIALLY_SETTLED_FLAG AS PARTIALLY_SETTLED_FLAG,
  COLLECTED_EXTERNALLY_FLAG AS COLLECTED_EXTERNALLY_FLAG,
  OMS_FACILITY_ID AS OMS_FACILITY_ID,
  OMS_SHIPMENT_NBR AS OMS_SHIPMENT_NBR,
  PUBLISHED_FLAG AS PUBLISHED_FLAG,
  C_INITIAL_PUBLISHED_FLAG AS C_INITIAL_PUBLISHED_FLAG,
  OMS_RETURN_ORDER_ID AS OMS_RETURN_ORDER_ID,
  OMS_RETURN_ORDER_NBR AS OMS_RETURN_ORDER_NBR,
  CURRENCY_CD AS CURRENCY_CD,
  HEADER_TAX_AMT AS HEADER_TAX_AMT,
  HEADER_CHARGE_AMT AS HEADER_CHARGE_AMT,
  HEADER_DISCOUNT_AMT AS HEADER_DISCOUNT_AMT,
  INVOICE_AMT AS INVOICE_AMT,
  INVOICE_AMT_PROCESSED AS INVOICE_AMT_PROCESSED,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  OMS_LAST_UPDATED_SOURCE AS OMS_LAST_UPDATED_SOURCE,
  OMS_LAST_UPDATED_SOURCE_TYPE_ID AS OMS_LAST_UPDATED_SOURCE_TYPE_ID,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_INVOICE"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("Shortcut_to_OMS_A_INVOICE_7")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_PURCHASE_ORDERS_LINE_ITEM_8


query_8 = f"""SELECT
  OMS_PURCHASE_ORDERS_ID AS OMS_PURCHASE_ORDERS_ID,
  OMS_PURCHASE_ORDERS_LINE_ITEM_ID AS OMS_PURCHASE_ORDERS_LINE_ITEM_ID,
  OMS_TC_PO_LINE_ID AS OMS_TC_PO_LINE_ID,
  OMS_PARENT_PO_LINE_ITEM_ID AS OMS_PARENT_PO_LINE_ITEM_ID,
  OMS_ORIGINAL_PO_LINE_ITEM_ID AS OMS_ORIGINAL_PO_LINE_ITEM_ID,
  OMS_PURCHASE_ORDERS_LINE_STATUS_ID AS OMS_PURCHASE_ORDERS_LINE_STATUS_ID,
  ORDER_FULFILLMENT_OPTION_ID AS ORDER_FULFILLMENT_OPTION_ID,
  SKU AS SKU,
  CUST_SKU AS CUST_SKU,
  OMS_PRODUCT_CLASS_ID AS OMS_PRODUCT_CLASS_ID,
  RETURNABLE_FLAG AS RETURNABLE_FLAG,
  EXCHANGEABLE_FLAG AS EXCHANGEABLE_FLAG,
  PRICE_OVERRIDE_FLAG AS PRICE_OVERRIDE_FLAG,
  OMS_STORE_FACILITY_ALIAS_ID AS OMS_STORE_FACILITY_ALIAS_ID,
  OMS_STORE_FACILITY_ID AS OMS_STORE_FACILITY_ID,
  OMS_O_FACILITY_ID AS OMS_O_FACILITY_ID,
  OMS_O_FACILITY_ALIAS_ID AS OMS_O_FACILITY_ALIAS_ID,
  OMS_BILL_FACILITY_ALIAS_ID AS OMS_BILL_FACILITY_ALIAS_ID,
  OMS_BILL_FACILITY_ID AS OMS_BILL_FACILITY_ID,
  OMS_D_FACILITY_ID AS OMS_D_FACILITY_ID,
  OMS_D_FACILITY_ALIAS_ID AS OMS_D_FACILITY_ALIAS_ID,
  D_FIRST_NAME AS D_FIRST_NAME,
  D_LAST_NAME AS D_LAST_NAME,
  D_ADDR_1 AS D_ADDR_1,
  D_ADDR_2 AS D_ADDR_2,
  D_ADDR_3 AS D_ADDR_3,
  D_CITY AS D_CITY,
  D_STATE_PROV AS D_STATE_PROV,
  D_POSTAL_CD AS D_POSTAL_CD,
  D_COUNTY AS D_COUNTY,
  D_COUNTRY_CD AS D_COUNTRY_CD,
  D_PHONE_NBR AS D_PHONE_NBR,
  D_EMAIL AS D_EMAIL,
  ADDR_VALID_FLAG AS ADDR_VALID_FLAG,
  OMS_ALLOC_FINALIZER AS OMS_ALLOC_FINALIZER,
  OMS_DSG_CARRIER_ID AS OMS_DSG_CARRIER_ID,
  DSG_SHIP_VIA AS DSG_SHIP_VIA,
  DO_CREATED_FLAG AS DO_CREATED_FLAG,
  READY_TO_SHIP_FLAG AS READY_TO_SHIP_FLAG,
  CANCELLED_FLAG AS CANCELLED_FLAG,
  CLOSED_FLAG AS CLOSED_FLAG,
  DELETED_FLAG AS DELETED_FLAG,
  OMS_REASON_ID AS OMS_REASON_ID,
  OMS_REASON_CODES_GROUP_ID AS OMS_REASON_CODES_GROUP_ID,
  OMS_BACK_ORD_REASON_ID AS OMS_BACK_ORD_REASON_ID,
  OMS_PICKUP_START_TSTMP AS OMS_PICKUP_START_TSTMP,
  OMS_PICKUP_END_TSTMP AS OMS_PICKUP_END_TSTMP,
  OMS_PICKUP_TZ_ID AS OMS_PICKUP_TZ_ID,
  OMS_DELIVERY_START_TSTMP AS OMS_DELIVERY_START_TSTMP,
  OMS_DELIVERY_END_TSTMP AS OMS_DELIVERY_END_TSTMP,
  OMS_DELIVERY_TZ_ID AS OMS_DELIVERY_TZ_ID,
  OMS_REQ_DLVR_TSTMP AS OMS_REQ_DLVR_TSTMP,
  OMS_MUST_DLVR_TSTMP AS OMS_MUST_DLVR_TSTMP,
  OMS_SHIP_BY_DT AS OMS_SHIP_BY_DT,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  ORDER_QTY AS ORDER_QTY,
  CANCELLED_QTY AS CANCELLED_QTY,
  ALLOCATED_QTY AS ALLOCATED_QTY,
  RELEASED_QTY AS RELEASED_QTY,
  RECEIVED_QTY AS RECEIVED_QTY,
  PPACK_QTY AS PPACK_QTY,
  SHIPPED_QTY AS SHIPPED_QTY,
  ORIGINAL_PRICE_AMT AS ORIGINAL_PRICE_AMT,
  RETAIL_PRICE_AMT AS RETAIL_PRICE_AMT,
  UNIT_TAX_AMT AS UNIT_TAX_AMT,
  LINE_TOTAL_AMT AS LINE_TOTAL_AMT,
  UNIT_MONETARY_VALUE AS UNIT_MONETARY_VALUE,
  TOTAL_MONETARY_VALUE AS TOTAL_MONETARY_VALUE,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  OMS_EXT_CREATED_TSTMP AS OMS_EXT_CREATED_TSTMP,
  OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_PURCHASE_ORDERS_LINE_ITEM"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("Shortcut_to_OMS_PURCHASE_ORDERS_LINE_ITEM_8")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_UCL_USER_9


query_9 = f"""SELECT
  OMS_UCL_USER_ID AS OMS_UCL_USER_ID,
  OMS_COMPANY_ID AS OMS_COMPANY_ID,
  OMS_USER_TYPE_ID AS OMS_USER_TYPE_ID,
  USER_NAME AS USER_NAME,
  USER_FIRST_NAME AS USER_FIRST_NAME,
  USER_MIDDLE_NAME AS USER_MIDDLE_NAME,
  USER_LAST_NAME AS USER_LAST_NAME,
  ACTIVE_FLAG AS ACTIVE_FLAG,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_UCL_USER"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("Shortcut_to_OMS_UCL_USER_9")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_PURCHASE_ORDERS_10


query_10 = f"""SELECT
  OMS_PURCHASE_ORDERS_ID AS OMS_PURCHASE_ORDERS_ID,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_TC_PURCHASE_ORDERS_ID AS OMS_TC_PURCHASE_ORDERS_ID,
  OMS_EXT_PURCHASE_ORDERS_ID AS OMS_EXT_PURCHASE_ORDERS_ID,
  OMS_PARENT_PURCHASE_ORDERS_ID AS OMS_PARENT_PURCHASE_ORDERS_ID,
  OMS_PURCHASE_ORDERS_TYPE_ID AS OMS_PURCHASE_ORDERS_TYPE_ID,
  OMS_PURCHASE_ORDERS_STATUS_ID AS OMS_PURCHASE_ORDERS_STATUS_ID,
  OMS_ORDER_CATEGORY_ID AS OMS_ORDER_CATEGORY_ID,
  OMS_O_FACILITY_ID AS OMS_O_FACILITY_ID,
  OMS_O_FACILITY_ALIAS_ID AS OMS_O_FACILITY_ALIAS_ID,
  OMS_D_FACILITY_ID AS OMS_D_FACILITY_ID,
  OMS_D_FACILITY_ALIAS_ID AS OMS_D_FACILITY_ALIAS_ID,
  OMS_BILL_FACILITY_ID AS OMS_BILL_FACILITY_ID,
  OMS_BILL_FACILITY_ALIAS_ID AS OMS_BILL_FACILITY_ALIAS_ID,
  OMS_ORIGIN_SHIP_VIA_FACILITY_ALIAS_ID AS OMS_ORIGIN_SHIP_VIA_FACILITY_ALIAS_ID,
  OMS_ORIGIN_SHIP_VIA_FACILITY_ID AS OMS_ORIGIN_SHIP_VIA_FACILITY_ID,
  OMS_DES_SHIP_VIA_FACILITY_ALIAS_ID AS OMS_DES_SHIP_VIA_FACILITY_ALIAS_ID,
  OMS_DES_SHIP_VIA_FACILITY_ID AS OMS_DES_SHIP_VIA_FACILITY_ID,
  OMS_CUSTOMER_CD AS OMS_CUSTOMER_CD,
  CUSTOMER_FIRST_NAME AS CUSTOMER_FIRST_NAME,
  CUSTOMER_LAST_NAME AS CUSTOMER_LAST_NAME,
  CUSTOMER_PHONE_NBR AS CUSTOMER_PHONE_NBR,
  CUSTOMER_EMAIL AS CUSTOMER_EMAIL,
  OMS_RETURN_REFERENCE_NBR AS OMS_RETURN_REFERENCE_NBR,
  OMS_BILL_OF_LADING_NBR AS OMS_BILL_OF_LADING_NBR,
  OMS_TRANS_RESP_CD AS OMS_TRANS_RESP_CD,
  OMS_COMMODITY_CODE_ID AS OMS_COMMODITY_CODE_ID,
  OMS_CARRIER_ID AS OMS_CARRIER_ID,
  OMS_PRODUCT_CLASS_ID AS OMS_PRODUCT_CLASS_ID,
  OMS_PROTECTION_LEVEL_ID AS OMS_PROTECTION_LEVEL_ID,
  OMS_CREATION_TYPE_ID AS OMS_CREATION_TYPE_ID,
  OMS_CHANNEL_TYPE_ID AS OMS_CHANNEL_TYPE_ID,
  OMS_CHANNEL_ID AS OMS_CHANNEL_ID,
  OMS_FULFILL_MODE_ID AS OMS_FULFILL_MODE_ID,
  OMS_ENTERED_BY AS OMS_ENTERED_BY,
  OMS_ENTRY_CD AS OMS_ENTRY_CD,
  OMS_PAYMENT_MODE_ID AS OMS_PAYMENT_MODE_ID,
  OMS_PAYMENT_STATUS_ID AS OMS_PAYMENT_STATUS_ID,
  DROPOFF_PICKUP AS DROPOFF_PICKUP,
  ORDER_RECEIVED_FLAG AS ORDER_RECEIVED_FLAG,
  ON_HOLD_FLAG AS ON_HOLD_FLAG,
  HAS_ALERTS_FLAG AS HAS_ALERTS_FLAG,
  CANCELLED_FLAG AS CANCELLED_FLAG,
  CLOSED_FLAG AS CLOSED_FLAG,
  OMS_REASON_ID AS OMS_REASON_ID,
  OMS_DECLINE_REASON_ID AS OMS_DECLINE_REASON_ID,
  OMS_REASON_CODES_GROUP_ID AS OMS_REASON_CODES_GROUP_ID,
  IMPORTED_FLAG AS IMPORTED_FLAG,
  PURCHASE_ORDERS_RECONCILED_FLAG AS PURCHASE_ORDERS_RECONCILED_FLAG,
  READY_TO_SHIP_FLAG AS READY_TO_SHIP_FLAG,
  CUSTOMER_PICKUP_FLAG AS CUSTOMER_PICKUP_FLAG,
  DIRECT_ALLOWED_FLAG AS DIRECT_ALLOWED_FLAG,
  PARTIALLY_PLANNED_FLAG AS PARTIALLY_PLANNED_FLAG,
  OMS_PURCHASE_ORDERS_DT_TSTMP AS OMS_PURCHASE_ORDERS_DT_TSTMP,
  OMS_PICKUP_START_TSTMP AS OMS_PICKUP_START_TSTMP,
  OMS_PICKUP_END_TSTMP AS OMS_PICKUP_END_TSTMP,
  OMS_PICKUP_TZ_ID AS OMS_PICKUP_TZ_ID,
  OMS_DELIVERY_START_TSTMP AS OMS_DELIVERY_START_TSTMP,
  OMS_DELIVERY_END_TSTMP AS OMS_DELIVERY_END_TSTMP,
  OMS_DELIVERY_TZ_ID AS OMS_DELIVERY_TZ_ID,
  OMS_REQUESTED_DLVR_TSTMP AS OMS_REQUESTED_DLVR_TSTMP,
  OMS_MUST_DLVR_TSTMP AS OMS_MUST_DLVR_TSTMP,
  OMS_PROMISED_DLVR_TSTMP AS OMS_PROMISED_DLVR_TSTMP,
  OMS_DUE_DT AS OMS_DUE_DT,
  OMS_CANCEL_DT AS OMS_CANCEL_DT,
  OMS_RELEASE_TSTMP AS OMS_RELEASE_TSTMP,
  OMS_FIRST_RCPT_TSTMP AS OMS_FIRST_RCPT_TSTMP,
  OMS_LAST_RCPT_TSTMP AS OMS_LAST_RCPT_TSTMP,
  MONETARY_VALUE AS MONETARY_VALUE,
  MV_CURRENCY_CD AS MV_CURRENCY_CD,
  ORIG_BUDG_COST AS ORIG_BUDG_COST,
  BUDG_COST AS BUDG_COST,
  BUDG_COST_CURRENCY_CD AS BUDG_COST_CURRENCY_CD,
  TAX_CHARGES_AMT AS TAX_CHARGES_AMT,
  MISC_CHARGES_AMT AS MISC_CHARGES_AMT,
  GRAND_TOTAL_AMT AS GRAND_TOTAL_AMT,
  FREIGHT_REVENUE_AMT AS FREIGHT_REVENUE_AMT,
  CURRENCY_CD AS CURRENCY_CD,
  OMS_CREATED_SOURCE_TYPE_ID AS OMS_CREATED_SOURCE_TYPE_ID,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_PURCHASE_ORDERS"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("Shortcut_to_OMS_PURCHASE_ORDERS_10")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_ORDER_LINE_ITEM_11


query_11 = f"""SELECT
  OMS_ORDER_ID AS OMS_ORDER_ID,
  OMS_LINE_ITEM_ID AS OMS_LINE_ITEM_ID,
  OMS_TC_COMPANY_ID AS OMS_TC_COMPANY_ID,
  OMS_MASTER_ORDER_ID AS OMS_MASTER_ORDER_ID,
  OMS_MO_LINE_ITEM_ID AS OMS_MO_LINE_ITEM_ID,
  OMS_TC_ORDER_LINE_ID AS OMS_TC_ORDER_LINE_ID,
  OMS_PURCHASE_ORDER_NBR AS OMS_PURCHASE_ORDER_NBR,
  OMS_PURCHASE_ORDER_LINE_NBR AS OMS_PURCHASE_ORDER_LINE_NBR,
  OMS_ITEM_ID AS OMS_ITEM_ID,
  OMS_ITEM_NAME AS OMS_ITEM_NAME,
  OMS_PICKUP_START_TSTMP AS OMS_PICKUP_START_TSTMP,
  OMS_PICKUP_END_TSTMP AS OMS_PICKUP_END_TSTMP,
  OMS_DELIVERY_START_TSTMP AS OMS_DELIVERY_START_TSTMP,
  OMS_DELIVERY_END_TSTMP AS OMS_DELIVERY_END_TSTMP,
  OMS_ACTUAL_SHIPPED_TSTMP AS OMS_ACTUAL_SHIPPED_TSTMP,
  OMS_DO_DTL_STATUS_ID AS OMS_DO_DTL_STATUS_ID,
  CANCELLED_FLAG AS CANCELLED_FLAG,
  OMS_EVENT_CD AS OMS_EVENT_CD,
  OMS_REASON_CD AS OMS_REASON_CD,
  OMS_EXP_INFO_CD AS OMS_EXP_INFO_CD,
  PARTIAL_FILL_FLAG AS PARTIAL_FILL_FLAG,
  ORIG_ORDER_QTY AS ORIG_ORDER_QTY,
  ADJUSTED_ORDER_QTY AS ADJUSTED_ORDER_QTY,
  USER_CANCELED_QTY AS USER_CANCELED_QTY,
  ORDER_QTY AS ORDER_QTY,
  RECEIVED_QTY AS RECEIVED_QTY,
  ALLOCATED_QTY AS ALLOCATED_QTY,
  SHIPPED_QTY AS SHIPPED_QTY,
  RETAIL_PRICE_AMT AS RETAIL_PRICE_AMT,
  UNIT_PRICE_AMT AS UNIT_PRICE_AMT,
  UNIT_COST_AMT AS UNIT_COST_AMT,
  UNIT_TAX_AMT AS UNIT_TAX_AMT,
  UNIT_MONETARY_VALUE AS UNIT_MONETARY_VALUE,
  TOTAL_MONETARY_VALUE AS TOTAL_MONETARY_VALUE,
  FREIGHT_REVENUE_AMT AS FREIGHT_REVENUE_AMT,
  FREIGHT_REVENUE_CURRENCY_CD AS FREIGHT_REVENUE_CURRENCY_CD,
  OMS_CREATED_SOURCE AS OMS_CREATED_SOURCE,
  OMS_CREATED_TSTMP AS OMS_CREATED_TSTMP,
  OMS_LAST_UPDATED_TSTMP AS OMS_LAST_UPDATED_TSTMP,
  UPDATE_TSTMP AS UPDATE_TSTMP,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_ORDER_LINE_ITEM"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("Shortcut_to_OMS_ORDER_LINE_ITEM_11")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SQL_TRANSFORM_DUMMY_SOURCE_12


query_12 = f"""SELECT
  START_TSTMP AS START_TSTMP,
  TABLE_NAME AS TABLE_NAME,
  BEGIN_ROW_CNT AS BEGIN_ROW_CNT
FROM
  SQL_TRANSFORM_DUMMY_SOURCE"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("Shortcut_to_SQL_TRANSFORM_DUMMY_SOURCE_12")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_MASTER_ORDER_13


query_13 = f"""SELECT
  CURRENT_DATE AS START_TSTMP,
  'Oms_Edw_Load_Ctrl_Pre' AS TABLE_NAME,
  count(*) AS BEGIN_ROW_CNT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Oms_Edw_Load_Ctrl_Pre"""

df_13 = spark.sql(query_13)

df_13.createOrReplaceTempView("SQ_Shortcut_to_OMS_MASTER_ORDER_13")

# COMMAND ----------
# DBTITLE 1, exp_14


query_14 = f"""SELECT
  START_TSTMP AS START_TSTMP,
  TABLE_NAME AS TABLE_NAME,
  BEGIN_ROW_CNT AS BEGIN_ROW_CNT,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_OMS_MASTER_ORDER_13"""

df_14 = spark.sql(query_14)

df_14.createOrReplaceTempView("exp_14")

# COMMAND ----------
# DBTITLE 1, SQL_INS_and_DUPS_CHECK_15


query_15 = f"""SELECT
  START_TSTMP AS null,
  TABLE_NAME AS null,
  BEGIN_ROW_CNT AS null,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  exp_14"""

df_15 = spark.sql(query_15)

df_15.createOrReplaceTempView("SQL_INS_and_DUPS_CHECK_15")

# COMMAND ----------
# DBTITLE 1, EXP_GET_SESSION_INFO_16


query_16 = f"""SELECT
  TO_CHAR(START_TSTMP_output, 'MM/DD/YYYY HH24:MI:SS') AS START_TSTMP,
  TO_CHAR(now(), 'MM/DD/YYYY HH24:MI:SS') AS END_TSTMP,
  $PMWorkflowName AS WORKFLOW_NAME,
  $PMSessionName AS SESSION_NAME,
  $PMMappingName AS MAPPING_NAME,
  TABLE_NAME_output AS TABLE_NAME,
  BEGIN_ROW_CNT_output AS BEGIN_ROW_CNT,
  NumRowsAffected AS INSERT_ROW_CNT,
  DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,
  IFF(
    DUPLICATE_ROW_CNT > 0,
    'There are duplicate records in the table',
    SQLError
  ) AS SQL_TRANSFORM_ERROR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQL_INS_and_DUPS_CHECK_15"""

df_16 = spark.sql(query_16)

df_16.createOrReplaceTempView("EXP_GET_SESSION_INFO_16")

# COMMAND ----------
# DBTITLE 1, AGG_17


query_17 = f"""SELECT
  START_TSTMP AS START_TSTMP,
  MAX(END_TSTMP) AS END_TSTMP,
  WORKFLOW_NAME AS WORKFLOW_NAME,
  SESSION_NAME AS SESSION_NAME,
  MAPPING_NAME AS MAPPING_NAME,
  TABLE_NAME AS TABLE_NAME,
  TO_CHAR(MAX(BEGIN_ROW_CNT)) AS BEGIN_ROW_CNT,
  TO_CHAR(SUM(INSERT_ROW_CNT)) AS INSERT_ROW_CNT,
  MAX(SQL_TRANSFORM_ERROR) AS SQL_TRANSFORM_ERROR,
  TO_CHAR(SUM(DUPLICATE_ROW_CNT)) AS DUPLICATE_ROW_CNT,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  EXP_GET_SESSION_INFO_16
GROUP BY
  START_TSTMP,
  WORKFLOW_NAME,
  SESSION_NAME,
  MAPPING_NAME,
  TABLE_NAME"""

df_17 = spark.sql(query_17)

df_17.createOrReplaceTempView("AGG_17")

# COMMAND ----------
# DBTITLE 1, EXP_CREATE_INS_SQL_18


query_18 = f"""SELECT
  START_TSTMP AS START_TSTMP,
  END_TSTMP AS END_TSTMP,
  WORKFLOW_NAME AS WORKFLOW_NAME,
  SESSION_NAME AS SESSION_NAME,
  MAPPING_NAME AS MAPPING_NAME,
  TABLE_NAME AS TABLE_NAME,
  BEGIN_ROW_CNT AS BEGIN_ROW_CNT,
  INSERT_ROW_CNT AS INSERT_ROW_CNT,
  DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,
  SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,
  'INSERT INTO SQL_TRANSFORM_LOG VALUES (TO_DATE(' || CHR(39) || START_TSTMP || CHR(39) || ',' || CHR(39) || 'MM/DD/YYYY HH24:MI:SS' || CHR(39) || '),TO_DATE(' || CHR(39) || END_TSTMP || CHR(39) || ',' || CHR(39) || 'MM/DD/YYYY HH24:MI:SS' || CHR(39) || '), ' || CHR(39) || WORKFLOW_NAME || CHR(39) || ', ' || CHR(39) || SESSION_NAME || CHR(39) || ', ' || CHR(39) || MAPPING_NAME || CHR(39) || ', ' || CHR(39) || TABLE_NAME || CHR(39) || ', ' || CHR(39) || BEGIN_ROW_CNT || CHR(39) || ', ' || CHR(39) || INSERT_ROW_CNT || CHR(39) || ', ' || CHR(39) || DUPLICATE_ROW_CNT || CHR(39) || ',  ' || CHR(39) || SQL_TRANSFORM_ERROR || CHR(39) || ')' AS INSERT_SQL,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  AGG_17"""

df_18 = spark.sql(query_18)

df_18.createOrReplaceTempView("EXP_CREATE_INS_SQL_18")

# COMMAND ----------
# DBTITLE 1, SQL_INS_to_SQL_TRANSFORM_LOG_19


query_19 = f"""SELECT
  START_TSTMP AS null,
  END_TSTMP AS null,
  WORKFLOW_NAME AS null,
  SESSION_NAME AS null,
  MAPPING_NAME AS null,
  TABLE_NAME AS null,
  BEGIN_ROW_CNT AS null,
  INSERT_ROW_CNT AS null,
  DUPLICATE_ROW_CNT AS null,
  SQL_TRANSFORM_ERROR AS null,
  INSERT_SQL AS null,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_CREATE_INS_SQL_18"""

df_19 = spark.sql(query_19)

df_19.createOrReplaceTempView("SQL_INS_to_SQL_TRANSFORM_LOG_19")

# COMMAND ----------
# DBTITLE 1, EXP_ABORT_SESSION_20


query_20 = f"""SELECT
  DUPLICATE_ROW_CNT_output AS DUPLICATE_ROW_CNT,
  SQL_TRANSFORM_ERROR_output AS SQL_TRANSFORM_ERROR,
  IFF(
    TO_INTEGER(DUPLICATE_ROW_CNT_output) > 0,
    ABORT('There are duplicates rows in the table'),
    IFF(
      NOT ISNULL (SQL_TRANSFORM_ERROR_output),
      ABORT('There is an error in the INSERT statement')
    )
  ) AS ABORT_SESSION,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQL_INS_to_SQL_TRANSFORM_LOG_19"""

df_20 = spark.sql(query_20)

df_20.createOrReplaceTempView("EXP_ABORT_SESSION_20")

# COMMAND ----------
# DBTITLE 1, SQL_TRANSFORM_DUMMY_TARGET


spark.sql("""INSERT INTO
  SQL_TRANSFORM_DUMMY_TARGET
SELECT
  DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,
  SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,
  ABORT_SESSION AS ABORT_SESSION
FROM
  EXP_ABORT_SESSION_20""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_OMS_EDW_Load_Ctrl_Pre_SQL")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_OMS_EDW_Load_Ctrl_Pre_SQL", mainWorkflowId, parentName)
