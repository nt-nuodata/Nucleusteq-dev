# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ../WorkflowUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DDS_OMS_A_Payment_Transaction_Pre")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_DDS_OMS_A_Payment_Transaction_Pre", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_A_PAYMENT_TRANSACTION_0


query_0 = f"""SELECT
  PAYMENT_TRANSACTION_ID AS PAYMENT_TRANSACTION_ID,
  EXTERNAL_PAYMENT_TRANS_ID AS EXTERNAL_PAYMENT_TRANS_ID,
  COMPANY_ID AS COMPANY_ID,
  PAYMENT_TRANS_TYPE AS PAYMENT_TRANS_TYPE,
  PAYMENT_DETAIL_ID AS PAYMENT_DETAIL_ID,
  MERCH_ID AS MERCH_ID,
  MERCH_PASSWORD AS MERCH_PASSWORD,
  REQUESTED_AMOUNT AS REQUESTED_AMOUNT,
  REQUEST_ID AS REQUEST_ID,
  REQUEST_TOKEN AS REQUEST_TOKEN,
  REQUESTED_DTTM AS REQUESTED_DTTM,
  FOLLOW_ON_ID AS FOLLOW_ON_ID,
  FOLLOW_ON_TOKEN AS FOLLOW_ON_TOKEN,
  PROCESSED_AMOUNT AS PROCESSED_AMOUNT,
  TRANSACTION_DTTM AS TRANSACTION_DTTM,
  TRANSACTION_EXP_DATE AS TRANSACTION_EXP_DATE,
  NO_OF_TRIES_LEFT AS NO_OF_TRIES_LEFT,
  RECONCILLATION_ID AS RECONCILLATION_ID,
  TRANS_RESP_DECISION AS TRANS_RESP_DECISION,
  TRANS_RESP_DECISION_DESC AS TRANS_RESP_DECISION_DESC,
  EXTERNAL_RESPONSE_CODE AS EXTERNAL_RESPONSE_CODE,
  EXTERNAL_RESPONSE_MSG AS EXTERNAL_RESPONSE_MSG,
  RECORD_STATUS AS RECORD_STATUS,
  PROCESS_COUNT AS PROCESS_COUNT,
  CREATED_SOURCE AS CREATED_SOURCE,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_SOURCE AS LAST_UPDATED_SOURCE,
  LAST_UPDATED_SOURCE_TYPE AS LAST_UPDATED_SOURCE_TYPE,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  IS_DELETED AS IS_DELETED,
  COMBO_REQUESTED_ID AS COMBO_REQUESTED_ID,
  COMBO_REQUESTED_TOKEN AS COMBO_REQUESTED_TOKEN,
  PAYMENT_PROCESS_PARAMETER AS PAYMENT_PROCESS_PARAMETER,
  BYPASS AS BYPASS,
  LAST_UPDATED_PROCESS AS LAST_UPDATED_PROCESS,
  TRANS_RESP_DECISION_CODE AS TRANS_RESP_DECISION_CODE,
  MERCH_SIGNATURE AS MERCH_SIGNATURE,
  FD_BANK_RESPONSE_CODE AS FD_BANK_RESPONSE_CODE,
  IS_AUTHORIZED AS IS_AUTHORIZED
FROM
  A_PAYMENT_TRANSACTION"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_A_PAYMENT_TRANSACTION_0")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_A_PAYMENT_TRANSACTION_1


query_1 = f"""SELECT
  PAYMENT_TRANSACTION_ID AS PAYMENT_TRANSACTION_ID,
  EXTERNAL_PAYMENT_TRANS_ID AS EXTERNAL_PAYMENT_TRANS_ID,
  COMPANY_ID AS COMPANY_ID,
  PAYMENT_TRANS_TYPE AS PAYMENT_TRANS_TYPE,
  PAYMENT_DETAIL_ID AS PAYMENT_DETAIL_ID,
  MERCH_ID AS MERCH_ID,
  MERCH_PASSWORD AS MERCH_PASSWORD,
  REQUESTED_AMOUNT AS REQUESTED_AMOUNT,
  REQUEST_ID AS REQUEST_ID,
  REQUEST_TOKEN AS REQUEST_TOKEN,
  REQUESTED_DTTM AS REQUESTED_DTTM,
  FOLLOW_ON_ID AS FOLLOW_ON_ID,
  FOLLOW_ON_TOKEN AS FOLLOW_ON_TOKEN,
  PROCESSED_AMOUNT AS PROCESSED_AMOUNT,
  TRANSACTION_DTTM AS TRANSACTION_DTTM,
  TRANSACTION_EXP_DATE AS TRANSACTION_EXP_DATE,
  NO_OF_TRIES_LEFT AS NO_OF_TRIES_LEFT,
  RECONCILLATION_ID AS RECONCILLATION_ID,
  TRANS_RESP_DECISION AS TRANS_RESP_DECISION,
  TRANS_RESP_DECISION_DESC AS TRANS_RESP_DECISION_DESC,
  EXTERNAL_RESPONSE_CODE AS EXTERNAL_RESPONSE_CODE,
  EXTERNAL_RESPONSE_MSG AS EXTERNAL_RESPONSE_MSG,
  RECORD_STATUS AS RECORD_STATUS,
  PROCESS_COUNT AS PROCESS_COUNT,
  CREATED_SOURCE AS CREATED_SOURCE,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_SOURCE AS LAST_UPDATED_SOURCE,
  LAST_UPDATED_SOURCE_TYPE AS LAST_UPDATED_SOURCE_TYPE,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  IS_DELETED AS IS_DELETED,
  COMBO_REQUESTED_ID AS COMBO_REQUESTED_ID,
  COMBO_REQUESTED_TOKEN AS COMBO_REQUESTED_TOKEN,
  PAYMENT_PROCESS_PARAMETER AS PAYMENT_PROCESS_PARAMETER,
  BYPASS AS BYPASS,
  LAST_UPDATED_PROCESS AS LAST_UPDATED_PROCESS,
  TRANS_RESP_DECISION_CODE AS TRANS_RESP_DECISION_CODE,
  MERCH_SIGNATURE AS MERCH_SIGNATURE,
  FD_BANK_RESPONSE_CODE AS FD_BANK_RESPONSE_CODE,
  IS_AUTHORIZED AS IS_AUTHORIZED,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_A_PAYMENT_TRANSACTION_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_Shortcut_to_A_PAYMENT_TRANSACTION_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_OMS_A_PAYMENT_DETAIL_PRE_2


query_2 = f"""SELECT
  PAYMENT_DETAIL_ID AS PAYMENT_DETAIL_ID,
  ENTITY_TYPE_ID AS ENTITY_TYPE_ID,
  ENTITY_ID AS ENTITY_ID,
  ENTITY_NUMBER AS ENTITY_NUMBER,
  CARD_NUMBER AS CARD_NUMBER,
  BILL_TO_FIRST_NAME AS BILL_TO_FIRST_NAME,
  BILL_TO_MIDDLE_NAME AS BILL_TO_MIDDLE_NAME,
  BILL_TO_LAST_NAME AS BILL_TO_LAST_NAME,
  BILL_TO_ADDRESS_LINE1 AS BILL_TO_ADDRESS_LINE1,
  BILL_TO_ADDRESS_LINE2 AS BILL_TO_ADDRESS_LINE2,
  BILL_TO_CITY AS BILL_TO_CITY,
  BILLTO_STATE_PROV AS BILLTO_STATE_PROV,
  BILL_TO_POSTAL_CODE AS BILL_TO_POSTAL_CODE,
  BILL_TO_COUNTRY_CODE AS BILL_TO_COUNTRY_CODE,
  BILL_TO_PHONE_NUMBER AS BILL_TO_PHONE_NUMBER,
  BILL_TO_EMAIL AS BILL_TO_EMAIL,
  REQ_AUTH_AMOUNT AS REQ_AUTH_AMOUNT,
  REQ_SETTLEMENT_AMOUNT AS REQ_SETTLEMENT_AMOUNT,
  REQ_REFUND_AMOUNT AS REQ_REFUND_AMOUNT,
  CURRENCY_CODE AS CURRENCY_CODE,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  PAYMENT_METHOD AS PAYMENT_METHOD,
  AFTERPAY_FLG AS AFTERPAY_FLG,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  OMS_A_PAYMENT_DETAIL_PRE"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_OMS_A_PAYMENT_DETAIL_PRE_2")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_OMS_A_PAYMENT_DETAIL_PRE_3


query_3 = f"""SELECT
  PAYMENT_DETAIL_ID AS PAYMENT_DETAIL_ID,
  ENTITY_TYPE_ID AS ENTITY_TYPE_ID,
  ENTITY_ID AS ENTITY_ID,
  ENTITY_NUMBER AS ENTITY_NUMBER,
  CARD_NUMBER AS CARD_NUMBER,
  BILL_TO_FIRST_NAME AS BILL_TO_FIRST_NAME,
  BILL_TO_MIDDLE_NAME AS BILL_TO_MIDDLE_NAME,
  BILL_TO_LAST_NAME AS BILL_TO_LAST_NAME,
  BILL_TO_ADDRESS_LINE1 AS BILL_TO_ADDRESS_LINE1,
  BILL_TO_ADDRESS_LINE2 AS BILL_TO_ADDRESS_LINE2,
  BILL_TO_CITY AS BILL_TO_CITY,
  BILLTO_STATE_PROV AS BILLTO_STATE_PROV,
  BILL_TO_POSTAL_CODE AS BILL_TO_POSTAL_CODE,
  BILL_TO_COUNTRY_CODE AS BILL_TO_COUNTRY_CODE,
  BILL_TO_PHONE_NUMBER AS BILL_TO_PHONE_NUMBER,
  BILL_TO_EMAIL AS BILL_TO_EMAIL,
  REQ_AUTH_AMOUNT AS REQ_AUTH_AMOUNT,
  REQ_SETTLEMENT_AMOUNT AS REQ_SETTLEMENT_AMOUNT,
  REQ_REFUND_AMOUNT AS REQ_REFUND_AMOUNT,
  CURRENCY_CODE AS CURRENCY_CODE,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  PAYMENT_METHOD AS PAYMENT_METHOD,
  AFTERPAY_FLG AS AFTERPAY_FLG,
  LOAD_TSTMP AS LOAD_TSTMP,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_OMS_A_PAYMENT_DETAIL_PRE_2"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("SQ_Shortcut_to_OMS_A_PAYMENT_DETAIL_PRE_3")

# COMMAND ----------
# DBTITLE 1, JNR_PAYMENT_DETAIL_ID_4


query_4 = f"""SELECT
  DETAIL.PAYMENT_TRANSACTION_ID AS PAYMENT_TRANSACTION_ID,
  DETAIL.EXTERNAL_PAYMENT_TRANS_ID AS EXTERNAL_PAYMENT_TRANS_ID,
  DETAIL.COMPANY_ID AS COMPANY_ID,
  DETAIL.PAYMENT_TRANS_TYPE AS PAYMENT_TRANS_TYPE,
  DETAIL.PAYMENT_DETAIL_ID AS PAYMENT_DETAIL_ID,
  DETAIL.MERCH_ID AS MERCH_ID,
  DETAIL.MERCH_PASSWORD AS MERCH_PASSWORD,
  DETAIL.REQUESTED_AMOUNT AS REQUESTED_AMOUNT,
  DETAIL.REQUEST_ID AS REQUEST_ID,
  DETAIL.REQUEST_TOKEN AS REQUEST_TOKEN,
  DETAIL.REQUESTED_DTTM AS REQUESTED_DTTM,
  DETAIL.FOLLOW_ON_ID AS FOLLOW_ON_ID,
  DETAIL.FOLLOW_ON_TOKEN AS FOLLOW_ON_TOKEN,
  DETAIL.PROCESSED_AMOUNT AS PROCESSED_AMOUNT,
  DETAIL.TRANSACTION_DTTM AS TRANSACTION_DTTM,
  DETAIL.TRANSACTION_EXP_DATE AS TRANSACTION_EXP_DATE,
  DETAIL.NO_OF_TRIES_LEFT AS NO_OF_TRIES_LEFT,
  DETAIL.RECONCILLATION_ID AS RECONCILLATION_ID,
  DETAIL.TRANS_RESP_DECISION AS TRANS_RESP_DECISION,
  DETAIL.TRANS_RESP_DECISION_DESC AS TRANS_RESP_DECISION_DESC,
  DETAIL.EXTERNAL_RESPONSE_CODE AS EXTERNAL_RESPONSE_CODE,
  DETAIL.EXTERNAL_RESPONSE_MSG AS EXTERNAL_RESPONSE_MSG,
  DETAIL.RECORD_STATUS AS RECORD_STATUS,
  DETAIL.PROCESS_COUNT AS PROCESS_COUNT,
  DETAIL.CREATED_SOURCE AS CREATED_SOURCE,
  DETAIL.CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  DETAIL.CREATED_DTTM AS CREATED_DTTM,
  DETAIL.LAST_UPDATED_SOURCE AS LAST_UPDATED_SOURCE,
  DETAIL.LAST_UPDATED_SOURCE_TYPE AS LAST_UPDATED_SOURCE_TYPE,
  DETAIL.LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  DETAIL.IS_DELETED AS IS_DELETED,
  DETAIL.COMBO_REQUESTED_ID AS COMBO_REQUESTED_ID,
  DETAIL.COMBO_REQUESTED_TOKEN AS COMBO_REQUESTED_TOKEN,
  DETAIL.PAYMENT_PROCESS_PARAMETER AS PAYMENT_PROCESS_PARAMETER,
  DETAIL.BYPASS AS BYPASS,
  DETAIL.LAST_UPDATED_PROCESS AS LAST_UPDATED_PROCESS,
  DETAIL.TRANS_RESP_DECISION_CODE AS TRANS_RESP_DECISION_CODE,
  DETAIL.MERCH_SIGNATURE AS MERCH_SIGNATURE,
  DETAIL.FD_BANK_RESPONSE_CODE AS FD_BANK_RESPONSE_CODE,
  DETAIL.IS_AUTHORIZED AS IS_AUTHORIZED,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("JNR_PAYMENT_DETAIL_ID_4")

# COMMAND ----------
# DBTITLE 1, EXP_A_PAYMENT_TRANSACTION_PRE_5


query_5 = f"""SELECT
  PAYMENT_TRANSACTION_ID AS PAYMENT_TRANSACTION_ID,
  EXTERNAL_PAYMENT_TRANS_ID AS EXTERNAL_PAYMENT_TRANS_ID,
  COMPANY_ID AS COMPANY_ID,
  PAYMENT_TRANS_TYPE AS PAYMENT_TRANS_TYPE,
  PAYMENT_DETAIL_ID AS PAYMENT_DETAIL_ID,
  MERCH_ID AS MERCH_ID,
  MERCH_PASSWORD AS MERCH_PASSWORD,
  REQUESTED_AMOUNT AS REQUESTED_AMOUNT,
  REQUEST_ID AS REQUEST_ID,
  REQUEST_TOKEN AS REQUEST_TOKEN,
  REQUESTED_DTTM AS REQUESTED_DTTM,
  FOLLOW_ON_ID AS FOLLOW_ON_ID,
  FOLLOW_ON_TOKEN AS FOLLOW_ON_TOKEN,
  PROCESSED_AMOUNT AS PROCESSED_AMOUNT,
  TRANSACTION_DTTM AS TRANSACTION_DTTM,
  TRANSACTION_EXP_DATE AS TRANSACTION_EXP_DATE,
  NO_OF_TRIES_LEFT AS NO_OF_TRIES_LEFT,
  RECONCILLATION_ID AS RECONCILLATION_ID,
  TRANS_RESP_DECISION AS TRANS_RESP_DECISION,
  TRANS_RESP_DECISION_DESC AS TRANS_RESP_DECISION_DESC,
  EXTERNAL_RESPONSE_CODE AS EXTERNAL_RESPONSE_CODE,
  EXTERNAL_RESPONSE_MSG AS EXTERNAL_RESPONSE_MSG,
  RECORD_STATUS AS RECORD_STATUS,
  PROCESS_COUNT AS PROCESS_COUNT,
  CREATED_SOURCE AS CREATED_SOURCE,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_SOURCE AS LAST_UPDATED_SOURCE,
  LAST_UPDATED_SOURCE_TYPE AS LAST_UPDATED_SOURCE_TYPE,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  IS_DELETED AS IS_DELETED,
  COMBO_REQUESTED_ID AS COMBO_REQUESTED_ID,
  COMBO_REQUESTED_TOKEN AS COMBO_REQUESTED_TOKEN,
  PAYMENT_PROCESS_PARAMETER AS PAYMENT_PROCESS_PARAMETER,
  BYPASS AS BYPASS,
  LAST_UPDATED_PROCESS AS LAST_UPDATED_PROCESS,
  TRANS_RESP_DECISION_CODE AS TRANS_RESP_DECISION_CODE,
  MERCH_SIGNATURE AS MERCH_SIGNATURE,
  FD_BANK_RESPONSE_CODE AS FD_BANK_RESPONSE_CODE,
  IS_AUTHORIZED AS IS_AUTHORIZED,
  now() AS LOAD_TSTMP,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNR_PAYMENT_DETAIL_ID_4"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("EXP_A_PAYMENT_TRANSACTION_PRE_5")

# COMMAND ----------
# DBTITLE 1, OMS_A_PAYMENT_TRANSACTION_PRE


spark.sql("""INSERT INTO
  OMS_A_PAYMENT_TRANSACTION_PRE
SELECT
  PAYMENT_TRANSACTION_ID AS PAYMENT_TRANSACTION_ID,
  EXTERNAL_PAYMENT_TRANS_ID AS EXTERNAL_PAYMENT_TRANS_ID,
  COMPANY_ID AS COMPANY_ID,
  PAYMENT_TRANS_TYPE AS PAYMENT_TRANS_TYPE,
  PAYMENT_DETAIL_ID AS PAYMENT_DETAIL_ID,
  MERCH_ID AS MERCH_ID,
  MERCH_PASSWORD AS MERCH_PASSWORD,
  REQUESTED_AMOUNT AS REQUESTED_AMOUNT,
  REQUEST_ID AS REQUEST_ID,
  REQUEST_TOKEN AS REQUEST_TOKEN,
  REQUESTED_DTTM AS REQUESTED_DTTM,
  FOLLOW_ON_ID AS FOLLOW_ON_ID,
  FOLLOW_ON_TOKEN AS FOLLOW_ON_TOKEN,
  PROCESSED_AMOUNT AS PROCESSED_AMOUNT,
  TRANSACTION_DTTM AS TRANSACTION_DTTM,
  TRANSACTION_EXP_DATE AS TRANSACTION_EXP_DATE,
  NO_OF_TRIES_LEFT AS NO_OF_TRIES_LEFT,
  RECONCILLATION_ID AS RECONCILLATION_ID,
  TRANS_RESP_DECISION AS TRANS_RESP_DECISION,
  TRANS_RESP_DECISION_DESC AS TRANS_RESP_DECISION_DESC,
  EXTERNAL_RESPONSE_CODE AS EXTERNAL_RESPONSE_CODE,
  EXTERNAL_RESPONSE_MSG AS EXTERNAL_RESPONSE_MSG,
  RECORD_STATUS AS RECORD_STATUS,
  PROCESS_COUNT AS PROCESS_COUNT,
  CREATED_SOURCE AS CREATED_SOURCE,
  CREATED_SOURCE_TYPE AS CREATED_SOURCE_TYPE,
  CREATED_DTTM AS CREATED_DTTM,
  LAST_UPDATED_SOURCE AS LAST_UPDATED_SOURCE,
  LAST_UPDATED_SOURCE_TYPE AS LAST_UPDATED_SOURCE_TYPE,
  LAST_UPDATED_DTTM AS LAST_UPDATED_DTTM,
  IS_DELETED AS IS_DELETED,
  COMBO_REQUESTED_ID AS COMBO_REQUESTED_ID,
  COMBO_REQUESTED_TOKEN AS COMBO_REQUESTED_TOKEN,
  PAYMENT_PROCESS_PARAMETER AS PAYMENT_PROCESS_PARAMETER,
  BYPASS AS BYPASS,
  LAST_UPDATED_PROCESS AS LAST_UPDATED_PROCESS,
  TRANS_RESP_DECISION_CODE AS TRANS_RESP_DECISION_CODE,
  MERCH_SIGNATURE AS MERCH_SIGNATURE,
  FD_BANK_RESPONSE_CODE AS FD_BANK_RESPONSE_CODE,
  IS_AUTHORIZED AS IS_AUTHORIZED,
  LOAD_TSTMP AS LOAD_TSTMP
FROM
  EXP_A_PAYMENT_TRANSACTION_PRE_5""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_DDS_OMS_A_Payment_Transaction_Pre")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_DDS_OMS_A_Payment_Transaction_Pre", mainWorkflowId, parentName)
